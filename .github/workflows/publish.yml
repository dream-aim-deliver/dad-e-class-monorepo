name: Publish

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  test:
    name: Publish
    runs-on: ubuntu-latest
    environment: CI
    permissions:
      contents: write
      id-token: write # needed for provenance data generation
      pull-requests: write
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 23
          registry-url: https://registry.npmjs.org/

      - name: Change dependency versions to 'workspace:*'
        run: python3 tools/update-dependency-versions.py -w . -s workspace
        shell: bash

      - name: Install dependencies
        run: |
          cp .npmrc.template .npmrc
          sed -i "s/\$DAD_GH_NPM_TOKEN/${{ secrets.DAD_GH_NPM_TOKEN }}/g" .npmrc
          pnpm install
        shell: bash

      - name: Change back dependencies from 'workspace:*' to versions
        run: python3 tools/update-dependency-versions.py -w . -s explicit -v ${{ github.event.release.tag_name }}
        shell: bash

      - name: Prepare packages
        run: pnpm exec nx --no-cloud run-many -t build
        env:
          'NEXTAUTH_SECRET': 'Wu/hegOKb+gqUY9pBZeLyZQLatMlZSWvK'
          'NEXTAUTH_URL': 'https://example.com'
          'AUTH_SECRET': 'Wu/hegOKb+gqUY9pBZeLyZQLatMlZSWvK'
          'AUTH_ENABLE_TEST_ACCOUNTS': 'true'
          'AUTH_AUTH0_CLIENT_ID': ${{ secrets.AUTH_AUTH0_CLIENT_ID }}
          'AUTH_AUTH0_CLIENT_SECRET': ${{ secrets.AUTH_AUTH0_CLIENT_SECRET }}
          'AUTH_AUTH0_ISSUER': ${{ secrets.AUTH_AUTH0_ISSUER }}
          'AUTH_AUTH0_AUTHORIZATION_URL': ${{ secrets.AUTH_AUTH0_AUTHORIZATION_URL }}
          'S3_HOSTNAME': 'localhost'
          'S3_PORT': '9000'
          'S3_PROTOCOL': 'http'
          'E_CLASS_DEV_MODE': 'true'
        shell: bash

      - name: Print Environment Info
        run: pnpm exec nx report
        shell: bash

      - name: Authenticate with npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "//registry.npmjs.org/:_authToken=\${NODE_AUTH_TOKEN}" >> ~/.npmrc

      - name: Publish packages
        run: |
          pnpm config set //registry.npmjs.org/:_authToken ${NODE_AUTH_TOKEN}
          pnpm exec nx release publish
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        #   NPM_CONFIG_PROVENANCE: true

      - name: Revert back dependency versions to 'workspace:*' for local development
        run: python3 tools/update-dependency-versions.py -w . -s workspace
        shell: bash

      - name: Commit changes for local development
        env:
          GITHUB_TOKEN: ${{ secrets.PR_PAT }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          timestamp=$(date +%y%m%d-%H%M%S)
          BRANCH_NAME="chore_change_${{ github.event.release.tag_name }}_to_workspace_${timestamp}"
          git checkout -b ${BRANCH_NAME}
          git add .
          
          # Check if there are any changes to commit
          if git diff --cached --quiet; then
            echo "No changes to commit. Skipping PR creation."
            exit 0
          fi
          
          git commit -m "chore: change dependencies to 'workspace:*' for local development"
          git push origin ${BRANCH_NAME}
          gh pr create --title "chore: change dependencies to 'workspace:*' for local development" --body "This PR changes dependencies to 'workspace:*' for local development, from ${{ github.event.release.tag_name }}" --base main --head ${BRANCH_NAME}
        shell: bash

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write
      pull-requests: write
      packages: write

    steps:

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 23
          registry-url: https://registry.npmjs.org/

      - name: Install poetry
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install poetry
    
      - name: Install dependencies
        run: |
          cp .npmrc.template .npmrc
          sed -i "s/\$DAD_GH_NPM_TOKEN/${{ secrets.DAD_GH_NPM_TOKEN }}/g" .npmrc
          pnpm install --frozen-lockfile
          pnpm exec playwright install --with-deps
        shell: bash

      - name: Docker meta (platform)
        id: meta-platform
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/e-class-platform
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}.{{patch}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=E-Class Platform
            org.opencontainers.image.description=Production-ready NextJS Application for E-Class Platforms
            org.opencontainers.image.vendor=Dad AI

      - name: Docker meta (cms)
        id: meta-cms
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/e-class-cms
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}.{{patch}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=E-Class CMS
            org.opencontainers.image.description=Production-ready NextJS CMS Application for E-Class Content Management
            org.opencontainers.image.vendor=Dad AI
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push platform
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta-platform.outputs.tags }}
          labels: ${{ steps.meta-platform.outputs.labels }}
          file: ./apps/platform/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false
        env:
          AUTH_SECRET: "Wu/hegOKb+gqUY9pBZeLyZQLatMlZSWvKifF90jRIH8="
          NEXTAUTH_SECRET: "Wu/hegOKb+gqUY9pBZeLyZQLatMlZSWvK"
          NEXTAUTH_URL: "https://example.com"
          AUTH_ENABLE_TEST_ACCOUNTS: "true"
          AUTH_AUTH0_CLIENT_ID: ${{ secrets.AUTH_AUTH0_CLIENT_ID }}
          AUTH_AUTH0_CLIENT_SECRET: ${{ secrets.AUTH_AUTH0_CLIENT_SECRET }}
          AUTH_AUTH0_ISSUER: ${{ secrets.AUTH_AUTH0_ISSUER }}
          AUTH_AUTH0_AUTHORIZATION_URL:  ${{ secrets.AUTH_AUTH0_AUTHORIZATION_URL }}
          S3_HOSTNAME: "localhost"
          S3_PORT: "9000"
          S3_PROTOCOL: "http"
          E_CLASS_DEV_MODE: "true"

      - name: Build and push cms
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta-cms.outputs.tags }}
          labels: ${{ steps.meta-cms.outputs.labels }}
          file: ./apps/cms/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false
        env:
          AUTH_SECRET: "Wu/hegOKb+gqUY9pBZeLyZQLatMlZSWvKifF90jRIH8="
          NEXTAUTH_SECRET: "Wu/hegOKb+gqUY9pBZeLyZQLatMlZSWvK"
          NEXTAUTH_URL: "https://example.com"
          AUTH_ENABLE_TEST_ACCOUNTS: "true"
          AUTH_AUTH0_CLIENT_ID: ${{ secrets.AUTH_AUTH0_CLIENT_ID }}
          AUTH_AUTH0_CLIENT_SECRET: ${{ secrets.AUTH_AUTH0_CLIENT_SECRET }}
          AUTH_AUTH0_ISSUER: ${{ secrets.AUTH_AUTH0_ISSUER }}
          AUTH_AUTH0_AUTHORIZATION_URL:  ${{ secrets.AUTH_AUTH0_AUTHORIZATION_URL }}
          S3_HOSTNAME: "localhost"
          S3_PORT: "9000"
          S3_PROTOCOL: "http"
          E_CLASS_DEV_MODE: "true"
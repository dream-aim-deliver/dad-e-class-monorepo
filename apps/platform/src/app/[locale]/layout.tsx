import { i18nConfig, TLocale } from '@maany_shr/e-class-translations';
import './global.css';
import { NextIntlClientProvider } from 'next-intl';
import { getMessages } from 'next-intl/server';
import { Figtree, Nunito, Raleway, Roboto } from 'next/font/google';
import { notFound } from 'next/navigation';
import { SessionProvider } from 'next-auth/react';
import { auth, viewModels } from '@maany_shr/e-class-models';
import { NextAuthGateway } from '@maany_shr/e-class-auth';
import nextAuth from '../../lib/infrastructure/server/config/auth/next-auth.config';
import {
    getQueryClient,
    trpc,
} from '../../lib/infrastructure/server/config/trpc/server';
import { env } from '../../lib/infrastructure/server/utils/env';
import {
    languageCodeToLocale,
    localeToLanguageCode,
} from '../../lib/infrastructure/server/utils/language-mapping';
import Layout from '../../lib/infrastructure/client/pages/layout';
import { createGetLanguagesPresenter } from '../../lib/infrastructure/server/presenter/get-languages-presenter';
import MockTRPCClientProviders from '../../lib/infrastructure/client/trpc/mock-client-providers';

export const metadata = {
    title: 'Welcome to Platform',
    description: 'Generated by create-nx-workspace',
};

const nunito = Nunito({
    weight: ['300', '400', '700'],
    variable: '--font-nunito',
    subsets: ['latin'],
});
const raleway = Raleway({
    weight: ['300', '400', '700'],
    variable: '--font-raleway',
    subsets: ['latin'],
});
const roboto = Roboto({
    weight: ['300', '400', '700'],
    variable: '--font-roboto',
    subsets: ['latin'],
});
const figtree = Figtree({
    weight: ['300', '400', '700'],
    variable: '--font-figtree',
    subsets: ['latin'],
});

export default async function RootLayout({
    children,
    params: paramsPromise,
}: {
    children: React.ReactNode;
    params: Promise<{ locale: string }>;
}) {
    const queryOptions = trpc.listLanguages.queryOptions({});
    const queryClient = getQueryClient();
    const languagesResponse = await queryClient.fetchQuery(queryOptions);
    let languagesViewModel: viewModels.TLanguageListViewModel | undefined;
    const presenter = createGetLanguagesPresenter((viewModel) => {
        languagesViewModel = viewModel;
    });
    await presenter.present(languagesResponse, languagesViewModel);
    if (!languagesViewModel || languagesViewModel.mode !== 'default') {
        throw Error(
            languagesViewModel?.data?.message ||
                'Unknown error happened while loading languages',
        );
    }

    const { languages } = languagesViewModel.data;

    // Check if platform's languages are supported
    const availableLocales: TLocale[] = [];
    for (const language of languages) {
        const availableLocale = languageCodeToLocale[language.languageCode];
        if (availableLocale && i18nConfig.locales.includes(availableLocale)) {
            availableLocales.push(availableLocale);
        } else {
            // TODO: might be a soft error
            throw new Error('A platform language is not supported');
        }
    }

    // Check if the locale is supported
    const params = await paramsPromise;
    const locale = params.locale as TLocale;
    const language = languages.find(
        (value) => value.languageCode === localeToLanguageCode[locale],
    );

    if (!availableLocales.includes(locale) || !language) {
        notFound();
    }

    const messages = await getMessages({ locale });

    // Perform authentication
    const authGateway = new NextAuthGateway(nextAuth);
    const sessionDTO = await authGateway.getSession();
    let session: auth.TSession | null = null;
    if (sessionDTO.success) {
        session = sessionDTO.data;
    }

    return (
        <html lang={locale}>
            <body
                className={`${nunito.variable} ${roboto.variable} ${raleway.variable} ${figtree.variable}`}
            >
                <SessionProvider session={session}>
                    <NextIntlClientProvider locale={locale} messages={messages}>
                        <MockTRPCClientProviders>
                            <Layout availableLocales={availableLocales}>
                                {children}
                            </Layout>
                        </MockTRPCClientProviders>
                    </NextIntlClientProvider>
                </SessionProvider>
            </body>
        </html>
    );
}

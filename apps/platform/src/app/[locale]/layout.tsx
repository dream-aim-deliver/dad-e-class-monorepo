import { i18nConfig, TLocale } from '@maany_shr/e-class-translations';
import './global.css';
import { NextIntlClientProvider } from 'next-intl';
import { getMessages } from 'next-intl/server';
import { Figtree, Nunito, Raleway, Roboto } from 'next/font/google';
import { notFound } from 'next/navigation';
import { SessionProvider } from 'next-auth/react';
import { auth } from '@maany_shr/e-class-models';
import { NextAuthGateway } from '@maany_shr/e-class-auth';
import nextAuth from '../../lib/infrastructure/server/config/auth/next-auth.config';
import ClientProviders from '../../lib/infrastructure/client/utils/client-providers';
import { trpc } from '../../lib/infrastructure/server/config/trpc/server';
import { env } from '../../lib/infrastructure/server/utils/env';
import { unstable_cache } from 'next/cache';
import Header from '../../lib/infrastructure/client/pages/header';
import { languageCodeToLocale } from '../../lib/infrastructure/server/utils/language-mapping';
import Footer from '../../lib/infrastructure/client/pages/footer';

export const metadata = {
    title: 'Welcome to Platform',
    description: 'Generated by create-nx-workspace',
};

const nunito = Nunito({
    weight: ['300', '400', '700'],
    variable: '--font-nunito',
    subsets: ['latin'],
});
const raleway = Raleway({
    weight: ['300', '400', '700'],
    variable: '--font-raleway',
    subsets: ['latin'],
});
const roboto = Roboto({
    weight: ['300', '400', '700'],
    variable: '--font-roboto',
    subsets: ['latin'],
});
const figtree = Figtree({
    weight: ['300', '400', '700'],
    variable: '--font-figtree',
    subsets: ['latin'],
});

interface RootLayoutProps {
    children: React.ReactNode;
    params: { locale: string };
}

// TODO: revalidation can be configured
const getCachedPlatform = unstable_cache(
    async () => await trpc.getPlatform({ id: env.platformId }),
);

const listCachedLanguages = unstable_cache(
    async () => await trpc.listLanguages({ platformId: env.platformId }),
);

export default async function RootLayout({
    children,
    params: paramsPromise,
}: {
    children: React.ReactNode;
    params: Promise<{ locale: string }>;
}) {
    // Fetch cached configuration
    const platform = await getCachedPlatform();
    const languages = await listCachedLanguages();

    // Check if platform's languages are supported
    const availableLocales: TLocale[] = [];
    for (const language of languages) {
        const availableLocale = languageCodeToLocale[language.code];
        if (availableLocale && i18nConfig.locales.includes(availableLocale)) {
            availableLocales.push(availableLocale);
        } else {
            // TODO: might be a soft error
            throw new Error('A platform language is not supported');
        }
    }

    // Check if the locale is supported
    const params = await paramsPromise;
    const locale = params.locale as TLocale;
    if (!availableLocales.includes(locale)) {
        notFound();
    }
    const messages = await getMessages({ locale });

    // Perform authentication
    const authGateway = new NextAuthGateway(nextAuth);
    const sessionDTO = await authGateway.getSession();
    let session: auth.TSession | null = null;
    if (sessionDTO.success) {
        session = sessionDTO.data;
    }

    return (
        <html lang={locale}>
            <body
                className={`${nunito.variable} ${roboto.variable} ${raleway.variable} ${figtree.variable}`}
            >
                <SessionProvider session={session}>
                    <NextIntlClientProvider locale={locale} messages={messages}>
                        <ClientProviders>
                            <div
                                className="w-full min-h-screen bg-black flex flex-col items-center"
                                style={{
                                    backgroundImage: `url(${platform.backgroundImageUrl})`,
                                    // TODO: have a fallback color
                                }}
                            >
                                <Header
                                    platform={platform}
                                    availableLocales={availableLocales}
                                    locale={locale}
                                    session={session}
                                />
                                <main className="flex-grow w-full max-w-screen-2xl pt-24">
                                    {children}
                                </main>
                                <Footer
                                    locale={locale}
                                    availableLocales={availableLocales}
                                    platform={platform}
                                />
                            </div>
                        </ClientProviders>
                    </NextIntlClientProvider>
                </SessionProvider>
            </body>
        </html>
    );
}

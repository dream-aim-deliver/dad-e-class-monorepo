'use client';

// Auto-generated by page-scaffold command
// TSK: TSK-3
// Features: createCourseReview, getCourseCertificateData, getCourseStatus
// Uses existing presenters: useGetCourseStatusPresenter, useGetCourseCertificateDataPresenter, useCreateCourseReviewPresenter

import { viewModels } from '@maany_shr/e-class-models';
import { trpc } from '../trpc/cms-client';
import { useGetCourseStatusPresenter } from '../hooks/use-get-course-status-presenter';
import { useGetCourseCertificateDataPresenter } from '../hooks/use-get-course-certificate-data-presenter';
import { useCreateCourseReviewPresenter } from '../hooks/use-create-course-review-presenter';
import { useState, useEffect } from 'react';
import {
    DefaultLoading,
    DefaultError,
    DefaultNotFound,
    CourseCompletionModal,
    Button,
} from '@maany_shr/e-class-ui-kit';
import { useLocale, useTranslations } from 'next-intl';
import { TLocale } from '@maany_shr/e-class-translations';
import { useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';

interface CourseCompletionProps {
    slug: string;
}

export default function CourseCompletion({ slug }: CourseCompletionProps) {
    const locale = useLocale() as TLocale;
    const router = useRouter();
    const sessionDTO = useSession();
    const session = sessionDTO.data;
    const isLoggedIn = !!session;

    // State for course status
    const [courseStatusResponse] = trpc.getCourseStatus.useSuspenseQuery({
        courseSlug: slug,
    });
    const [courseStatusViewModel, setCourseStatusViewModel] = useState<
        viewModels.TGetCourseStatusViewModel | undefined
    >(undefined);
    const { presenter: courseStatusPresenter } = useGetCourseStatusPresenter(
        setCourseStatusViewModel,
    );

    // @ts-ignore
    courseStatusPresenter.present(courseStatusResponse, courseStatusViewModel);

    // State for certificate data
    const [certificateDataResponse] =
        trpc.getCourseCertificateData.useSuspenseQuery({
            courseSlug: slug,
        });
    const [certificateDataViewModel, setCertificateDataViewModel] = useState<
        viewModels.TGetCourseCertificateDataViewModel | undefined
    >(undefined);
    const { presenter: certificateDataPresenter } =
        useGetCourseCertificateDataPresenter(setCertificateDataViewModel);

    // @ts-ignore
    presenter.present(
        certificateDataResponse,
        certificateDataViewModel,
    );

    // State for course review
    const [courseReviewViewModel, setCourseReviewViewModel] = useState<
        viewModels.TCreateCourseReviewViewModel | undefined
    >(undefined);
    const { presenter: courseReviewPresenter } = useCreateCourseReviewPresenter(
        setCourseReviewViewModel,
    );

    // Course completion modal state
    const [showCompletionModal, setShowCompletionModal] = useState(false);

    // TRPC mutation for creating review
    const createReviewMutation = trpc.createCourseReview.useMutation();

    // Check if course is completed and show modal
    useEffect(() => {
        if (courseStatusViewModel?.mode === 'default') {
            const isCompleted =
                courseStatusViewModel.data?.courseStatus.status === 'completed';
            if (isCompleted) {
                setShowCompletionModal(true);
            }
        }
    }, [courseStatusViewModel]);

    // Authentication check based on discovered patterns
    useEffect(() => {
        if (!isLoggedIn) {
            router.push('/login');
        }
    }, [isLoggedIn, router]);

    // Loading state using discovered patterns
    if (!courseStatusViewModel || !certificateDataViewModel) {
        return <DefaultLoading locale={locale} variant="minimal" />;
    }

    if (
        courseStatusViewModel.mode === 'not-found'
    ) {
        return <DefaultNotFound locale={locale} />;
    }

    // Error handling - kaboom
    if (courseStatusViewModel.mode === 'kaboom') {
        return <DefaultError locale={locale} />;
    }

    // Extract course status data
    const courseStatusData = courseStatusViewModel.data;
    const certificateData = certificateDataViewModel.data;


    // Handle download certificate
    const handleDownloadCertificate = () => {
        // TODO: Implement certificate download functionality
        // This could trigger a PDF generation, open a new tab, or download a file
        // For now, we'll navigate to a certificate page or trigger a download
        console.log('Download certificate for course:', slug);
        // Example: window.open(`/certificates/${slug}`, '_blank');
    };

    // Handle rate course
    const handleRateCourse = () => {
        // TODO: Implement rating UI - this could navigate to a review page
        // or open a rating modal
        router.push(`/courses/${slug}/review`);
    };

    // Handle modal close
    const handleCloseModal = () => {
        setShowCompletionModal(false);
    };

    return (
        <div className="flex flex-col space-y-5 px-30">
                <h1>Title</h1>

        </div>
    );
}

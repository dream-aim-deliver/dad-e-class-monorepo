'use client';

// Auto-generated by page-scaffold command
// TSK: TSK-3
// Features: createCourseReview, getCourseCertificateData, getCourseStatus
// Uses existing presenters: useGetCourseStatusPresenter, useGetCourseCertificateDataPresenter, useCreateCourseReviewPresenter

import { viewModels } from '@maany_shr/e-class-models';
import { trpc } from '../trpc/cms-client';
import { useGetCourseStatusPresenter } from '../hooks/use-get-course-status-presenter';
import { useGetCourseCertificateDataPresenter } from '../hooks/use-get-course-certificate-data-presenter';
import { useCreateCourseReviewPresenter } from '../hooks/use-create-course-review-presenter';
import { useState, useEffect } from 'react';
import {
    DefaultLoading,
    DefaultError,
    DefaultNotFound,
    CourseCompletionModal,
    ReviewDialog,
    generateCertificatePDF,
} from '@maany_shr/e-class-ui-kit';
import { useLocale, useTranslations } from 'next-intl';
import { TLocale } from '@maany_shr/e-class-translations';
import { useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';

interface CourseCompletionProps {
    slug: string;
    courseImage: string;
    courseTitle: string;
}

export default function CourseCompletion({ slug, courseImage, courseTitle }: CourseCompletionProps) {
    const locale = useLocale() as TLocale;
    const router = useRouter();
    const sessionDTO = useSession();
    const session = sessionDTO.data;
    const isLoggedIn = !!session;

    // Add state for error message
    const [errorMessage, setErrorMessage] = useState<string | undefined>(undefined);
    const [certificateError, setCertificateError] = useState<string | null>(null);

    // State for course status
    const [courseStatusResponse] = trpc.getCourseStatus.useSuspenseQuery({
        courseSlug: slug,
    });
    const [courseStatusViewModel, setCourseStatusViewModel] = useState<
        viewModels.TGetCourseStatusViewModel | undefined
    >(undefined);
    const { presenter: courseStatusPresenter } = useGetCourseStatusPresenter(
        setCourseStatusViewModel,
    );

    // @ts-ignore
    courseStatusPresenter.present(courseStatusResponse, courseStatusViewModel);

    // State for certificate data
    const [certificateDataResponse] =
        trpc.getCourseCertificateData.useSuspenseQuery({
            courseSlug: slug,
        });
    const [certificateDataViewModel, setCertificateDataViewModel] = useState<
        viewModels.TGetCourseCertificateDataViewModel | undefined
    >(undefined);
    const { presenter: certificateDataPresenter } =
        useGetCourseCertificateDataPresenter(setCertificateDataViewModel);

    // @ts-ignore
    certificateDataPresenter.present(certificateDataResponse, certificateDataViewModel);    // State for course review
    const [courseReviewViewModel, setCourseReviewViewModel] = useState<
        viewModels.TCreateCourseReviewViewModel | undefined
    >(undefined);
    const { presenter: courseReviewPresenter } = useCreateCourseReviewPresenter(
        setCourseReviewViewModel,
    );

    // Course completion modal state
    type ModalState = 'completion' | 'review-form' | 'review-thank-you' | 'none';
    const [modalState, setModalState] = useState<ModalState>('none');

    // TRPC mutation for creating review with proper callbacks
    const createReviewMutation = trpc.createCourseReview.useMutation({
        onMutate: () => {
            setErrorMessage(undefined);
        },
        onSuccess: (data) => {
            setErrorMessage(undefined);
            // @ts-ignore
            courseReviewPresenter.present(data, courseReviewViewModel);
            // Switch to thank you state
            setModalState('review-thank-you');
        },
        onError: (error) => {
            setErrorMessage(error.message);
        }
    });

    // Check if course is completed and show modal
    useEffect(() => {
        if (courseStatusViewModel?.mode === 'default') {
            const isCompleted =
                courseStatusViewModel.data?.courseStatus.status === 'completed';
            if (isCompleted) {
                setModalState('completion');
            }
        }
    }, [courseStatusViewModel]);

    // Authentication check based on discovered patterns
    useEffect(() => {
        if (!isLoggedIn) {
            router.push('/login');
        }
    }, [isLoggedIn, router]);

    // Handle download certificate
    const handleDownloadCertificate =async () => {
        if (certificateDataViewModel?.mode === 'default') {
            
            try {
                setCertificateError(null); // Clear any previous errors
                const certificateData = certificateDataViewModel.data.certificateData;

                // Map the certificate data to the expected format
                await generateCertificatePDF({
                    studentName: `${certificateData.studentName} ${certificateData.studentSurname}`,
                    studentUsername: certificateData.studentUsername,
                    courseTitle: certificateData.courseName,
                    courseSlug: slug,
                    courseDescription: certificateData.courseDescription,
                    completionDate: certificateData.awardedOn,
                    platformName: certificateData.platformName,
                    platformLogoUrl: certificateData.platformLogoUrl,
                    platformFooterContent: certificateData.platformFooterContent,
                    courseSummary: certificateData.courseSummary,
                    locale: locale,
                });
            } catch (error) {
                setCertificateError(typeof error === 'string' ? error : 'Failed to generate certificate');
            }
        }
    };

    // Handle rate course
    const handleRateCourse = () => {
        setModalState('review-form');
    };

    // Handle modal close
    const handleCloseCompletionModal = () => {
        setModalState('none');
    };

    const handleCloseReviewModal = () => {
        setModalState('none');
    };

    const handleSubmitReview = (rating: number, review: string) => {
        createReviewMutation.mutate({
            courseSlug: slug,
            rating,
            review,
        });
    };

    const handleSkipReview = () => {
        setModalState('none');
    };

    // Loading state using discovered patterns
    if (!courseStatusViewModel || !certificateDataViewModel) {
        return <DefaultLoading locale={locale} variant="minimal" />;
    }

    if (
        courseStatusViewModel.mode === 'not-found'
    ) {
        return <DefaultNotFound locale={locale} />;
    }

    // Error handling - kaboom
    if (courseStatusViewModel.mode === 'kaboom') {
        return <DefaultError locale={locale} />;
    }

    // Extract course status data
    const courseStatusData = courseStatusViewModel.data;
    const certificateData = certificateDataViewModel.data;

    return (
        <>
        
            {modalState === 'completion' && courseStatusData && certificateData && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
                    <CourseCompletionModal
                        courseImage={courseImage}
                        courseTitle={courseTitle}
                        completionDate={courseStatusData.courseStatus.status === 'completed' ? courseStatusData.courseStatus.completionDate : new Date().toISOString()}
                        onClickDownloadCertificate={handleDownloadCertificate}
                        onClickRateCourse={handleRateCourse}
                        onClose={handleCloseCompletionModal}
                        locale={locale}
                    />
                    {certificateError && <DefaultError locale={locale} title={certificateError}  />}
                </div>
            )}
            {(modalState === 'review-form' || modalState === 'review-thank-you') && (
                <ReviewDialog
                    onClose={handleCloseReviewModal}
                    modalType="course"
                    onSubmit={handleSubmitReview}
                    onSkip={handleSkipReview}
                    locale={locale}
                    isLoading={createReviewMutation.isPending}
                    isError={createReviewMutation.isError}
                    errorMessage={errorMessage}
                    submitted={modalState === 'review-thank-you'}
                    isOpen={modalState === 'review-form' || modalState === 'review-thank-you'}
                    onOpenChange={(open) => {
                        if (!open) {
                            setModalState('none');
                        }
                    }}
                />
            )}
        </>
    );
}

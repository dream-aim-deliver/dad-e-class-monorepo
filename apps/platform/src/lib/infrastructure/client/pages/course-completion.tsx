'use client';

// Auto-generated by page-scaffold command
// TSK: TSK-3
// Features: createCourseReview, getCourseCertificateData, getCourseStatus
// Uses existing presenters: useGetCourseStatusPresenter, useGetCourseCertificateDataPresenter, useCreateCourseReviewPresenter

import { viewModels } from '@maany_shr/e-class-models';
import { trpc } from '../trpc/cms-client';
import { useGetCourseStatusPresenter } from '../hooks/use-get-course-status-presenter';
import { useGetCourseCertificateDataPresenter } from '../hooks/use-get-course-certificate-data-presenter';
import { useCreateCourseReviewPresenter } from '../hooks/use-create-course-review-presenter';
import { useState, useEffect } from 'react';
import {
    DefaultLoading,
    DefaultError,
    DefaultNotFound,
    CourseCompletionModal,
    ReviewModal,
    Button,
} from '@maany_shr/e-class-ui-kit';
import { useLocale, useTranslations } from 'next-intl';
import { TLocale } from '@maany_shr/e-class-translations';
import { useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';

interface CourseCompletionProps {
    slug: string;
    courseImage: string;
    courseTitle: string;
}

export default function CourseCompletion({ slug, courseImage, courseTitle }: CourseCompletionProps) {
    const locale = useLocale() as TLocale;
    const router = useRouter();
    const sessionDTO = useSession();
    const session = sessionDTO.data;
    const isLoggedIn = !!session;

    // State for course status
    const [courseStatusResponse] = trpc.getCourseStatus.useSuspenseQuery({
        courseSlug: slug,
    });
    const [courseStatusViewModel, setCourseStatusViewModel] = useState<
        viewModels.TGetCourseStatusViewModel | undefined
    >(undefined);
    const { presenter: courseStatusPresenter } = useGetCourseStatusPresenter(
        setCourseStatusViewModel,
    );

    // @ts-ignore
    courseStatusPresenter.present({ mode: 'default', data: courseStatusResponse }, courseStatusViewModel);

    // State for certificate data
    const [certificateDataResponse] =
        trpc.getCourseCertificateData.useSuspenseQuery({
            courseSlug: slug,
        });
    const [certificateDataViewModel, setCertificateDataViewModel] = useState<
        viewModels.TGetCourseCertificateDataViewModel | undefined
    >(undefined);
    const { presenter: certificateDataPresenter } =
        useGetCourseCertificateDataPresenter(setCertificateDataViewModel);

    // @ts-ignore
    certificateDataPresenter.present({ mode: 'default', data: certificateDataResponse }, certificateDataViewModel);    // State for course review
    const [courseReviewViewModel, setCourseReviewViewModel] = useState<
        viewModels.TCreateCourseReviewViewModel | undefined
    >(undefined);
    const { presenter: courseReviewPresenter } = useCreateCourseReviewPresenter(
        setCourseReviewViewModel,
    );

    // Course completion modal state
    const [showCompletionModal, setShowCompletionModal] = useState(false);
    const [showReviewModal, setShowReviewModal] = useState(false);

    // TRPC mutation for creating review
    const createReviewMutation = trpc.createCourseReview.useMutation();

    // Check if course is completed and show modal
    useEffect(() => {
        if (courseStatusViewModel?.mode === 'default') {
            const isCompleted =
                courseStatusViewModel.data?.courseStatus.status === 'completed';
            if (isCompleted) {
                setShowCompletionModal(true);
            }
        }
    }, [courseStatusViewModel]);

    // Authentication check based on discovered patterns
    useEffect(() => {
        if (!isLoggedIn) {
            router.push('/login');
        }
    }, [isLoggedIn, router]);

    // Handle download certificate
    const handleDownloadCertificate = () => {
        if (certificateDataViewModel?.mode === 'default') {
            const data = certificateDataViewModel.data;
            // Assume data has downloadUrl or similar
            console.log('Download certificate', data);
        } else {
            console.log('Certificate data not available');
        }
    };

    // Handle rate course
    const handleRateCourse = () => {
        setShowCompletionModal(false);
        setShowReviewModal(true);
    };

    // Handle modal close
    const handleCloseCompletionModal = () => {
        setShowCompletionModal(false);
    };

    const handleCloseReviewModal = () => {
        setShowReviewModal(false);
    };

    const handleSubmitReview = (rating: number, review: string) => {
        createReviewMutation.mutate({
            courseSlug: slug,
            rating,
            review,
        });
    };

    useEffect(() => {
        if (createReviewMutation.data) {
            // @ts-ignore
            courseReviewPresenter.present(createReviewMutation.data, courseReviewViewModel);
        }
    }, [createReviewMutation.data]);

    const handleSkipReview = () => {
        setShowReviewModal(false);
    };

    // Loading state using discovered patterns
    if (!courseStatusViewModel || !certificateDataViewModel) {
        return <DefaultLoading locale={locale} variant="minimal" />;
    }

    if (
        courseStatusViewModel.mode === 'not-found'
    ) {
        return <DefaultNotFound locale={locale} />;
    }

    // Error handling - kaboom
    if (courseStatusViewModel.mode === 'kaboom') {
        return <DefaultError locale={locale} />;
    }

    // Extract course status data
    const courseStatusData = courseStatusViewModel.data;
    const certificateData = certificateDataViewModel.data;

    return (
        <>
            {showCompletionModal && courseStatusData && certificateData && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
                    <CourseCompletionModal
                        courseImage={courseImage}
                        courseTitle={courseTitle}
                        completionDate={courseStatusData.courseStatus.status === 'completed' ? courseStatusData.courseStatus.completionDate : new Date().toISOString()}
                        onClickDownloadCertificate={handleDownloadCertificate}
                        onClickRateCourse={handleRateCourse}
                        onClose={handleCloseCompletionModal}
                        locale={locale}
                    />
                </div>
            )}
            {showReviewModal && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
                    <ReviewModal
                        onClose={handleCloseReviewModal}
                        modalType="course"
                        onSubmit={handleSubmitReview}
                        onSkip={handleSkipReview}
                        locale={locale}
                        isLoading={createReviewMutation.isPending}
                        isError={createReviewMutation.isError}
                        submitted={courseReviewViewModel?.mode === 'default'}
                    />
                </div>
            )}
        </>
    );
}

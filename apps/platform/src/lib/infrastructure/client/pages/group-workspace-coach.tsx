'use client';

// Auto-generated by page-scaffold command v2
// Notion: https://www.notion.so/Group-Workspace-Coach-workspace-2245a7432d01807c8606d25a58943c2e
// Usecases: saveGroupNotes, getGroupNotes, listGroupAssignments, listGroupMembers, getGroupNextCoachingSession
// Features: Group notes management, assignments tracking, member management, coaching session scheduling
// User Types: Coach
// Figma: https://www.figma.com/design/8KEwRuOoD5IgxTtFAtLlyS/Just_Do_Ad-1.2?node-id=6913-292532

import { useState } from 'react';
import { TLocale } from '@maany_shr/e-class-translations';
import { trpc } from '../trpc/cms-client';
import { DefaultLoading, DefaultError, DefaultNotFound } from '@maany_shr/e-class-ui-kit';
import { useLocale, useTranslations } from 'next-intl';
import { useSession } from 'next-auth/react';

interface GroupWorkspaceCoachProps {
  locale: TLocale;
  courseSlug: string;
  groupId: number;
}

export default function GroupWorkspaceCoach({
  locale,
  courseSlug,
  groupId,
}: GroupWorkspaceCoachProps) {
  const currentLocale = useLocale() as TLocale;
  const t = useTranslations('pages.groupWorkspaceCoach');

  // Authentication using Pattern B (Coach role only)
  const sessionDTO = useSession();
  const session = sessionDTO.data;
  const isCoach = session?.user?.roles?.includes('coach');

  if (!isCoach) {
    return (
      <DefaultError
        locale={currentLocale}
        title={t('error.accessDenied.title')}
        description={t('error.accessDenied.description')}
      />
    );
  }

  // TRPC queries for page data
  // TODO: Replace with actual usecases from: saveGroupNotes, getGroupNotes, listGroupAssignments, listGroupMembers, getGroupNextCoachingSession

  // Example for getGroupNotes:
  // const [groupNotesResponse] = trpc.getGroupNotes.useSuspenseQuery({
  //   groupId: groupId,
  // });

  // Example for listGroupAssignments:
  // const [assignmentsResponse] = trpc.listGroupAssignments.useSuspenseQuery({
  //   groupId: groupId,
  // });

  // Example for listGroupMembers:
  // const [membersResponse] = trpc.listGroupMembers.useSuspenseQuery({
  //   groupId: groupId,
  // });

  // Example for getGroupNextCoachingSession:
  // const [nextSessionResponse] = trpc.getGroupNextCoachingSession.useSuspenseQuery({
  //   groupId: groupId,
  // });

  // TODO: Add presenter hooks for ViewModels
  // const { presenter: notesPresenter } = useGroupNotesPresenter(setGroupNotesViewModel);
  // const { presenter: assignmentsPresenter } = useGroupAssignmentsPresenter(setAssignmentsViewModel);
  // const { presenter: membersPresenter } = useGroupMembersPresenter(setMembersViewModel);
  // const { presenter: nextSessionPresenter } = useNextSessionPresenter(setNextSessionViewModel);

  // TODO: Present the data
  // notesPresenter.present(groupNotesResponse, groupNotesViewModel);
  // assignmentsPresenter.present(assignmentsResponse, assignmentsViewModel);
  // membersPresenter.present(membersResponse, membersViewModel);
  // nextSessionPresenter.present(nextSessionResponse, nextSessionViewModel);

  // Loading state - TODO: Implement proper loading state once ViewModels are added
  const isLoading = false; // Replace with: !groupNotesViewModel || !assignmentsViewModel || !membersViewModel || !nextSessionViewModel

  if (isLoading) {
    return <DefaultLoading locale={currentLocale} variant="minimal" />;
  }

  // Error handling - TODO: Implement error handling based on ViewModel modes
  // Example:
  // if (groupNotesViewModel?.mode === 'kaboom') {
  //   const errorData = groupNotesViewModel.data;
  //   console.error(errorData);
  //   return (
  //     <DefaultError
  //       locale={currentLocale}
  //       title={t('error.title')}
  //       description={t('error.description')}
  //     />
  //   );
  // }

  // if (groupNotesViewModel?.mode === 'not-found') {
  //   const errorData = groupNotesViewModel.data;
  //   console.error(errorData);
  //   return (
  //     <DefaultNotFound
  //       locale={currentLocale}
  //       title={t('error.notFound.title')}
  //       description={t('error.notFound.description')}
  //     />
  //   );
  // }

  // Success state - TODO: Extract data from ViewModels
  // const notesData = groupNotesViewModel.data;
  // const assignmentsData = assignmentsViewModel.data;
  // const membersData = membersViewModel.data;
  // const nextSessionData = nextSessionViewModel.data;

  return (
    <div className="flex flex-col space-y-5 px-30">
      {/* Page header */}
      <div>
        <h1>{t('title')}</h1>
        <p>{t('description')}</p>
      </div>

      {/* TODO: Implement sections based on Notion features */}

      {/* Section: Group Introduction */}
      <section>
        <h2>{t('introduction.title')}</h2>
        {/* TODO: Implement group introduction content */}
      </section>

      {/* Section: Group Notes (saveGroupNotes, getGroupNotes) */}
      <section>
        <h2>{t('notes.title')}</h2>
        {/* TODO: Implement notes editor with save functionality */}
        {/* TODO: Use saveGroupNotes usecase for saving */}
        {/* TODO: Display notes from getGroupNotes usecase */}
        {/* Example save button: */}
        {/* <button onClick={handleSaveNotes}>{t('notes.saveButton')}</button> */}
      </section>

      {/* Section: Group Assignments (listGroupAssignments) */}
      <section>
        <h2>{t('assignments.title')}</h2>
        {/* TODO: Implement assignments list from listGroupAssignments usecase */}
      </section>

      {/* Section: Next Coaching Session (getGroupNextCoachingSession) */}
      <section>
        <h2>{t('nextCoachingSession.title')}</h2>
        {/* TODO: Implement next coaching session display */}
        {/* Show "noSession" message if no upcoming session */}
      </section>

      {/* Section: Group Members (listGroupMembers) */}
      <section>
        <h2>{t('members.title')}</h2>
        {/* TODO: Implement members list from listGroupMembers usecase */}
      </section>
    </div>
  );
}

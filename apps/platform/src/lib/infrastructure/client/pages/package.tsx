'use client';

// Auto-generated by page-scaffold command v2
// Notion: https://www.notion.so/Package-sale-page-Offers-44cd9de337d442cc8acd4fe25fddd386
// Usecases: getPackageWithCourses, listPackageRelatedPackages
// Features: Display package details with courses, Show related packages, Login prompt for unregistered users
// API Endpoints: GET /{api_version}/{platform_id}/package/{package_id}, GET /{api_version}/{platform_id}/packages?topics={list_of_topics}
// User Types: Visitor
// Figma: https://www.figma.com/design/8KEwRuOoD5IgxTtFAtLlyS/Just_Do_Ad-1.2?node-id=6246-199514

import { trpc } from '../trpc/cms-client';
import { useState } from 'react';
import { DefaultLoading, DefaultError, DefaultNotFound } from '@maany_shr/e-class-ui-kit';
import { useLocale, useTranslations } from 'next-intl';
import { TLocale } from '@maany_shr/e-class-translations';
import { useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';

interface PackageProps {
  locale: TLocale;
  packageId: number;
}

export default function Package({ locale, packageId }: PackageProps) {
  const currentLocale = useLocale() as TLocale;
  const router = useRouter();
  const t = useTranslations('pages.package');
  const sessionDTO = useSession();

  // TRPC query for package data with courses
  // TODO: Implement actual TRPC call using getPackageWithCourses usecase
  // const [packageResponse] = trpc.getPackageWithCourses.useSuspenseQuery({
  //   packageId: packageId,
  // });

  // TRPC query for related packages
  // TODO: Implement actual TRPC call using listPackageRelatedPackages usecase
  // const [relatedPackagesResponse] = trpc.listPackageRelatedPackages.useSuspenseQuery({
  //   packageId: packageId,
  // });

  // TODO: Create presenter hook for PackageViewModel
  // const [packageViewModel, setPackageViewModel] = useState<
  //   viewModels.TPackageViewModel | undefined
  // >(undefined);
  // const { presenter } = usePackagePresenter(setPackageViewModel);
  // @ts-ignore
  // presenter.present(packageResponse, packageViewModel);

  // Loading state - TODO: Implement proper loading check based on view model
  const isLoading = false; // Replace with: !packageViewModel
  if (isLoading) {
    return <DefaultLoading locale={currentLocale} variant="minimal" />;
  }

  // Error handling - TODO: Implement error mode checks from view model
  // Example error modes: 'kaboom', 'not-found'
  const hasError = false; // Replace with: packageViewModel.mode === 'kaboom'
  if (hasError) {
    return (
      <DefaultError
        locale={currentLocale}
        title={t('error.kaboom.title')}
        description={t('error.kaboom.description')}
      />
    );
  }

  const isNotFound = false; // Replace with: packageViewModel.mode === 'not-found'
  if (isNotFound) {
    return (
      <DefaultNotFound
        locale={currentLocale}
        title={t('error.notFound.title')}
        description={t('error.notFound.description')}
      />
    );
  }

  // Success state - extract data from view model
  // TODO: const packageData = packageViewModel.data;

  // Session check for purchase action (non-blocking)
  const session = sessionDTO.data;
  const isLoggedIn = !!session;

  return (
    <div className="flex flex-col space-y-5 px-30">
      {/* Page header */}
      <div>
        <h1>{t('title')}</h1>
        <p>{t('description')}</p>
      </div>

    </div>
  );
}

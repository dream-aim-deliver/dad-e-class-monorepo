'use client';

// Auto-generated by page-scaffold command
// TSK: TSK-1
// Features: listTopics, getProfessionalProfile, saveProfessionalProfile
// Route: /workspace/profile

import { viewModels } from '@maany_shr/e-class-models';
import { trpc } from '../trpc/cms-client';
import { useState } from 'react';
import { DefaultLoading, DefaultError, DefaultNotFound } from '@maany_shr/e-class-ui-kit';
import { useLocale, useTranslations } from 'next-intl';
import { TLocale } from '@maany_shr/e-class-translations';
import { useRouter } from 'next/navigation';
import { useGetProfessionalProfilePresenter } from '../hooks/use-get-professional-profile-presenter';

interface ProfileProps {
	locale: string;
}

export default function Profile({ locale: localeStr }: ProfileProps) {
	const locale = useLocale() as TLocale;
	const router = useRouter();
	const t = useTranslations('pages.profile');

	// Fetch professional profile data
	const [professionalProfileResponse] = trpc.getProfessionalProfile.useSuspenseQuery({});

	// Fetch topics for the expertise selection
	// Update this line to use the correct property for listTopics
	const [topicsResponse] = trpc.listTopics.useSuspenseQuery({});

	const [professionalProfileViewModel, setProfessionalProfileViewModel] = useState<
		viewModels.TGetProfessionalProfileViewModel | undefined
	>(undefined);

	const { presenter } = useGetProfessionalProfilePresenter(setProfessionalProfileViewModel);

    // @ts-ignore
	presenter.present(professionalProfileResponse, professionalProfileViewModel);

	// Loading state
	if (!professionalProfileViewModel) {
		return <DefaultLoading locale={locale} variant="minimal" />;
	}

	// Error handling - not found
	if (professionalProfileViewModel.mode === 'not-found') {
		return <DefaultNotFound locale={locale} />;
	}

	// Error handling - kaboom
	if (professionalProfileViewModel.mode === 'kaboom') {
		return <DefaultError locale={locale} />;
	}

	// Success state - extract data
	const profileData = professionalProfileViewModel.data;

	// TODO: Implement save functionality using saveProfessionalProfile mutation
	// const saveMutation = trpc.user.saveProfessionalProfile.useMutation();

	// const handleSave = async (data: any) => {
	//   await saveMutation.mutateAsync(data);
	// };

	return (
		<div className="flex flex-col space-y-5 px-30">
			{/* TODO: Add your profile page content */}

			{/* Professional Profile Section */}
			<div>
				<h1 className="text-2xl font-bold">{t('yourProfile')}</h1>
				{/* TODO: Display and edit professional profile data */}
				{/* Available data: profileData */}
			</div>

			{/* Topics/Expertise Selection */}
			<div>
				{/* TODO: Display topics from topicsResponse */}
				{/* Implement topic selection UI */}
			</div>

			{/* Save Button */}
			<div>
				{/* TODO: Implement save button with handleSave function */}
			</div>
		</div>
	);
}

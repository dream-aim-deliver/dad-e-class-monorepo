'use client';

// Auto-generated by page-scaffold command
// TSK: TSK-1
// Features: listTopics, getProfessionalProfile, saveProfessionalProfile
// Route: /workspace/profile

import { viewModels, fileMetadata } from '@maany_shr/e-class-models';
import { USERNAME_REGEX } from '@dream-aim-deliver/e-class-cms-rest';
import { trpc } from '../trpc/cms-client';
import { useState, useEffect } from 'react';
import {
	DefaultLoading,
	DefaultError,
	ProfileTabs,
	Breadcrumbs
} from '@maany_shr/e-class-ui-kit';
import { useLocale, useTranslations } from 'next-intl';
import { TLocale } from '@maany_shr/e-class-translations';
import { useRouter } from 'next/navigation';
import { useGetProfessionalProfilePresenter } from '../hooks/use-get-professional-profile-presenter';
import { useGetPersonalProfilePresenter } from '../hooks/use-get-personal-profile-presenter';
import { useListTopicsPresenter } from '../hooks/use-topics-presenter';
import { useListLanguagesPresenter } from '../hooks/use-list-languages-presenter';
import { useProfilePictureUpload } from './workspace/edit/hooks/use-profile-picture-upload';
import { useCurriculumVitaeUpload } from './workspace/edit/hooks/use-curriculum-vitae-upload';
import Banner from 'packages/ui-kit/lib/components/banner';

interface ProfileProps {
	locale: string;
	userEmail: string;
	username: string;
}

export default function Profile({ locale: localeStr, userEmail, username }: ProfileProps) {
	const locale = useLocale() as TLocale;
	const router = useRouter();
	const t = useTranslations('pages.profile');
	const breadcrumbsTranslations = useTranslations('components.breadcrumbs');
	const utils = trpc.useUtils();

	// Upload progress state - separate for each upload type
	const [profilePictureUploadProgress, setProfilePictureUploadProgress] = useState<number>(0);
	const [curriculumVitaeUploadProgress, setCurriculumVitaeUploadProgress] = useState<number>(0);


	// State for messages
	const [errorMessage, setErrorMessage] = useState<string | null>(null);
	const [successMessage, setSuccessMessage] = useState<string | null>(null);

	// Fetch profile data using tRPC queries
	const [professionalProfileResponse] = trpc.getProfessionalProfile.useSuspenseQuery({});
	const [personalProfileResponse] = trpc.getPersonalProfile.useSuspenseQuery({});
	const [topicsResponse] = trpc.listTopics.useSuspenseQuery({});
	const [languagesResponse] = trpc.listLanguages.useSuspenseQuery({});

	// View model state management
	const [professionalProfileViewModel, setProfessionalProfileViewModel] = useState<
		viewModels.TGetProfessionalProfileViewModel | undefined
	>(undefined);
	const [personalProfileViewModel, setPersonalProfileViewModel] = useState<
		viewModels.TGetPersonalProfileViewModel | undefined
	>(undefined);
	const [topicsViewModel, setTopicsViewModel] = useState<
		viewModels.TTopicListViewModel | undefined
	>(undefined);
	const [languagesViewModel, setLanguagesViewModel] = useState<
		viewModels.TLanguageListViewModel | undefined
	>(undefined);

	// Initialize presenters
	const { presenter: professionalPresenter } = useGetProfessionalProfilePresenter(
		setProfessionalProfileViewModel
	);
	const { presenter: personalPresenter } = useGetPersonalProfilePresenter(
		setPersonalProfileViewModel
	);
	const { presenter: topicsPresenter } = useListTopicsPresenter(
		setTopicsViewModel
	);
	const { presenter: languagesPresenter } = useListLanguagesPresenter(
		setLanguagesViewModel
	);



	// Present data to view models
	useEffect(() => {
		// @ts-ignore - Presenter type compatibility issue
		professionalPresenter.present(professionalProfileResponse, professionalProfileViewModel);
		// @ts-ignore - Presenter type compatibility issue
		personalPresenter.present(personalProfileResponse, personalProfileViewModel);
		// @ts-ignore - Presenter type compatibility issue
		topicsPresenter.present(topicsResponse, topicsViewModel);
		// @ts-ignore - Presenter type compatibility issue
		languagesPresenter.present(languagesResponse, languagesViewModel);
	}, [professionalProfileResponse, personalProfileResponse, topicsResponse, languagesResponse, professionalPresenter, personalPresenter, topicsPresenter, languagesPresenter, professionalProfileViewModel, personalProfileViewModel, topicsViewModel, languagesViewModel]);

	// Extract profile data from view models (with defaults for loading state)
	const personalProfile = personalProfileViewModel?.mode === 'default' ? personalProfileViewModel.data.profile : null;
	const professionalProfile = professionalProfileViewModel?.mode === 'default' ? professionalProfileViewModel.data.profile : null;

	// Transform avatarImage to TFileMetadataImage if it exists
	const initialProfilePicture: fileMetadata.TFileMetadataImage | null = personalProfile?.avatarImage
		? {
			id: personalProfile.avatarImage.id,
			name: personalProfile.avatarImage.name,
			url: personalProfile.avatarImage.downloadUrl,
			thumbnailUrl: personalProfile.avatarImage.downloadUrl,
			size: personalProfile.avatarImage.size,
			category: 'image' as const,
			status: 'available' as const,
		}
		: null;

	// Transform curriculumVitae to TFileMetadata (document type) if it exists
	const initialCurriculumVitae: fileMetadata.TFileMetadata | null = professionalProfile?.curriculumVitae
		? {
			id: professionalProfile.curriculumVitae.id,
			name: professionalProfile.curriculumVitae.name,
			url: professionalProfile.curriculumVitae.downloadUrl,
			size: professionalProfile.curriculumVitae.size,
			category: 'document' as const,
			status: 'available' as const,
		}
		: null;

	// Save mutations with error handling (must be called unconditionally)
	const savePersonalMutation = trpc.savePersonalProfile.useMutation({
		onMutate: () => {
			setErrorMessage(null);
			setSuccessMessage(null);
		},
		onSuccess: (data) => {
			setSuccessMessage(t('personalProfileSaved'));
			setErrorMessage(null);
			// Update the query cache with the fresh data from the mutation response (no extra fetch needed)
			utils.getPersonalProfile.setData({}, data);
		},
		onError: (error) => {
			setErrorMessage(error.message || t('failedToSavePersonal'));
			setSuccessMessage(null);
		}
	});

	const saveProfessionalMutation = trpc.saveProfessionalProfile.useMutation({
		onMutate: () => {
			setErrorMessage(null);
			setSuccessMessage(null);
		},
		onSuccess: (data) => {
			setSuccessMessage(t('professionalProfileSaved'));
			setErrorMessage(null);
			// Update the query cache with the fresh data from the mutation response (no extra fetch needed)
			utils.getProfessionalProfile.setData({}, data);
		},
		onError: (error) => {
			setErrorMessage(error.message || t('failedToSaveProfessional'));
			setSuccessMessage(null);
		}
	});

	// Upload hooks (must be called unconditionally before any returns)
	const profilePictureUpload = useProfilePictureUpload({
		initialImage: initialProfilePicture,
		onProgressUpdate: setProfilePictureUploadProgress,
	});

	const curriculumVitaeUpload = useCurriculumVitaeUpload({
		initialDocument: initialCurriculumVitae,
		onProgressUpdate: setCurriculumVitaeUploadProgress,
	});

	// Loading state - wait for all view models to be ready
	if (!professionalProfileViewModel || !personalProfileViewModel || !topicsViewModel || !languagesViewModel) {
		return <DefaultLoading locale={locale} variant="minimal" />;
	}

	// Error handling - only kaboom errors should prevent rendering
	// Note: 'not-found' is acceptable for profiles since save mutations support upsert
	// However, topics and languages must be available
	if (professionalProfileViewModel.mode === 'kaboom' || personalProfileViewModel.mode === 'kaboom' || topicsViewModel.mode === 'kaboom' || languagesViewModel.mode === 'kaboom') {
		return <DefaultError locale={locale} />;
	}

	// Topics and languages are required for the form to work
	if (topicsViewModel.mode !== 'default' || languagesViewModel.mode !== 'default') {
		return <DefaultError locale={locale} />;
	}

	const allTopics = topicsViewModel.data.topics;
	const allLanguages = languagesViewModel.data.languages;

	// Ensure we have languages - this should never happen if the check above passes
	if (!allLanguages || allLanguages.length === 0) {
		console.error('[Profile] Languages data is missing or empty despite mode being default', {
			languagesViewModel,
			allLanguages
		});
		return <DefaultError locale={locale} title={"Language data missing"} description={'[Profile] Languages data is missing or empty despite mode being default'} />;
	}

	// Create default profiles when they don't exist (for upsert functionality)
	const defaultPersonalProfile: viewModels.TGetPersonalProfileSuccess['profile'] = {
		id: 0,
		name: '',
		surname: '',
		username: username,
		email: userEmail,
		phone: null,
		dateOfBirth: null,
		companyDetails: {
			isRepresentingCompany: false as const,
		},
		avatarImage: null,
		languages: [],
		interfaceLanguage: allLanguages[0],
		receiveNewsletter: false,
	};

	const defaultProfessionalProfile: viewModels.TGetProfessionalProfileSuccess['profile'] = {
		id: 0,
		bio: '',
		linkedinUrl: null,
		curriculumVitae: null,
		skills: [],
		private: true,
	};

	// Use actual profiles if they exist, otherwise use defaults
	const personalProfileToUse = personalProfile || defaultPersonalProfile;
	const professionalProfileToUse = professionalProfile || defaultProfessionalProfile;

	const handleSavePersonalProfile = async (profile: typeof personalProfile) => {
		if (!profile) return;

		// Client-side validation
		const errors: string[] = [];

		if (!profile.name || profile.name.trim() === '') {
			errors.push(t('nameRequired') || 'Name is required');
		}

		if (!profile.surname || profile.surname.trim() === '') {
			errors.push(t('surnameRequired') || 'Surname is required');
		}

		if (!profile.username || profile.username.trim() === '') {
			errors.push(t('usernameRequired') || 'Username is required');
		} else if (!USERNAME_REGEX.test(profile.username)) {
			errors.push(t('usernameInvalid') || 'Username can only contain letters, numbers, underscores, and hyphens');
		}

		if (!profile.email || profile.email.trim() === '') {
			errors.push(t('emailRequired') || 'Email is required');
		}

		if (errors.length > 0) {
			setErrorMessage(errors.join(', '));
			setSuccessMessage(null);
			return;
		}

		const savePayload = {
			...profile,
			languageIds: profile.languages.map(lang => {
				return typeof lang.id === 'number' ? lang.id : parseInt(lang.id as string);
			}),
			interfaceLanguageId: typeof profile.interfaceLanguage.id === 'number'
				? profile.interfaceLanguage.id
				: parseInt(profile.interfaceLanguage.id as string),
			avatarImageId: profile.avatarImage?.id
				? (typeof profile.avatarImage.id === 'number'
					? profile.avatarImage.id
					: parseInt(profile.avatarImage.id as string))
				: undefined,
			languages: undefined,
			interfaceLanguage: undefined,
			avatarImage: undefined
		};

		try {
			await savePersonalMutation.mutateAsync(savePayload);
		} catch (error) {
			// Error is already handled by the mutation's onError callback
			console.error('Failed to save personal profile:', error);
		}
	};

	const handleSaveProfessionalProfile = async (profile: typeof professionalProfile) => {
		if (!profile) return;

		// Client-side validation
		const errors: string[] = [];

		if (!profile.bio || profile.bio.trim() === '') {
			errors.push(t('bioRequired') || 'Bio is required');
		} else if (profile.bio.length > 280) {
			errors.push(t('bioTooLong') || 'Bio must be 280 characters or less');
		}

		if (errors.length > 0) {
			setErrorMessage(errors.join(', '));
			setSuccessMessage(null);
			return;
		}

		const savePayload = {
			...profile,
			skillIds: profile.skills.map(skill => {
				return typeof skill.id === 'number' ? skill.id : parseInt(skill.id as string);
			}),
			curriculumVitaeId: profile.curriculumVitae?.id
				? (typeof profile.curriculumVitae.id === 'number'
					? profile.curriculumVitae.id
					: parseInt(profile.curriculumVitae.id as string))
				: undefined,
			skills: undefined,
			curriculumVitae: undefined
		};

		try {
			await saveProfessionalMutation.mutateAsync(savePayload);
		} catch (error) {
			// Error is already handled by the mutation's onError callback
			console.error('Failed to save professional profile:', error);
		}
	};


	return (
		<div className="min-h-screen text-base-white flex flex-col gap-6">
			<div className="flex flex-col space-y-6 p-6">
				<Breadcrumbs
					items={[
						{
							label: breadcrumbsTranslations('home'),
							onClick: () => {
								router.push(`/${locale}`);
							},
						},
						{
							label: breadcrumbsTranslations('workspace'),
							onClick: () => {
								router.push(`/${locale}/workspace`);
							},
						},
						{
							label: breadcrumbsTranslations('yourProfile'),
							onClick: () => {
								// Current page, no action needed
							},
						},
					]}
				/>

				<div className="flex flex-col space-y-5 mx-auto max-w-[560px]">
					<h1 className="text-2xl font-bold">{t('yourProfile')}</h1>

					<ProfileTabs
						personalProfile={personalProfileToUse}
						professionalProfile={professionalProfileToUse}
						availableSkills={allTopics}
						availableLanguages={allLanguages}
						onSavePersonal={handleSavePersonalProfile}
						onSaveProfessional={handleSaveProfessionalProfile}
						onPersonalFileUpload={profilePictureUpload.handleFileChange}
						onProfessionalFileUpload={curriculumVitaeUpload.handleFileChange}
						locale={locale}
						profilePictureFile={profilePictureUpload.profilePicture}
						onProfilePictureUploadComplete={profilePictureUpload.handleUploadComplete}
						onProfilePictureDelete={profilePictureUpload.handleDelete}
						profilePictureUploadProgress={profilePictureUploadProgress}
						curriculumVitaeFile={curriculumVitaeUpload.curriculumVitae}
						onCurriculumVitaeUploadComplete={curriculumVitaeUpload.handleUploadComplete as (file: fileMetadata.TFileMetadata) => void}
						onCurriculumVitaeDelete={curriculumVitaeUpload.handleDelete}
						curriculumVitaeUploadProgress={curriculumVitaeUploadProgress}
						isSaving={savePersonalMutation.isPending || saveProfessionalMutation.isPending}
					/>


					{/* Display error message */}
					{errorMessage && (
						<Banner style="error" description={errorMessage} />
					)}

					{/* Display success message */}
					{successMessage && (
						<Banner style="success" description={successMessage} />
					)}

					{/* Display loading state */}
					{(savePersonalMutation.isPending || saveProfessionalMutation.isPending) && (
						<Banner style="success" description={t('saving')} />
					)}
				</div>
			</div>
		</div>
	);
}



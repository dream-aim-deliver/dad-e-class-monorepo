'use client';

// Auto-generated by page-scaffold command
// TSK: TSK-1
// Features: listTopics, getProfessionalProfile, saveProfessionalProfile
// Route: /workspace/profile

import { viewModels, fileMetadata } from '@maany_shr/e-class-models';
import { trpc } from '../trpc/cms-client';
import { useState, useEffect } from 'react';
import {
	DefaultLoading,
	DefaultError,
	DefaultNotFound,
	ProfileTabs
} from '@maany_shr/e-class-ui-kit';
import { useLocale, useTranslations } from 'next-intl';
import { TLocale } from '@maany_shr/e-class-translations';
import { useRouter } from 'next/navigation';
import { useGetProfessionalProfilePresenter } from '../hooks/use-get-professional-profile-presenter';
import { useGetPersonalProfilePresenter } from '../hooks/use-get-personal-profile-presenter';
import { useProfilePictureUpload } from './workspace/edit/hooks/use-profile-picture-upload';
import { useCurriculumVitaeUpload } from './workspace/edit/hooks/use-curriculum-vitae-upload';
import Banner from 'packages/ui-kit/lib/components/banner';

interface ProfileProps {
	locale: string;
}

export default function Profile({ locale: localeStr }: ProfileProps) {
	const locale = useLocale() as TLocale;
	const router = useRouter();
	const t = useTranslations('pages.profile');

	// Upload progress state
	const [uploadProgress, setUploadProgress] = useState<number>(0);
	const [errorMessage, setErrorMessage] = useState<string | null>(null);
	const [successMessage, setSuccessMessage] = useState<string | null>(null);

	// Fetch profile data using tRPC queries
	const [professionalProfileResponse] = trpc.getProfessionalProfile.useSuspenseQuery({});
	const [personalProfileResponse] = trpc.getPersonalProfile.useSuspenseQuery({});

	// View model state management
	const [professionalProfileViewModel, setProfessionalProfileViewModel] = useState<
		viewModels.TGetProfessionalProfileViewModel | undefined
	>(undefined);
	const [personalProfileViewModel, setPersonalProfileViewModel] = useState<
		viewModels.TGetPersonalProfileViewModel | undefined
	>(undefined);

	// Initialize presenters
	const { presenter: professionalPresenter } = useGetProfessionalProfilePresenter(
		setProfessionalProfileViewModel
	);
	const { presenter: personalPresenter } = useGetPersonalProfilePresenter(
		setPersonalProfileViewModel
	);



	// Present data to view models
	useEffect(() => {
		// @ts-ignore - Presenter type compatibility issue
		professionalPresenter.present(professionalProfileResponse, professionalProfileViewModel);
		// @ts-ignore - Presenter type compatibility issue
		personalPresenter.present(personalProfileResponse, personalProfileViewModel);
	}, [professionalProfileResponse, personalProfileResponse, professionalPresenter, personalPresenter]);

	// Loading state - wait for both view models to be ready
	if (!professionalProfileViewModel || !personalProfileViewModel) {
		return <DefaultLoading locale={locale} variant="minimal" />;
	}

	// Error handling - check both view models for errors
	if (professionalProfileViewModel.mode === 'not-found' || personalProfileViewModel.mode === 'not-found') {
		return <DefaultNotFound locale={locale} />;
	}

	if (professionalProfileViewModel.mode === 'kaboom' || personalProfileViewModel.mode === 'kaboom') {
		return <DefaultError locale={locale} />;
	}

	if (professionalProfileViewModel.mode !== 'default' || personalProfileViewModel.mode !== 'default') {
		return <DefaultError locale={locale} />;
	}

	// Extract profile data from view models
	const personalProfile = personalProfileViewModel.data.profile;
	const professionalProfile = professionalProfileViewModel.data.profile;

	// Transform avatarImage to TFileMetadataImage if it exists
	const initialProfilePicture: fileMetadata.TFileMetadataImage | null = personalProfile.avatarImage
		? {
			id: personalProfile.avatarImage.id,
			name: personalProfile.avatarImage.name,
			url: personalProfile.avatarImage.downloadUrl,
			thumbnailUrl: personalProfile.avatarImage.downloadUrl,
			size: personalProfile.avatarImage.size,
			category: 'image' as const,
			status: 'available' as const,
		}
		: null;

	// Transform curriculumVitae to TFileMetadata (document type) if it exists
	const initialCurriculumVitae: fileMetadata.TFileMetadata | null = professionalProfile.curriculumVitae
		? {
			id: professionalProfile.curriculumVitae.id,
			name: professionalProfile.curriculumVitae.name,
			url: professionalProfile.curriculumVitae.downloadUrl,
			size: professionalProfile.curriculumVitae.size,
			category: 'document' as const,
			status: 'available' as const,
		}
		: null;

	// Save mutations with error handling
	const savePersonalMutation = trpc.savePersonalProfile.useMutation({
		onSuccess: () => {
			setSuccessMessage('Personal profile saved successfully');
			setErrorMessage(null);
		},
		onError: (error) => {
			setErrorMessage(error.message || 'Failed to save personal profile');
			setSuccessMessage(null);
		}
	});

	const saveProfessionalMutation = trpc.saveProfessionalProfile.useMutation({
		onSuccess: () => {
			setSuccessMessage('Professional profile saved successfully');
			setErrorMessage(null);
		},
		onError: (error) => {
			setErrorMessage(error.message || 'Failed to save professional profile');
			setSuccessMessage(null);
		}
	});

	const handleSavePersonal = async (profile: typeof personalProfile) => {
		const savePayload = {
			...profile,
			languageIds: profile.languages.map(lang => {
				return typeof lang.id === 'number' ? lang.id : parseInt(lang.id as string);
			}),
			interfaceLanguageId: typeof profile.interfaceLanguage.id === 'number'
				? profile.interfaceLanguage.id
				: parseInt(profile.interfaceLanguage.id as string),
			avatarImageId: profile.avatarImage?.id,
			languages: undefined,
			interfaceLanguage: undefined,
			avatarImage: undefined
		};

		await savePersonalMutation.mutateAsync(savePayload as any);
	};

	const handleSaveProfessional = async (profile: typeof professionalProfile) => {
		const savePayload = {
			...profile,
			skillIds: profile.skills.map(skill => {
				return typeof skill.id === 'number' ? skill.id : parseInt(skill.id as string);
			}),
			curriculumVitaeId: profile.curriculumVitae?.id,
			skills: undefined,
			curriculumVitae: undefined
		};

		await saveProfessionalMutation.mutateAsync(savePayload as any);
	};
	const profilePictureUpload = useProfilePictureUpload({
		initialImage: initialProfilePicture,
		onProgressUpdate: setUploadProgress,
	});

	const curriculumVitaeUpload = useCurriculumVitaeUpload({
		initialDocument: initialCurriculumVitae,
		onProgressUpdate: setUploadProgress,
	});

	return (
		<div className="flex flex-col space-y-5 mx-auto max-w-[560px]">
			<h1 className="text-2xl font-bold mb-6">{t('yourProfile')}</h1>

			<ProfileTabs
				personalProfile={personalProfile}
				professionalProfile={professionalProfile}
				onSavePersonal={handleSavePersonal}
				onSaveProfessional={handleSaveProfessional}
				onPersonalFileUpload={profilePictureUpload.handleFileChange}
				onProfessionalFileUpload={curriculumVitaeUpload.handleFileChange}
				locale={locale}
				profilePictureFile={profilePictureUpload.profilePicture}
				onProfilePictureUploadComplete={profilePictureUpload.handleUploadComplete}
				curriculumVitaeFile={curriculumVitaeUpload.curriculumVitae}
				onCurriculumVitaeUploadComplete={curriculumVitaeUpload.handleUploadComplete as any}
				uploadProgress={uploadProgress}
			/>


			{/* Display error message */}
			{errorMessage && (
				<DefaultError locale={locale} description={errorMessage} />
			)}

			{/* Display success message */}
			{successMessage && (
				<Banner style="success" description={successMessage} />
			)}

			{/* Display loading state */}
			{(savePersonalMutation.isPending || saveProfessionalMutation.isPending) && (
				<Banner style="success" description="Saving..." />
			)}
		</div>
	);
}



'use client';

// Auto-generated by page-scaffold command
// Notion: https://www.notion.so/Ended-Group-Coaching-Sessions-group-course-tab-2245a7432d0180cab050ef2e0ebbb675
// Feature: listGroupCoachingSessions (FEAT-169)
// User Type: Coach
// Figma: https://www.figma.com/design/8KEwRuOoD5IgxTtFAtLlyS/Just_Do_Ad-1.2?node-id=6913-296778

import { useState, useEffect } from 'react';
import { useLocale, useTranslations } from 'next-intl';
import { useSession } from 'next-auth/react';
import { TLocale } from '@maany_shr/e-class-translations';
import { viewModels } from '@maany_shr/e-class-models';
import { DefaultLoading, DefaultError, DefaultNotFound } from '@maany_shr/e-class-ui-kit';
import { trpc } from '../trpc/cms-client';
import { useListGroupCoachingSessionsPresenter } from '../hooks/use-list-group-coaching-sessions-presenter';

interface EndedGroupCoachingSessionsProps {
    locale: TLocale;
    courseSlug: string;
    groupId: number;
}

export default function EndedGroupCoachingSessions({
    locale: localeProp,
    courseSlug,
    groupId,
}: EndedGroupCoachingSessionsProps) {
    const currentLocale = useLocale() as TLocale;
    const t = useTranslations('pages.endedGroupCoachingSessions');
    const { data: session, status } = useSession();

    // Fetch ended group coaching sessions using TRPC
    const [sessionsResponse] = trpc.listGroupCoachingSessions.useSuspenseQuery({
        groupId,
    });

    // View model state
    const [sessionsViewModel, setSessionsViewModel] = useState<
        viewModels.TListGroupCoachingSessionsViewModel | undefined
    >(undefined);

    // Initialize presenter
    const { presenter } = useListGroupCoachingSessionsPresenter(setSessionsViewModel);

    // Present data to view model
    useEffect(() => {
        // @ts-ignore - Presenter type compatibility issue
        presenter.present(sessionsResponse, sessionsViewModel);
    }, [sessionsResponse, presenter, sessionsViewModel]);

    // Loading state
    if (status === 'loading' || !sessionsViewModel) {
        return <DefaultLoading locale={currentLocale} variant="minimal" />;
    }

    // Authentication check - Coach only
    if (!session) {
        return (
            <DefaultError
                locale={currentLocale}
                title={t('error.accessDenied')}
                description={t('error.accessDenied')}
            />
        );
    }

    // Error handling using discovered project patterns
    if (sessionsViewModel.mode === 'kaboom') {
        const errorData = sessionsViewModel.data;
        console.error(errorData);

        return (
            <DefaultError
                locale={currentLocale}
                title={t('error.title')}
                description={t('error.description')}
            />
        );
    }

    if (sessionsViewModel.mode === 'not-found') {
        const errorData = sessionsViewModel.data;
        console.error(errorData);

        return (
            <DefaultNotFound
                locale={currentLocale}
                title={t('error.notFoundTitle')}
                description={t('error.notFoundDescription')}
            />
        );
    }

    // Success state - extract data
    const sessionsData = sessionsViewModel.data;

    return (
        <div className="flex flex-col space-y-5 px-30">
            <h1>{t('title')}</h1>
            <p>{t('description')}</p>

            {/* TODO: Implement ended sessions list */}
            {/* TODO: Add filtering/sorting options */}
            {/* TODO: Display session cards with:
                - Session date/time
                - Course name
                - Number of participants
                - Session recording link (if available)
                - Reviews/ratings
            */}

            {/* TODO: Add pagination or infinite scroll */}
        </div>
    );
}

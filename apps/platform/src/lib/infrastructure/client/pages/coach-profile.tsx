'use client';

// Auto-generated by page-scaffold command
// Notion: https://www.notion.so/Coach-profile-student-view-book-coaching-outside-courses-4417f760c1a24df8986566bb342a5270
// Features: listCoachReviews, createCourseReview, getCoachIntroduction, getCoachProfileAccess, listCoachCourses
// API Endpoints: GET /{api_version}/{platform_id}/coach?username={username}
// User Types: Student
// Figma: https://www.figma.com/design/8KEwRuOoD5IgxTtFAtLlyS/Just_Do_Ad-1.2?node-id=5731-169364&t=n19jujPl9CMQvyEQ-4

import { viewModels } from '@maany_shr/e-class-models';
import { trpc } from '../trpc/cms-client';
import { trpc as clientTrpc } from '../trpc/client';
import { useState } from 'react';
import { DefaultLoading, DefaultError, DefaultNotFound, BuyCoachingSessionBanner, CoachReviewCard, BookSessionWith, Breadcrumbs, Button, IconChevronLeft, Dropdown, IconFilter, CoachReviewFilterModal, CourseCardList, CourseCard, ReviewModal, ReviewDisplay } from '@maany_shr/e-class-ui-kit';
import type { CoachReviewFilterModel } from '@maany_shr/e-class-ui-kit';
import { useLocale, useTranslations } from 'next-intl';
import { TLocale } from '@maany_shr/e-class-translations';
import { useGetCoachIntroductionPresenter } from '../hooks/use-get-coach-introduction-presenter';
import { useListCoachReviewsPresenter } from '../hooks/use-list-coach-reviews-presenter';
import { useListCoachCoursesPresenter } from '../hooks/use-list-coach-courses-presenter';
import { useGetCoachProfileAccessPresenter } from '../hooks/use-get-coach-profile-access-presenter';

import { useSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';

interface CoachProfileProps {
	locale: TLocale;
	username: string;
}

export default function CoachProfile({ username }: CoachProfileProps) {
	const locale = useLocale() as TLocale;
	const coachProfileTranslations = useTranslations('pages.coachProfile');
	const breadcrumbsTranslations = useTranslations('components.breadcrumbs');
	const router = useRouter();

	const sessionDTO = useSession();
	const session = sessionDTO.data;
	const isLoggedIn = !!session;

	// Fetch coach profile access - determines if profile can be viewed
	// TODO: Switch to trpc when backend is ready
	// const [coachProfileAccessResponse] = trpc.getCoachProfileAccess.useSuspenseQuery({
	// 	coachUsername: username,
	// });
	const [coachProfileAccessResponse] = clientTrpc.getCoachProfileAccess.useSuspenseQuery({
		coachUsername: username,
	});

	// Fetch coach introduction data
	// TODO: Switch to trpc when backend is ready
	// const [coachIntroductionResponse] = trpc.getCoachIntroduction.useSuspenseQuery({
	// 	coachUsername: username,
	// });
	const [coachIntroductionResponse] = clientTrpc.getCoachIntroduction.useSuspenseQuery({
		coachUsername: username,
	});

	// Fetch coach reviews
	// TODO: Switch to trpc when backend is ready
	// const [coachReviewsResponse] = trpc.listCoachReviews.useSuspenseQuery({
	// 	coachUsername: username,
	// });
	const [coachReviewsResponse] = clientTrpc.listCoachReviews.useSuspenseQuery({
		coachUsername: username,
	});

	// TRPC mutation for creating review
	const createReviewMutation = trpc.createCourseReview.useMutation();
	const utils = clientTrpc.useUtils();

	// Fetch coach courses - conditional based on login status
	// If logged in: forStudent=true (shows enrolled/in-progress courses)
	// If NOT logged in: forStudent=false (shows all public courses)

	// TODO: Switch to trpc when backend is ready
	// const [coachCoursesResponse] = trpc.listCoachCourses.useSuspenseQuery({
	// 	forStudent: isLoggedIn,
	// });
	const [coachCoursesResponse] = clientTrpc.listCoachCourses.useSuspenseQuery({
		forStudent: isLoggedIn,
	});

	const [coachIntroductionViewModel, setCoachIntroductionViewModel] = useState<
		viewModels.TGetCoachIntroductionViewModel | undefined
	>(undefined);

	const [coachReviewsViewModel, setCoachReviewsViewModel] = useState<
		viewModels.TListCoachReviewsViewModel | undefined
	>(undefined);

	const [coachCoursesViewModel, setCoachCoursesViewModel] = useState<
		viewModels.TListCoachCoursesViewModel | undefined
	>(undefined);

	const [coachProfileAccessViewModel, setCoachProfileAccessViewModel] = useState<
		viewModels.TGetCoachProfileAccessViewModel | undefined
	>(undefined);



	// Sort and Filter states
	const [sortBy, setSortBy] = useState<string>('mostRecent');
	const [showFilterModal, setShowFilterModal] = useState(false);
	const [filters, setFilters] = useState<CoachReviewFilterModel>({
		maxRating: 5,
		minRating: 1,
		dateBefore: '',
		dateAfter: ''
	});

	// Review Modal states
	const [showReviewModal, setShowReviewModal] = useState(false);
	const [showReviewSnippet, setShowReviewSnippet] = useState(false);
	const [reviewingCourse, setReviewingCourse] = useState<any>(null);
	const [reviewSubmitted, setReviewSubmitted] = useState(false);
	const [reviewError, setReviewError] = useState(false);

	const { presenter: coachIntroductionPresenter } = useGetCoachIntroductionPresenter(
		setCoachIntroductionViewModel,
	);

	const { presenter: coachReviewsPresenter } = useListCoachReviewsPresenter(
		setCoachReviewsViewModel,
	);

	const { presenter: coachCoursesPresenter } = useListCoachCoursesPresenter(
		setCoachCoursesViewModel,
	);

	const { presenter: coachProfileAccessPresenter } = useGetCoachProfileAccessPresenter(
		setCoachProfileAccessViewModel,
	);

	// Present the data
	// @ts-ignore
	coachIntroductionPresenter.present(coachIntroductionResponse, coachIntroductionViewModel);
	// @ts-ignore
	coachReviewsPresenter.present(coachReviewsResponse, coachReviewsViewModel);
	// @ts-ignore
	coachCoursesPresenter.present(coachCoursesResponse, coachCoursesViewModel);
	// @ts-ignore
	coachProfileAccessPresenter.present(coachProfileAccessResponse, coachProfileAccessViewModel);

	// Loading state
	if (!coachIntroductionViewModel || !coachCoursesViewModel || !coachReviewsViewModel || !coachProfileAccessViewModel) {
		return <DefaultLoading locale={locale} variant="minimal" />;
	}

	// Error handling - not found
	if (coachIntroductionViewModel.mode === 'not-found') {
		return <DefaultNotFound locale={locale} />;
	}

	// Error handling - not found for courses
	if (coachCoursesViewModel.mode === 'not-found') {
		return <DefaultNotFound locale={locale} />;
	}

	// Error handling for reviews
	if (coachReviewsViewModel.mode === 'not-found') {
		return <DefaultNotFound locale={locale} />;
	}

	// Error handling - not found for profile access
	if (coachProfileAccessViewModel.mode === 'not-found') {
		return <DefaultNotFound locale={locale} />;
	}

	// Error handling - kaboom
	if (coachIntroductionViewModel.mode === 'kaboom') {
		return <DefaultError locale={locale} />;
	}

	// Error handling for courses
	// if (coachCoursesViewModel.mode === 'kaboom') {
	// 	return <DefaultError locale={locale} />;
	// }

	// Error handling for reviews
	// if (coachReviewsViewModel.mode === 'kaboom') {
	// 	return <DefaultError locale={locale} />;
	// }

	// Error handling for profile access
	if (coachProfileAccessViewModel.mode === 'kaboom') {
		return <DefaultError locale={locale} />;
	}

	// Access control check - if profile access is denied, show not found
	if (coachProfileAccessViewModel.mode === 'default' && !coachProfileAccessViewModel.data.access) {
		return <DefaultNotFound locale={locale} />;
	}

	// Success state - extract data
	const coachIntroduction = coachIntroductionViewModel.data.coach;
	// const coachCourses = coachCoursesViewModel.data.courses;
	// const coachReviews = coachReviewsViewModel.data.reviews;
	// const coachProfileAccess = coachProfileAccessViewModel.data;

	// TODO: Remove hardcoded courses and use API data when backend is ready
	const coachCourses = [
		{
			status: {
				status: "completed" as const,
				completionDate: "2025-09-01"
			},
			title: "Mastering Batting Techniques",
			currency: "INR",
			rating: 4.7,
			languages: [
				{
					name: "English",
					code: "en",
					id: "lang1",
					state: "created" as const,
					createdAt: new Date("2023-01-10"),
					updatedAt: new Date("2025-01-10")
				},
				{
					name: "Hindi",
					code: "hi",
					id: "lang2",
					state: "created" as const,
					createdAt: new Date("2023-02-05"),
					updatedAt: new Date("2025-02-05")
				}
			],
			id: 101,
			briefDescription: JSON.stringify([
				{
					type: 'paragraph',
					children: [
						{
							text: 'Intensive course focused on batting skills for competitive cricket.',
						},
					],
				},
			]),
			basePrice: 4999,
			ratingCount: 320,
			creator: {
				name: "Suresh",
				surname: "Kumar",
				username: "suresh_k",
				avatarImage: {
					name: "suresh_avatar.png",
					id: "img101",
					size: 1024,
					category: "image" as const,
					downloadUrl: "https://example.com/avatars/suresh_avatar.png"
				}
			},
			coachingSessionCount: 25,
			durationMinutes: 180,
			salesCount: 1450,
			// TODO: Add student reviews in listCoachCourses API response
			studentReview: {
				rating: 4.5,
				courseSlug: "mastering-batting-techniques",
				review: "Excellent course! The batting techniques taught here really improved my game. The coach's explanations were clear and the practice sessions were very helpful."
			}
		},
		{
			status: {
				status: "inProgress" as const,
				progress: 65
			},
			title: "Cricket Fitness and Conditioning",
			currency: "INR",
			rating: 4.0,
			languages: [
				{
					name: "English",
					code: "en",
					id: "lang4",
					state: "created" as const,
					createdAt: new Date("2023-03-01"),
					updatedAt: new Date("2025-03-01")
				},
				{
					name: "Telugu",
					code: "te",
					id: "lang5",
					state: "created" as const,
					createdAt: new Date("2023-03-15"),
					updatedAt: new Date("2025-03-15")
				}
			],
			id: 103,
			briefDescription: JSON.stringify([
				{
					type: 'paragraph',
					children: [
						{
							text: 'Enhance your physical fitness tailored for cricket.',
						},
					],
				},
			]),
			basePrice: 2999,
			ratingCount: 150,
			creator: {
				name: "Anita",
				surname: "Rao",
				username: "anita_rao",
				avatarImage: {
					name: "anita_avatar.jpg",
					id: "img102",
					size: 1100,
					category: "image" as const,
					downloadUrl: "https://example.com/avatars/anita_avatar.jpg"
				}
			},
			coachingSessionCount: 20,
			durationMinutes: 120,
			salesCount: 900
		},
		{
			status: {
				status: "completed" as const,
				completionDate: "2025-07-15"
			},
			title: "Wicket Keeping Skills",
			currency: "INR",
			rating: 4.8,
			languages: [
				{
					name: "English",
					code: "en",
					id: "lang7",
					state: "created" as const,
					createdAt: new Date("2023-05-20"),
					updatedAt: new Date("2025-05-20")
				},
				{
					name: "Marathi",
					code: "mr",
					id: "lang8",
					state: "created" as const,
					createdAt: new Date("2023-06-01"),
					updatedAt: new Date("2025-06-01")
				}
			],
			id: 105,
			briefDescription: JSON.stringify([
				{
					type: 'paragraph',
					children: [
						{
							text: 'Master the essential wicket keeping techniques and reflexes.',
						},
					],
				},
			]),
			basePrice: 4500,
			ratingCount: 260,
			creator: {
				name: "Rohit",
				surname: "Patil",
				username: "rohit_p",
				avatarImage: null
			},
			coachingSessionCount: 28,
			durationMinutes: 200,
			salesCount: 1300
		},
		{
			status: {
				status: "inProgress" as const,
				progress: 40
			},
			title: "Fielding and Catching Techniques",
			currency: "INR",
			rating: 4.1,
			languages: [
				{
					name: "English",
					code: "en",
					id: "lang10",
					state: "created" as const,
					createdAt: new Date("2023-08-05"),
					updatedAt: new Date("2025-08-05")
				}
			],
			id: 107,
			briefDescription: JSON.stringify([
				{
					type: 'paragraph',
					children: [
						{
							text: 'Improve your fielding, catching, and throwing skills.',
						},
					],
				},
			]),
			basePrice: 3200,
			ratingCount: 190,
			creator: {
				name: "Arjun",
				surname: "Singh",
				username: "arjun_s",
				avatarImage: null
			},
			coachingSessionCount: 22,
			durationMinutes: 160,
			salesCount: 1005
		},
		{
			description: JSON.stringify([
				{
					type: 'paragraph',
					children: [
						{
							text: 'Learn the art of fast bowling focusing on pace, line, and length.',
						},
					],
				},
			]),
			title: "Fast Bowling Basics",
			currency: "USD",
			rating: 4.5,
			languages: [
				{
					name: "English",
					code: "en",
					id: "lang3",
					state: "created" as const,
					createdAt: new Date("2022-08-15"),
					updatedAt: new Date("2025-08-15")
				}
			],
			id: 102,
			briefDescription: JSON.stringify([
				{
					type: 'paragraph',
					children: [
						{
							text: 'Bowling course designed for beginner to intermediate levels.',
						},
					],
				},
			]),
			basePrice: 350,
			ratingCount: 210,
			creator: {
				name: "John",
				surname: "Doe",
				username: "john_d",
				avatarImage: null
			},
			coachingSessionCount: 30,
			durationMinutes: 150,
			salesCount: 1200
		},
		{
			description: JSON.stringify([
				{
					type: 'paragraph',
					children: [
						{
							text: 'Course on the fundamentals of spin bowling including grips and deliveries.',
						},
					],
				},
			]),
			title: "Spin Bowling Fundamentals",
			currency: "USD",
			rating: 3.9,
			languages: [
				{
					name: "English",
					code: "en",
					id: "lang6",
					state: "created" as const,
					createdAt: new Date("2023-04-10"),
					updatedAt: new Date("2025-04-10")
				}
			],
			id: 104,
			briefDescription: JSON.stringify([
				{
					type: 'paragraph',
					children: [
						{
							text: 'Build strong spin bowling skills through practical drills.',
						},
					],
				},
			]),
			basePrice: 400,
			ratingCount: 180,
			creator: {
				name: "Michael",
				surname: "Smith",
				username: "michael_s",
				avatarImage: {
					name: "michael_avatar.png",
					id: "img103",
					size: 1300,
					category: "image" as const,
					downloadUrl: "https://example.com/avatars/michael_avatar.png"
				}
			},
			coachingSessionCount: 15,
			durationMinutes: 140,
			salesCount: 850
		},
		{
			description: JSON.stringify([
				{
					type: 'paragraph',
					children: [
						{
							text: 'Mental preparation and focus training for competitive cricket players.',
						},
					],
				},
			]),
			title: "Mental Toughness Training",
			currency: "USD",
			rating: 4.6,
			languages: [
				{
					name: "English",
					code: "en",
					id: "lang9",
					state: "created" as const,
					createdAt: new Date("2023-07-10"),
					updatedAt: new Date("2025-07-10")
				}
			],
			id: 106,
			status: {
				status: "inProgress" as const,
				progress: 0
			},
			briefDescription: JSON.stringify([
				{
					type: 'paragraph',
					children: [
						{
							text: 'Develop your mental game to perform under pressure.',
						},
					],
				},
			]),
			basePrice: 380,
			ratingCount: 220,
			creator: {
				name: "Sophia",
				surname: "Turner",
				username: "sophia_t",
				avatarImage: {
					name: "sophia_avatar.jpg",
					id: "img104",
					size: 1200,
					category: "image" as const,
					downloadUrl: "https://example.com/avatars/sophia_avatar.jpg"
				}
			},
			coachingSessionCount: 18,
			durationMinutes: 100,
			salesCount: 1100
		}
	];

	// TODO: Remove hardcoded reviews and use API data when backend is ready
	const coachReviews = [
		{
			rating: 4.8,
			neededMoreTime: false,
			student: {
				name: "Rahul",
				surname: "Sharma",
				avatarImage: {
					name: "rahul_avatar.png",
					id: "a12b34",
					size: 1024,
					category: "image",
					downloadUrl: "https://example.com/avatars/rahul_avatar.png"
				}
			},
			id: "r101",
			state: "created",
			createdAt: new Date("2025-08-10T10:30:00Z"),
			updatedAt: new Date("2025-08-15T12:00:00Z"),
			coachingSession: {
				status: "completed",
				startTime: "2025-08-10T14:00:00Z",
				endTime: "2025-08-10T15:00:00Z",
				id: "cs101",
				state: "created",
				createdAt: new Date("2025-08-01T09:00:00Z"),
				updatedAt: new Date("2025-08-05T10:00:00Z"),
				publicationDate: "2025-07-31",
				coachingOfferingTitle: "Advanced Cricket Techniques",
				coachingOfferingDuration: 60,
				meetingUrl: "https://meet.example.com/session/cs101"
			},
			course: {
				title: "Cricket Fundamentals",
				image: {
					name: "cricket_course.png",
					id: "c101",
					size: 2048,
					category: "image",
					downloadUrl: "https://example.com/images/cricket_course.png"
				},
				id: 501
			},
			notes: "Rahul has shown remarkable improvement in his batting technique over the last few sessions. His focus and determination are commendable. The coach's tailored training plan really helped him work on his foot placement and shot selection. Rahul is steadily gaining confidence and has started implementing the strategies during matches, which has reflected positively in his recent performances."
		},
		{
			rating: 4.2,
			neededMoreTime: true,
			student: {
				name: "Sneha",
				surname: "Reddy",
				avatarImage: null
			},
			id: 102,
			state: "created",
			createdAt: new Date("2025-09-05T11:15:00Z"),
			updatedAt: new Date("2025-09-06T10:45:00Z"),
			coachingSession: {
				status: "scheduled",
				startTime: "2025-09-10T09:00:00Z",
				endTime: "2025-09-10T10:30:00Z",
				id: 502,
				state: "created",
				createdAt: new Date("2025-09-01T08:00:00Z"),
				updatedAt: new Date("2025-09-03T07:55:00Z"),
				publicationDate: "2025-08-28",
				coachingOfferingTitle: "Batting Improvement",
				coachingOfferingDuration: 90,
				meetingUrl: null
			},
			course: {
				title: "Batting Masterclass",
				image: null,
				id: 502
			},
			notes: "Sneha has great potential but needs more time to refine her techniques, especially under pressure. During the sessions, she shows enthusiasm and is quick to learn when given clear and structured feedback. Focusing on her backlift and balance will be crucial in the upcoming weeks to help her convert practice into match-winning performances."
		},
		{
			rating: 4.9,
			neededMoreTime: false,
			student: {
				name: "Amit",
				surname: "Kumar",
				avatarImage: {
					name: "amit_avatar.jpg",
					id: "a5678",
					size: 1500,
					category: "image",
					downloadUrl: "https://example.com/avatars/amit_avatar.jpg"
				}
			},
			id: "r103",
			state: "created",
			createdAt: new Date("2025-07-21T09:00:00Z"),
			updatedAt: new Date("2025-07-25T14:30:00Z"),
			coachingSession: {
				status: "completed",
				startTime: "2025-07-22T16:00:00Z",
				endTime: "2025-07-22T17:30:00Z",
				id: "cs103",
				state: "created",
				createdAt: new Date("2025-07-10T10:00:00Z"),
				updatedAt: new Date("2025-07-15T15:00:00Z"),
				publicationDate: "2025-07-18",
				coachingOfferingTitle: "Bowling Accuracy and Pace",
				coachingOfferingDuration: 90,
				meetingUrl: "https://meet.example.com/session/cs103"
			},
			course: {
				title: "Fast Bowling Techniques",
				image: {
					name: "fast_bowling.png",
					id: "c103",
					size: 1800,
					category: "image",
					downloadUrl: "https://example.com/images/fast_bowling.png"
				},
				id: 503
			},
			notes: "Amit's commitment to improving his bowling has been outstanding. He has significantly improved his line and length, which has started to trouble batsmen in local matches. The drills focusing on his run-up and release point have paid off. His mental focus during sessions is excellent, and he continues to work hard on fitness and technique."
		},
		{
			rating: 3.7,
			neededMoreTime: true,
			student: {
				name: "Nisha",
				surname: "Patel",
				avatarImage: {
					name: "nisha_avatar.png",
					id: "a91011",
					size: 1100,
					category: "image",
					downloadUrl: "https://example.com/avatars/nisha_avatar.png"
				}
			},
			id: "r104",
			state: "created",
			createdAt: new Date("2025-06-15T08:30:00Z"),
			updatedAt: new Date("2025-06-18T09:45:00Z"),
			coachingSession: {
				status: "requested",
				startTime: "2025-06-20T10:00:00Z",
				endTime: "2025-06-20T11:30:00Z",
				id: "cs104",
				state: "created",
				createdAt: new Date("2025-06-01T07:00:00Z"),
				updatedAt: new Date("2025-06-10T08:00:00Z"),
				publicationDate: "2025-05-30",
				coachingOfferingTitle: "Fielding and Agility",
				coachingOfferingDuration: 90,
				meetingUrl: null
			},
			course: {
				title: "Fielding Excellence",
				image: null,
				id: 504
			},
			notes: "Nisha is progressing but needs more focused attention on footwork and reaction times. Energy levels in afternoon sessions are sometimes low, indicating a need for better conditioning. The coach suggests more stamina building and agility drills. With perseverance, she can become a key fielder in the team."
		},
		{
			rating: 5.0,
			neededMoreTime: false,
			student: {
				name: "Vikram",
				surname: "Singh",
				avatarImage: {
					name: "vikram_avatar.jpg",
					id: "a121314",
					size: 1300,
					category: "image",
					downloadUrl: "https://example.com/avatars/vikram_avatar.jpg"
				}
			},
			id: "r105",
			state: "created",
			createdAt: new Date("2025-10-01T10:00:00Z"),
			updatedAt: new Date("2025-10-05T11:30:00Z"),
			coachingSession: {
				status: "completed",
				startTime: "2025-10-03T15:00:00Z",
				endTime: "2025-10-03T16:30:00Z",
				id: "cs105",
				state: "created",
				createdAt: new Date("2025-09-25T11:00:00Z"),
				updatedAt: new Date("2025-09-29T12:00:00Z"),
				publicationDate: "2025-09-20",
				coachingOfferingTitle: "Mental Toughness Training",
				coachingOfferingDuration: 90,
				meetingUrl: "https://meet.example.com/session/cs105"
			},
			course: {
				title: "Mindset for Winning",
				image: {
					name: "mental_training.png",
					id: "c105",
					size: 1700,
					category: "image",
					downloadUrl: "https://example.com/images/mental_training.png"
				},
				id: 505
			},
			notes: "Vikram has exhibited a tremendous mental shift during these sessions. His ability to remain calm under pressure has improved drastically. The coach's focus on visualization and routine-building has been instrumental. This mental toughness is already helping Vikram perform better in tight match situations."
		},
		{
			rating: 3.9,
			neededMoreTime: true,
			student: {
				name: "Anjali",
				surname: "Desai",
				avatarImage: null
			},
			id: "r106",
			state: "created",
			createdAt: new Date("2025-05-12T09:30:00Z"),
			updatedAt: new Date("2025-05-15T10:30:00Z"),
			coachingSession: {
				status: "canceled",
				startTime: "2025-05-20T14:00:00Z",
				endTime: "2025-05-20T15:30:00Z",
				id: "cs106",
				state: "created",
				createdAt: new Date("2025-05-10T08:00:00Z"),
				updatedAt: new Date("2025-05-15T10:00:00Z"),
				publicationDate: "2025-05-05",
				coachingOfferingTitle: "Spin Bowling Basics",
				coachingOfferingDuration: 90,
				meetingUrl: null
			},
			course: {
				title: "Spin Bowling Techniques",
				image: null,
				id: 506
			},
			notes: "Anjali has shown interest in spin bowling but has struggled with consistency. Sessions were unfortunately canceled due to scheduling conflicts, but she remains committed to learning. The coach recommends focusing on grip and release mechanics once sessions resume to develop better control."
		},
		{
			rating: 4.5,
			neededMoreTime: false,
			student: {
				name: "Rohit",
				surname: "Gupta",
				avatarImage: {
					name: "rohit_avatar.png",
					id: "a151617",
					size: 1250,
					category: "image",
					downloadUrl: "https://example.com/avatars/rohit_avatar.png"
				}
			},
			id: "r107",
			state: "created",
			createdAt: new Date("2025-07-30T11:00:00Z"),
			updatedAt: new Date("2025-08-02T12:15:00Z"),
			coachingSession: {
				status: "completed",
				startTime: "2025-07-31T13:00:00Z",
				endTime: "2025-07-31T14:30:00Z",
				id: "cs107",
				state: "created",
				createdAt: new Date("2025-07-20T09:30:00Z"),
				updatedAt: new Date("2025-07-25T10:30:00Z"),
				publicationDate: "2025-07-18",
				coachingOfferingTitle: "Power Hitting Workshop",
				coachingOfferingDuration: 90,
				meetingUrl: "https://meet.example.com/session/cs107"
			},
			course: {
				title: "Power Hitting Techniques",
				image: {
					name: "power_hitting.png",
					id: "c107",
					size: 1900,
					category: "image",
					downloadUrl: "https://example.com/images/power_hitting.png"
				},
				id: 507
			},
			notes: "Rohit's power hitting has improved dramatically. His timing and shot selection during sessions have been outstanding. The coach praises his quick adaptation to technique adjustments and his enthusiasm in practice matches has increased accordingly."
		},
		{
			rating: 4.1,
			neededMoreTime: false,
			student: {
				name: "Kavya",
				surname: "Iyer",
				avatarImage: {
					name: "kavya_avatar.png",
					id: "a181920",
					size: 1175,
					category: "image",
					downloadUrl: "https://example.com/avatars/kavya_avatar.png"
				}
			},
			id: "r108",
			state: "created",
			createdAt: new Date("2025-08-18T10:45:00Z"),
			updatedAt: new Date("2025-08-22T11:55:00Z"),
			coachingSession: {
				status: "completed",
				startTime: "2025-08-20T15:00:00Z",
				endTime: "2025-08-20T16:00:00Z",
				id: "cs108",
				state: "created",
				createdAt: new Date("2025-08-10T09:00:00Z"),
				updatedAt: new Date("2025-08-15T10:00:00Z"),
				publicationDate: "2025-08-05",
				coachingOfferingTitle: "Fielding Drills and Strategy",
				coachingOfferingDuration: 60,
				meetingUrl: "https://meet.example.com/session/cs108"
			},
			course: {
				title: "Advanced Fielding",
				image: {
					name: "advanced_fielding.png",
					id: "c108",
					size: 1650,
					category: "image",
					downloadUrl: "https://example.com/images/advanced_fielding.png"
				},
				id: 508
			},
			notes: "Kavya's agility and quick reflexes stand out during fielding sessions. She has responded well to coaching on positioning and anticipation. There is noticeable improvement in her throwing accuracy, and her energy on the field is commendable."
		}
	];

	// Sort and filter functions
	const sortOptions = [
		{ label: coachProfileTranslations('mostRecentFirst'), value: 'mostRecent' },
		{ label: coachProfileTranslations('oldestFirst'), value: 'oldest' },
		{ label: coachProfileTranslations('bestFirst'), value: 'bestFirst' },
		{ label: coachProfileTranslations('worstFirst'), value: 'worstFirst' },
	];

	const handleSortChange = (value: string | string[] | null) => {
		if (typeof value === 'string') {
			setSortBy(value);
		}
	};

	const sortedAndFilteredReviews = coachReviews
		.filter(review => {
			const rating = review.rating;
			const date = new Date(review.createdAt);

			// Apply rating filters
			if (rating < (filters.minRating || 1) || rating > (filters.maxRating || 5)) {
				return false;
			}

			// Apply date filters
			if (filters.dateBefore) {
				const beforeDate = new Date(filters.dateBefore);
				if (date > beforeDate) return false;
			}

			if (filters.dateAfter) {
				const afterDate = new Date(filters.dateAfter);
				if (date < afterDate) return false;
			}

			return true;
		})
		.sort((a, b) => {
			switch (sortBy) {
				case 'mostRecent':
					return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
				case 'oldest':
					return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();
				case 'bestFirst':
					return b.rating - a.rating;
				case 'worstFirst':
					return a.rating - b.rating;
				default:
					return 0;
			}
		});

	// Handle review submission
	const handleReviewSubmit = async (rating: number, review: string) => {
		if (!reviewingCourse) return;

		// Reset error state before submitting
		setReviewError(false);

		try {
			// TODO: add courseSlug in listCoachCourses procedure and replace below line
			const courseSlug = reviewingCourse.slug ||
				reviewingCourse.title.toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/-+/g, '-');

			const result = await createReviewMutation.mutateAsync({
				rating,
				courseSlug,
				review: review || null,
			});

			// Check if the mutation was actually successful
			if (result && result.success === true) {
				// Success - update UI state and invalidate cache
				setReviewSubmitted(true);
				setReviewError(false);

				// Invalidate and refetch the coach reviews to show the new review
				// This is IMPORTANT: It refreshes the UI so new reviews appear in the list
				// TODO: Uncomment when using actual tRPC utils
				// utils.listCoachReviews.invalidate();

				// Also invalidate and refetch coach courses to update review status
				// This updates course cards to show "reviewed" state instead of "add review" button
				// TODO: Uncomment when using actual tRPC utils
				// utils.listCoachCourses.invalidate();
			} else {
				console.error('Review submission failed:', result);
				setReviewError(true);
			}
		} catch (error) {
			// Error occurred during API call (network error, exception, etc.)
			setReviewError(true);
		}
	};

	// Handle review functionality - shows modal or snippet based on existing review
	const handleReviewAction = (course: any) => {
		setReviewingCourse(course);
		setReviewSubmitted(false);
		setReviewError(false);

		// Check if the course is completed and has an existing review
		const isCompleted = course?.status?.status === 'completed';
		const hasReview = course.studentReview;

		if (isCompleted && hasReview) {
			// Course has been reviewed - show ReviewSnippet
			setShowReviewSnippet(true);
			setShowReviewModal(false);
		} else if (isCompleted && !hasReview) {
			// Course completed but no review - show ReviewModal
			setShowReviewModal(true);
			setShowReviewSnippet(false);
		}
	};

	// Handle closing review modal
	const handleCloseReviewModal = () => {
		setShowReviewModal(false);
		setReviewingCourse(null);
		setReviewSubmitted(false);
		setReviewError(false);
	};

	// Handle closing review snippet
	const handleCloseReviewSnippet = () => {
		setShowReviewSnippet(false);
		setReviewingCourse(null);
	};

	return (
		<div className="flex flex-col space-y-5 px-30">
			{/* Profile Header Section */}
			{isLoggedIn && (
				<div className="flex flex-col gap-4 justify-start">
					<Button
						onClick={() => router.back()}
						variant="text"
						text={coachProfileTranslations('back')}
						hasIconLeft
						iconLeft={<IconChevronLeft />}
						className="w-fit p-0"
					/>

					<Breadcrumbs
						items={[
							{
								label: breadcrumbsTranslations('home'),
								onClick: () => router.push('/'),
							},
							{
								label: breadcrumbsTranslations('coaches'),
								onClick: () => router.push('/coaches'),
							},
							{
								label: `${coachIntroduction.name} ${coachIntroduction.surname}`,
								onClick: () => router.push(`/coaches/${username}`),
							},
						]}
					/>
				</div>
			)}

			{/* Coach Introduction Section */}
			{isLoggedIn ? (
				<BookSessionWith
					coachName={`${coachIntroduction.name} ${coachIntroduction.surname}`}
					coachAvatarUrl={coachIntroduction?.avatarImage?.downloadUrl || ""}
					description={coachIntroduction.bio}
					coachRating={coachIntroduction.rating}
					totalRatings={coachIntroduction.ratingCount}
					onBookSessionWith={() => { alert('Book session clicked!'); }}
					isCourseCreator={coachIntroduction.isCourseCreator}
					locale={locale}
				/>
			) : (
				<BuyCoachingSessionBanner
					coachName={`${coachIntroduction.name} ${coachIntroduction.surname}`}
					coachAvatarUrl={coachIntroduction?.avatarImage?.downloadUrl || ""}
					description={coachIntroduction.bio}
					coachRating={coachIntroduction.rating}
					totalRatings={coachIntroduction.ratingCount}
					onBookSessionWith={() => { alert('Book session clicked!'); }}
					isCourseCreator={coachIntroduction.isCourseCreator}
					skills={coachIntroduction.skills.map(skill => skill.name)}
					locale={locale}
				/>
			)}

			{/* Coach Courses Section for visitors */}
			{!isLoggedIn && (
				<div className='flex flex-col gap-4'>
					<h3 className='md:text-2xl text-lg font-bold text-text-primary leading-[110%]'>
						{coachProfileTranslations('coachCourses')}
					</h3>
					<CourseCardList
						locale={locale}
						onEmptyStateButtonClick={() => {
							console.log('Explore courses clicked');
						}}
						emptyStateMessage="No courses available from this coach."
						emptyStateButtonText="Explore Courses"
					>
						{coachCourses.map((course) => (
							<CourseCard
								key={course.id}
								userType="visitor"
								course={{
									title: course.title,
									description: course.briefDescription,
									rating: course.rating,
									author: {
										name: `${course.creator.name} ${course.creator.surname}`,
										image: course.creator.avatarImage?.downloadUrl || '',
									},
									// TODO: Need two prices one for full and one for partial instead of single price basePrice
									pricing: {
										fullPrice: course.basePrice,
										currency: course.currency,
										partialPrice: course.basePrice,
									},
									duration: {
										video: course.durationMinutes || 0,
										coaching: 0,
										selfStudy: 0
									},
									// TODO: Need a single language instead of an array
									language: course.languages[0],
									// TODO: Add course image in listCoachCourses Procedure
									imageUrl: 'https://res.cloudinary.com/dgk9gxgk4/image/upload/v1733464948/2151206389_1_c38sda.jpg',
								}}
								// TODO: Need a single language instead of an array
								language={course.languages[0]}
								sessions={course.coachingSessionCount}
								sales={course.salesCount}
								reviewCount={course.ratingCount}
								locale={locale}
								onDetails={() => console.log(`View details: ${course.title}`)}
								onBuy={() => console.log(`Buy course: ${course.title}`)}
								onClickUser={() => console.log(`View author: ${course.creator.name}`)}
							/>
						))}
					</CourseCardList>
				</div>
			)}

			{/* Coach Reviews Section */}
			<div className='flex flex-col gap-4'>
				<div className='flex justify-between items-center'>
					<h3 className='md:text-2xl text-lg font-bold text-text-primary leading-[110%]'>
						{coachProfileTranslations('coachReviews')}
					</h3>
					<div className="flex items-center gap-2">
						<div className="flex items-center gap-2">
							<p className="text-sm text-text-primary">
								{coachProfileTranslations('sortBy')}
							</p>
							<div className="w-48">
								<Dropdown
									type="simple"
									options={sortOptions}
									onSelectionChange={handleSortChange}
									defaultValue={sortBy}
									text={{ simpleText: coachProfileTranslations('selectSort') }}
								/>
							</div>
						</div>
						<Button
							variant="secondary"
							size="medium"
							text={coachProfileTranslations('filterButton')}
							onClick={() => setShowFilterModal(true)}
							hasIconLeft
							iconLeft={<IconFilter />}
							className="w-auto"
						/>
					</div>
				</div>
				{sortedAndFilteredReviews.length > 0 && (
					<div className="flex flex-col gap-4">
						<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
							{sortedAndFilteredReviews.map((review) => (
								<CoachReviewCard
									key={review.id}
									locale={locale}
									rating={review.rating}
									reviewerName={`${review.student.name} ${review.student.surname}`}
									reviewerAvatar={review.student.avatarImage?.downloadUrl || ''}
									reviewText={review.notes || ''}
									workshopTitle={review.coachingSession.coachingOfferingTitle}
									date={review.createdAt}
									time={new Date(review.createdAt).toLocaleTimeString(locale)}
									courseTitle={review.course.title}
									courseImage={review.course.image?.downloadUrl || ''}
								/>
							))}
						</div>
					</div>
				)}
			</div>

			{/* Coach Review Filter Modal */}
			{showFilterModal && (
				<CoachReviewFilterModal
					onApplyFilters={(f) => setFilters(f)}
					onClose={() => setShowFilterModal(false)}
					initialFilters={filters}
					locale={locale}
				/>
			)}

			{/* Enrolled Courses Section for students */}
			{isLoggedIn && (
				<div className='flex flex-col gap-4'>
					<h3 className='md:text-2xl text-lg font-bold text-text-primary leading-[110%]'>
						{coachProfileTranslations('coachCourses')}
					</h3>
					<CourseCardList
						locale={locale}
						onEmptyStateButtonClick={() => {
							console.log('Explore courses clicked');
						}}
						emptyStateMessage="No courses available from this coach."
						emptyStateButtonText="Explore Courses"
					>
						{coachCourses.map((course) => {
							// Check if course has been purchased (has status property)
							const isPurchased = 'status' in course;
							
							// Determine progress based on course status (only if purchased)
							let progress: number | undefined;

							if (isPurchased) {
								if (course?.status?.status === 'completed') {
									progress = 100;
								} else if (course?.status?.status === 'inProgress') {
									progress = course?.status?.progress;
								} else {
									// 'yetToStart' - progress is 0
									progress = 0;
								}
							}

							// Build props object conditionally
							const courseCardProps: any = {
								userType: "student",
								course: {
									title: course.title,
									description: course.briefDescription,
									rating: course.rating,
									author: {
										name: `${course.creator.name} ${course.creator.surname}`,
										image: course.creator.avatarImage?.downloadUrl || ''
									},
									// TODO: Need two prices one for full and one for partial instead of single price basePrice
									pricing: {
										fullPrice: course.basePrice,
										currency: course.currency,
										partialPrice: course.basePrice,
									},
									duration: {
										video: course.durationMinutes || 0,
										coaching: 0,
										selfStudy: 0
									},
									// TODO: Need a single language instead of an array
									language: course.languages[0],
									// TODO: Add course image in listCoachCourses Procedure
									imageUrl: 'https://res.cloudinary.com/dgk9gxgk4/image/upload/v1733464948/2151206389_1_c38sda.jpg'
								},
								// TODO: Need a single language instead of an array
								language: course.languages[0],
								sessions: course.coachingSessionCount,
								sales: course.salesCount,
								reviewCount: course.ratingCount,
								isPurchased: isPurchased,
								locale: locale,
								onDetails: () => console.log(`View details: ${course.title}`),
								onClickUser: () => console.log(`View author: ${course.creator.name}`)
							};

							// Add purchased-specific props
							if (isPurchased) {
								courseCardProps.progress = progress;
								courseCardProps.onBegin = () => console.log(`Begin course: ${course.title}`);
								courseCardProps.onResume = () => console.log(`Resume course: ${course.title}`);
								
								// Only add review functionality for completed courses
								if (course?.status?.status === 'completed') {
									courseCardProps.onReview = () => handleReviewAction(course);
								}
							} else {
								// Add non-purchased specific props
								courseCardProps.onBuy = () => console.log(`Buy course: ${course.title}`);
							}

							return (
								<CourseCard key={course.id} {...courseCardProps} />
							);
						})}
					</CourseCardList>
				</div>
			)}

			{/* Review Modal */}
			{showReviewModal && (
				<div className="fixed inset-0 flex items-center justify-center z-50 backdrop-blur-sm rounded-lg shadow-lg">
					<ReviewModal
						modalType="course"
						onClose={handleCloseReviewModal}
						onSubmit={handleReviewSubmit}
						onSkip={handleCloseReviewModal}
						locale={locale}
						isLoading={createReviewMutation.isPending}
						isError={createReviewMutation.isError || reviewError}
						submitted={reviewSubmitted}
					/>
				</div>
			)}

			{/* TODO: Add student review in listCoachCourses API response if user already reviewed */}
			{/* Review Display Modal - Shows existing review */}
			{showReviewSnippet && reviewingCourse && reviewingCourse.studentReview && (
				<div className="fixed inset-0 flex items-center justify-center z-50 backdrop-blur-sm">
					<ReviewDisplay
						reviewText={reviewingCourse.studentReview.review || ''}
						rating={reviewingCourse.studentReview.rating}
						onClose={handleCloseReviewSnippet}
						locale={locale}
					/>
				</div>
			)}
		</div>
	);
}

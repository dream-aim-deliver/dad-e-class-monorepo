'use client';

// Auto-generated by page-scaffold command
// Notion: https://www.notion.so/Coach-profile-student-view-book-coaching-outside-courses-4417f760c1a24df8986566bb342a5270
// Features: listCoachReviews, createCourseReview, getCoachIntroduction, getCoachProfileAccess, listCoachCourses
// API Endpoints: GET /{api_version}/{platform_id}/coach?username={username}
// User Types: Student
// Figma: https://www.figma.com/design/8KEwRuOoD5IgxTtFAtLlyS/Just_Do_Ad-1.2?node-id=5731-169364&t=n19jujPl9CMQvyEQ-4

import { viewModels } from '@maany_shr/e-class-models';
import { trpc } from '../trpc/cms-client';
import { useState } from 'react';
import { DefaultLoading, DefaultError, DefaultNotFound, BuyCoachingSessionBanner, CoachReviewCard, BookSessionWith, Breadcrumbs } from '@maany_shr/e-class-ui-kit';
import { useLocale } from 'next-intl';
import { TLocale } from '@maany_shr/e-class-translations';
import { useGetCoachIntroductionPresenter } from '../hooks/use-get-coach-introduction-presenter';
import { useListCoachReviewsPresenter } from '../hooks/use-list-coach-reviews-presenter';
import { useListCoachCoursesPresenter } from '../hooks/use-list-coach-courses-presenter';
import { useGetCoachProfileAccessPresenter } from '../hooks/use-get-coach-profile-access-presenter';
import { useSession } from 'next-auth/react';

interface CoachProfileProps {
	locale: TLocale;
	username: string;
}

export default function CoachProfile({ username }: CoachProfileProps) {
	const locale = useLocale() as TLocale;
	// const breadcrumbsTranslations = useTranslations('components.breadcrumbs');

	const sessionDTO = useSession();
	const session = sessionDTO.data;
	const isLoggedIn = !!session;

	// Fetch coach profile access - determines if profile can be viewed
	const [coachProfileAccessResponse] = trpc.getCoachProfileAccess.useSuspenseQuery({
		coachUsername: username,
	});

	// Fetch coach introduction data
	const [coachIntroductionResponse] = trpc.getCoachIntroduction.useSuspenseQuery({
		coachUsername: username,
	});

	// Fetch coach reviews
	const [coachReviewsResponse] = trpc.listCoachReviews.useSuspenseQuery({
		coachUsername: username,
	});

	// Fetch coach courses - conditional based on login status
	// If logged in: forStudent=true (shows enrolled/in-progress courses)
	// If NOT logged in: forStudent=false (shows all public courses)
	const [coachCoursesResponse] = trpc.listCoachCourses.useSuspenseQuery({
		forStudent: isLoggedIn,
	});

	const [coachIntroductionViewModel, setCoachIntroductionViewModel] = useState<
		viewModels.TGetCoachIntroductionViewModel | undefined
	>(undefined);

	const [coachReviewsViewModel, setCoachReviewsViewModel] = useState<
		viewModels.TListCoachReviewsViewModel | undefined
	>(undefined);

	const [coachCoursesViewModel, setCoachCoursesViewModel] = useState<
		viewModels.TListCoachCoursesViewModel | undefined
	>(undefined);

	const [coachProfileAccessViewModel, setCoachProfileAccessViewModel] = useState<
		viewModels.TGetCoachProfileAccessViewModel | undefined
	>(undefined);

	const { presenter: coachIntroductionPresenter } = useGetCoachIntroductionPresenter(
		setCoachIntroductionViewModel,
	);

	const { presenter: coachReviewsPresenter } = useListCoachReviewsPresenter(
		setCoachReviewsViewModel,
	);

	const { presenter: coachCoursesPresenter } = useListCoachCoursesPresenter(
		setCoachCoursesViewModel,
	);

	const { presenter: coachProfileAccessPresenter } = useGetCoachProfileAccessPresenter(
		setCoachProfileAccessViewModel,
	);

	// Present the data
	// @ts-ignore
	coachIntroductionPresenter.present(coachIntroductionResponse, coachIntroductionViewModel);
	// @ts-ignore
	coachReviewsPresenter.present(coachReviewsResponse, coachReviewsViewModel);
	// @ts-ignore
	coachCoursesPresenter.present(coachCoursesResponse, coachCoursesViewModel);
	// @ts-ignore
	coachProfileAccessPresenter.present(coachProfileAccessResponse, coachProfileAccessViewModel);

	// Loading state
	// if (!coachIntroductionViewModel || !coachReviewsViewModel || !coachCoursesViewModel || !coachProfileAccessViewModel) {
	// 	return <DefaultLoading locale={locale} variant="minimal" />;
	// }

	if (!coachIntroductionViewModel || !coachCoursesViewModel || !coachReviewsViewModel || !coachProfileAccessViewModel) {
		return <DefaultLoading locale={locale} variant="minimal" />;
	}

	// Error handling - not found
	if (coachIntroductionViewModel.mode === 'not-found') {
		return <DefaultNotFound locale={locale} />;
	}

	// Error handling - not found for courses
	if(coachCoursesViewModel.mode === 'not-found') {
		return <DefaultNotFound locale={locale} />;
	}

	// Error handling for reviews
	if (coachReviewsViewModel.mode === 'not-found') {
		return <DefaultNotFound locale={locale} />;
	}

	// Error handling - not found for profile access
	if (coachProfileAccessViewModel.mode === 'not-found') {
		return <DefaultNotFound locale={locale} />;
	}

	// Error handling - kaboom
	if (coachIntroductionViewModel.mode === 'kaboom') {
		return <DefaultError locale={locale} />;
	}

	// Error handling for courses
	// if (coachCoursesViewModel.mode === 'kaboom') {
	// 	return <DefaultError locale={locale} />;
	// }

	// Error handling for reviews
	// if (coachReviewsViewModel.mode === 'kaboom') {
	// 	return <DefaultError locale={locale} />;
	// }

	// Error handling for profile access
	// if (coachProfileAccessViewModel.mode === 'kaboom') {
	// 	return <DefaultError locale={locale} />;
	// }

	// Access control check - if profile access is denied, show not found
	if (coachProfileAccessViewModel.mode === 'default' && !coachProfileAccessViewModel.data.access) {
		return <DefaultNotFound locale={locale} />;
	}

	// Success state - extract data
	// TODO: Use these variables when implementing UI components
	const coachIntroduction = coachIntroductionViewModel.data.coach;
	// const coachCourses = coachCoursesViewModel.data.courses;
	// const coachReviews = coachReviewsViewModel.data.reviews;
	// const coachProfileAccess = coachProfileAccessViewModel.data;

	// TODO: Implement createCourseReview mutation
	// const createReviewMutation = trpc.createCourseReview.useMutation();

	// const handleCreateReview = async (reviewData: any) => {
	//   await createReviewMutation.mutateAsync(reviewData);
	// };

	return (
		<div className="flex flex-col space-y-5 px-30">
			{/* TODO: Add your coach profile page content */}

			{/* Profile Header Section */}
			<div>
				{/* TODO: Add ProfileHeader component */}
				{/* Available data: coachIntroductionViewModel.data */}
				{isLoggedIn && (
					<div>
						{/* <Breadcrumbs
							items={[
								{
									label: breadcrumbsTranslations('home'),
									onClick: () => router.push('/'),
								},
								{
									label: breadcrumbsTranslations('workspace'),
									onClick: () => {
										// TODO: Implement navigation to workspace
									},
								},
								{
									label: breadcrumbsTranslations('students'),
									onClick: () => {
										// Nothing should happen on clicking the current page
									},
								},
							]}
						/> */}
					</div>
				)}
			</div>

			{/* Coach Introduction Section */}
			<div>
				{/* TODO: Add CoachIntroduction component */}
				{/* Display coach bio, expertise, etc. from coachIntroductionViewModel.data */}
				{isLoggedIn ? (
					<BookSessionWith 
						coachName={`${coachIntroduction.name} ${coachIntroduction.surname}`}
						coachAvatarUrl={coachIntroduction?.avatarImage?.downloadUrl || ""}
						description={coachIntroduction.bio}
						coachRating={coachIntroduction.rating}
						totalRatings={coachIntroduction.ratingCount}
						onBookSessionWith={() => { alert('Book session clicked!'); }}
						isCourseCreator={coachIntroduction.isCourseCreator}
						locale={locale}
					/>
				) : (
					<BuyCoachingSessionBanner
						coachName={`${coachIntroduction.name} ${coachIntroduction.surname}`}
						coachAvatarUrl={coachIntroduction?.avatarImage?.downloadUrl || ""}
						description={coachIntroduction.bio}
						coachRating={coachIntroduction.rating}
						totalRatings={coachIntroduction.ratingCount}
						onBookSessionWith={() => { alert('Book session clicked!'); }}
						isCourseCreator={coachIntroduction.isCourseCreator}
						skills={coachIntroduction.skills}
						locale={locale}
					/>
				)}
			</div>

			{/* Coach Availability & Booking Section */}
			{isLoggedIn && (
				<div>
					{/* TODO: Add CoachAvailability component */}
					{/* TODO: Add BookingButton component */}
					{/* This section should allow students to book coaching sessions outside courses */}
				</div>
			)}

			{/* Coach Courses Section */}
			<div>
				{/* TODO: Add CoachCourses component */}
				{/* Display courses from coachCoursesViewModel.data */}
				{/* <CourseCardList 
					locale={locale} 
					onEmptyStateButtonClick={() => {
						console.log('Explore courses clicked');
					}}
					emptyStateMessage="No courses available from this coach."
					emptyStateButtonText="Explore Courses"
				>
					{coachCourses.map((course) => (
						<CourseCard
							key={course.id}
							userType="student"
							reviewCount={course.ratingCount}
							locale={locale}
							language={course.languages[0]}
						/>
					))}
				</CourseCardList> */}
			</div>

			{/* Coach Reviews Section */}
			<div>
				{/* TODO: Add CoachReviews component */}
				{/* Display reviews from coachReviewsViewModel.data */}
				
				{/* <CoachReviewCard /> */}
				{/* {coachReviews.length > 0 && (
					<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
						{coachReviews.map((review) => (
							<CoachReviewCard
								key={review.id}
								locale={locale}
								rating={review.rating}
								reviewerName={`${review.student.name} ${review.student.surname}`}
								reviewerAvatar={review.student.avatarImage?.downloadUrl || ''}
								reviewText={review.notes || ''}
								workshopTitle={review.coachingSession.coachingOfferingTitle}
								date={review.createdAt}
								time={new Date(review.createdAt).toLocaleTimeString(locale)}
								courseTitle={review.course.title}
								courseImage={review.course.image?.downloadUrl || ''}
							/>
						))}
					</div>
				)} */}
			</div>

			{/* Review Form Section */}
			{isLoggedIn && (
				<div>
					{/* TODO: Add ReviewForm component */}
					{/* Allow students to submit reviews using createCourseReview */}
				</div>
			)}
		</div>
	);
}

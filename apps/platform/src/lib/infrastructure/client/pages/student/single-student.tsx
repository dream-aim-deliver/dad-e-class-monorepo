'use client';

// Auto-generated by page-scaffold command
// Feature: listStudentInteractions

import { useMemo, useState } from 'react';
import { useLocale, useTranslations } from 'next-intl';
import { TLocale } from '@maany_shr/e-class-translations';
import {
    Breadcrumbs,
    DefaultError,
    DefaultLoading,
    DefaultNotFound,
    Dropdown,
    Tabs,
    UserAvatar,
} from '@maany_shr/e-class-ui-kit';
import StudentInteractionsTab from './student-interactions-tab';
import { useRouter, useSearchParams } from 'next/navigation';
import { trpc } from '../../trpc/cms-client';
import { viewModels } from '@maany_shr/e-class-models';
import { useListCoachStudentCoursesPresenter } from '../../hooks/use-list-coach-student-courses-presenter';
import { useGetPersonalProfilePresenter } from '../../hooks/use-get-personal-profile-presenter';

interface SingleStudentProps {
    slug: string;
    initialTab?: string;
    roles: string[];
    studentId: number;
    courseSlug: string;
}

enum StudentTab {
    ASSIGNMENTS = 'assignments',
    INTERACTIONS = 'interactions',
    PRE_COURSE_ASSESSMENT = 'pre-course-assessment',
}

function StudentTabList() {
    const t = useTranslations('pages.student');

    const tabs = [
        {
            value: StudentTab.ASSIGNMENTS,
            label: t('tabs.assignments'),
        },
        {
            value: StudentTab.INTERACTIONS,
            label: t('tabs.interactions'),
        },
        {
            value: StudentTab.PRE_COURSE_ASSESSMENT,
            label: t('tabs.preCourseAssessment'),
        },
    ];

    return (
        <Tabs.List className="flex rounded-medium gap-2">
            {tabs.map((tab, index) => (
                <Tabs.Trigger
                    key={tab.value}
                    value={tab.value}
                    isLast={index === tabs.length - 1}
                >
                    {tab.label}
                </Tabs.Trigger>
            ))}
        </Tabs.List>
    );
}

export default function SingleStudent({
    slug,
    initialTab,
    roles,
    studentId,
    courseSlug,
}: SingleStudentProps) {
    const router = useRouter();
    const searchParams = useSearchParams();
    const locale = useLocale() as TLocale;
    const breadcrumbsTranslations = useTranslations('components.breadcrumbs');

    const t = useTranslations('pages.student');

    const defaultTab: string = useMemo(() => {
        if (initialTab) {
            const validTabs: string[] = Object.values(StudentTab);
            if (validTabs.includes(initialTab)) {
                return initialTab;
            }
        }
        return StudentTab.ASSIGNMENTS;
    }, [initialTab]);

    const tabContentClass = 'mt-10';

    // Function to update URL searchParams
    const updateSearchParams = (newCourseSlug: string) => {
        const current = new URLSearchParams(Array.from(searchParams.entries()));
        current.set('courseSlug', newCourseSlug);
        
        // Keep other search params intact
        const search = current.toString();
        const query = search ? `?${search}` : '';
        
        router.push(`${window.location.pathname}${query}`);
    };

    const [viewModel, setViewModel] = useState<
        viewModels.TListCoachStudentCoursesViewModel | undefined
    >(undefined);

    const [personalProfileViewModel, setPersonalProfileViewModel] = useState<
        viewModels.TGetPersonalProfileViewModel | undefined
    >(undefined);
    
    const [selectedCourse, setSelectedCourse] = useState<string>(courseSlug);
    const [selectedCourseData, setSelectedCourseData] = useState<{
        title: string;
        id: number;
        slug: string;
        image?: {
            name: string;
            id: string;
            size: number;
            category: "image";
            downloadUrl: string;
        } | null | undefined;
    } | null>(null);

    const [listCoachStudentCoursesResponse] =
        trpc.listCoachStudentCourses.useSuspenseQuery({
            studentUsername: slug,
        });

    const [personalProfileResponse] =
        trpc.getPersonalProfile.useSuspenseQuery({
            username: slug,
        });

    const { presenter } = useListCoachStudentCoursesPresenter(setViewModel);
    
    const { presenter: personalProfilePresenter } = useGetPersonalProfilePresenter(setPersonalProfileViewModel);

    // Initialize selected course data when courses are loaded
    const currentSelectedCourseData = useMemo(() => {
        if (viewModel?.mode === 'default' && viewModel.data.courses.length > 0) {
            return viewModel.data.courses.find(c => c.slug === selectedCourse) || null;
        }
        return selectedCourseData;
    }, [viewModel, selectedCourse, selectedCourseData]);

    //@ts-ignore
    presenter.present(listCoachStudentCoursesResponse, viewModel);

    //@ts-ignore
    personalProfilePresenter.present(personalProfileResponse, personalProfileViewModel);

    if (!viewModel || !personalProfileViewModel) {
        return <DefaultLoading locale={locale} variant="minimal" />;
    }

    if (viewModel.mode === 'kaboom' || personalProfileViewModel.mode === 'kaboom') {
        return <DefaultError locale={locale} />;
    }

    if (viewModel.mode === 'not-found' || personalProfileViewModel.mode === 'not-found') {
        return <DefaultNotFound locale={locale} />;
    }

    if (viewModel.mode === 'invalid') {
        return <DefaultError locale={locale} description={viewModel.data.message} />
    }

    const courses = viewModel.data.courses;
    const profile = personalProfileViewModel.data.profile;

    return (
        <div className="flex flex-col space-y-4">
            <div className='flex flex-col'>
                <Breadcrumbs
                    items={[
                        {
                            label: breadcrumbsTranslations('home'),
                            onClick: () => router.push('/'),
                        },
                        {
                            label: breadcrumbsTranslations('workspace'),
                            onClick: () => {
                                // TODO: Implement navigation to workspace
                            },
                        },
                        {
                            label: breadcrumbsTranslations('yourStudents'),
                            onClick: () => {
                                // TODO: Implement navigation to your students page
                            },
                        },
                        {
                            label: slug,
                            onClick: () => {
                                // TODO: Implement navigation to current student page
                            },
                        },
                    ]}
                />
                <div className='flex items-center justify-between'>
                    <div className='flex items-center gap-4'>
                        <UserAvatar
                            fullName={`${profile.name} ${profile.surname}`}
                            imageUrl={profile?.avatarImage?.downloadUrl}
                            size="xLarge"
                        />
                        <h1 className='text-text-primary md:text-4xl text-2xl font-bold'>
                            {profile.name} {profile.surname}
                        </h1>
                    </div>
                    <div className='flex items-center gap-4'>
                        <p className='text-text-secondary md:text-sm text-xs'>
                            {t('course')}
                        </p>
                        <div className='w-64'>
                            <Dropdown
                                type="simple"
                                options={courses.map(course => ({
                                    label: (
                                        <div className="flex items-center gap-2">
                                            <UserAvatar
                                                fullName={course.title}
                                                size="small"
                                                imageUrl={course.image?.downloadUrl}
                                            />
                                            <p className="text-sm truncate">{course.title}</p>
                                        </div>
                                    ),
                                    value: course.slug
                                }))}
                                onSelectionChange={(selected) => {
                                    if (selected && typeof selected === 'string') {
                                        setSelectedCourse(selected);
                                        const courseData = courses.find(c => c.slug === selected);
                                        setSelectedCourseData(courseData || null);
                                        // Update URL searchParams
                                        updateSearchParams(selected);
                                    }
                                }}
                                defaultValue={selectedCourse}
                                text={{
                                    simpleText: t('selectACourse')
                                }}
                            />
                        </div>
                    </div>
                </div>
            </div>

            <Tabs.Root defaultTab={defaultTab}>
                <StudentTabList />
                <Tabs.Content value={StudentTab.ASSIGNMENTS} className={tabContentClass}>
                    <DefaultError locale={locale} />
                </Tabs.Content>

                <Tabs.Content value={StudentTab.INTERACTIONS} className={tabContentClass}>
                    <StudentInteractionsTab 
                        studentId={studentId} 
                        courseSlug={selectedCourse} 
                        courseImageUrl={currentSelectedCourseData?.image?.downloadUrl || ""} 
                        courseTitle={currentSelectedCourseData?.title || ""} 
                    />
                </Tabs.Content>

                <Tabs.Content value={StudentTab.PRE_COURSE_ASSESSMENT} className={tabContentClass}>
                    <DefaultError locale={locale} />
                </Tabs.Content>
            </Tabs.Root>
        </div>
    );
}
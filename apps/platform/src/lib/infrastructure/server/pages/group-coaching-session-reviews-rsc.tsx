// Auto-generated by page-scaffold command
// Notion: https://www.notion.so/Group-Coaching-Session-Reviews-Tab-2245a7432d0180cf9b1ac4b112ae9d8f
// Feature: listGroupCoachingSessionReviews
// UI Components: CourseReviewFilterModal, GroupCoachingSessionReviews Banner
// User Type: Coach

import { HydrateClient, prefetch, trpc } from '../config/trpc/cms-server';
import { Suspense } from 'react';
import DefaultLoadingWrapper from '../../client/wrappers/default-loading';
import GroupCoachingSessionReviews from '../../client/pages/group-coaching-session-reviews';
import { TLocale } from '@maany_shr/e-class-translations';
import { redirect } from 'next/navigation';
import getSession from '../config/auth/get-session';

interface GroupCoachingSessionReviewsProps {
    locale: TLocale;
    courseSlug: string;
    groupId: number;
    coachingSessionId: number;
}

export default async function GroupCoachingSessionReviewsServerComponent(
    props: GroupCoachingSessionReviewsProps
) {
    const session = await getSession();

    if (!session || !session.user) {
        redirect('/auth/login');
    }

    const roles = session.user.roles;
    const isCoach = roles && roles.includes('coach');

    if (!isCoach) {
        throw new Error('Access denied. Only coaches can access coaching session reviews.');
    }

    await Promise.all([
        prefetch(trpc.listGroupCoachingSessionReviews.queryOptions({
            coachingSessionId: props.coachingSessionId,
        })),
    ]);

    return (
        <HydrateClient>
            <Suspense fallback={<DefaultLoadingWrapper />}>
                <GroupCoachingSessionReviews
                    locale={props.locale}
                    courseSlug={props.courseSlug}
                    groupId={props.groupId}
                    coachingSessionId={props.coachingSessionId}
                />
            </Suspense>
        </HydrateClient>
    );
}
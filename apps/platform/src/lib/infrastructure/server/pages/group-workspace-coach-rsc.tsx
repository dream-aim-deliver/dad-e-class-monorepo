// Auto-generated by page-scaffold command v2
// Notion: https://www.notion.so/Group-Workspace-Coach-workspace-2245a7432d01807c8606d25a58943c2e
// Usecases: saveGroupNotes, getGroupNotes, listGroupAssignments, listGroupMembers, getGroupNextCoachingSession
// Features: Group notes management, assignments tracking, member management, coaching session scheduling
// User Types: Coach
// Figma: https://www.figma.com/design/8KEwRuOoD5IgxTtFAtLlyS/Just_Do_Ad-1.2?node-id=6913-292532

import { HydrateClient, prefetch, trpc } from '../config/trpc/cms-server';
import { Suspense } from 'react';
import DefaultLoadingWrapper from '../../client/wrappers/default-loading';
import GroupWorkspaceCoach from '../../client/pages/group-workspace-coach';
import { TLocale } from '@maany_shr/e-class-translations';

interface GroupWorkspaceCoachServerComponentProps {
  locale: TLocale;
  courseSlug: string;
  groupId: number;
}

export default async function GroupWorkspaceCoachServerComponent(
  props: GroupWorkspaceCoachServerComponentProps
) {
  // TRPC prefetching for page data
  // Usecases: saveGroupNotes, getGroupNotes, listGroupAssignments, listGroupMembers, getGroupNextCoachingSession
  await Promise.all([
    prefetch(trpc.getGroupNotes.queryOptions({
      courseSlug: props.courseSlug,
      additionalParams: {
        requestType: 'requestForCoach',
        groupId: props.groupId,
      },
    })),
    prefetch(trpc.listGroupAssignments.queryOptions({
      courseSlug: props.courseSlug,
      additionalParams: {
        requestType: 'requestForCoach',
        groupId: props.groupId,
      },
    })),
    prefetch(trpc.listGroupMembers.queryOptions({
      courseSlug: props.courseSlug,
      additionalParams: {
        requestType: 'requestForCoach',
        groupId: props.groupId,
      },
    })),
    prefetch(trpc.getGroupNextCoachingSession.queryOptions({
      courseSlug: props.courseSlug,
      additionalParams: {
        requestType: 'requestForCoach',
        groupId: props.groupId,
      },
    })),
  ]);

  return (
    <HydrateClient>
      <Suspense fallback={<DefaultLoadingWrapper />}>
        <GroupWorkspaceCoach
          locale={props.locale}
          courseSlug={props.courseSlug}
          groupId={props.groupId}
        />
      </Suspense>
    </HydrateClient>
  );
}

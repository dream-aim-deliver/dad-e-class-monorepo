// Auto-generated by page-scaffold command v2
// Notion: https://www.notion.so/Group-Workspace-Student-1ff5a7432d01800aa7c2f8a6005e32ee
// Usecases: getGroupIntroduction, listGroupAssignments, getGroupNextCoachingSession, listGroupMembers, getGroupNotes
// User Types: Student

import { HydrateClient, prefetch, trpc } from '../config/trpc/cms-server';
import { Suspense } from 'react';
import DefaultLoadingWrapper from '../../client/wrappers/default-loading';
import GroupWorkspace from '../../client/pages/group-workspace';
import { TLocale } from '@maany_shr/e-class-translations';
import { redirect } from 'next/navigation';
import getSession from '../config/auth/get-session';

interface GroupWorkspaceServerComponentProps {
  locale: TLocale;
  courseSlug: string;
}

export default async function GroupWorkspaceServerComponent(
  props: GroupWorkspaceServerComponentProps
) {
  // Server-side authentication - Student only
  const session = await getSession();

  if (!session || !session.user) {
    redirect('/auth/login');
  }

  const roles = session.user.roles;
  const isAuthorized = roles && roles.includes('student');

  if (!isAuthorized) {
    // Localized error will be handled by error boundary
    throw new Error('pages.groupWorkspace.error.accessDenied');
  }

  // TRPC prefetching for page data using EXACT usecase names from Notion
  await Promise.all([
    prefetch(trpc.getGroupIntroduction.queryOptions({
      courseSlug: props.courseSlug,
      additionalParams: { requestType: 'requestForStudent' },
    })),
    prefetch(trpc.listGroupAssignments.queryOptions({
      courseSlug: props.courseSlug,
      additionalParams: { requestType: 'requestForStudent' },
    })),
    prefetch(trpc.getGroupNextCoachingSession.queryOptions({
      courseSlug: props.courseSlug,
      additionalParams: { requestType: 'requestForStudent' },
    })),
    prefetch(trpc.listGroupMembers.queryOptions({
      courseSlug: props.courseSlug,
      additionalParams: { requestType: 'requestForStudent' },
    })),
    prefetch(trpc.getGroupNotes.queryOptions({
      courseSlug: props.courseSlug,
      additionalParams: { requestType: 'requestForStudent' },
    })),
  ]);

  return (
    <HydrateClient>
      <Suspense fallback={<DefaultLoadingWrapper />}>
        <GroupWorkspace locale={props.locale} courseSlug={props.courseSlug} />
      </Suspense>
    </HydrateClient>
  );
}

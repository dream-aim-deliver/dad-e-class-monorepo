// Auto-generated by page-scaffold command
// Notion: https://www.notion.so/Ended-Group-Coaching-Sessions-group-course-tab-2245a7432d0180cab050ef2e0ebbb675
// Feature: listGroupCoachingSessions (FEAT-169)
// User Type: Coach
// Figma: https://www.figma.com/design/8KEwRuOoD5IgxTtFAtLlyS/Just_Do_Ad-1.2?node-id=6913-296778

import { HydrateClient, prefetch, trpc } from '../config/trpc/cms-server';
import { Suspense } from 'react';
import DefaultLoadingWrapper from '../../client/wrappers/default-loading';
import EndedGroupCoachingSessions from '../../client/pages/ended-group-coaching-sessions';
import { TLocale } from '@maany_shr/e-class-translations';
import { redirect } from 'next/navigation';
import getSession from '../config/auth/get-session';

interface EndedGroupCoachingSessionsProps {
    locale: TLocale;
    courseSlug: string;
    groupId: number;
}

export default async function EndedGroupCoachingSessionsServerComponent(
    props: EndedGroupCoachingSessionsProps
) {
    // Server-side authentication - Coach only
    const session = await getSession();

    if (!session || !session.user) {
        redirect('/auth/login');
    }

    const roles = session.user.roles;
    const isCoach = roles && roles.includes('coach');

    if (!isCoach) {
        // Localized error will be handled by error boundary
        throw new Error('pages.endedGroupCoachingSessions.error.accessDenied');
    }

    await Promise.all([
        prefetch(trpc.listGroupCoachingSessions.queryOptions({
            groupId: props.groupId,
        })),
    ]);

    return (
        <HydrateClient>
            <Suspense fallback={<DefaultLoadingWrapper />}>
                <EndedGroupCoachingSessions
                    locale={props.locale}
                    courseSlug={props.courseSlug}
                    groupId={props.groupId}
                />
            </Suspense>
        </HydrateClient>
    );
}

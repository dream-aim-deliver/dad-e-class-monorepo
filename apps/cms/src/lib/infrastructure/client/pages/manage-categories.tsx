'use client';

// Auto-generated by page-scaffold command
// Notion: https://www.notion.so/CMS-Manage-Categories-13a5a7432d01807da446eb7172031fcd
// Features: listCategories, updateCategory, deleteCategory, createCategory
// User Types: CMS
// Figma: https://www.figma.com/design/8KEwRuOoD5IgxTtFAtLlyS/Just_Do_Ad-1.2?node-id=5127-63717&t=GjW3V89mle6BrGgh-4

import { trpc } from '../trpc/cms-client';
import { useLocale, useTranslations } from 'next-intl';
import {
    Breadcrumbs,
    DefaultError,
    DefaultLoading,
    DefaultNotFound,
    ManageCategoryTopicList,
    ManageCategoryTopicItem,
    Badge,
    Button,
    CreateEditCategoryTopicModal,
    Dialog,
    DialogContent,
    DialogTrigger,
    useDialog,
    DeleteConfirmationModal,
} from '@maany_shr/e-class-ui-kit';
import { TLocale } from '@maany_shr/e-class-translations';
import { viewModels } from '@maany_shr/e-class-models';
import { useState, useEffect } from 'react';
import { useListCategoriesPresenter } from '../hooks/use-categories-presenter';
import { useCreateCategoryPresenter } from '../hooks/use-create-category-presenter';
import { useUpdateCategoryPresenter } from '../hooks/use-update-category-presenter';
import { useDeleteCategoryPresenter } from '../hooks/use-delete-category-presenter';
import { useRequiredPlatformLocale } from '../context/platform-locale-context';
import { useContentLocale } from '../hooks/use-platform-translations';
import { useRouter } from 'next/navigation';

interface ManageCategoriesProps {
    platformSlug: string;
    platformLocale: string;
    platformName: string;
    categoriesWithTopicCount?: Array<{ categoryId: number; topicsCount: number }>;
}

function CreateCategoryDialogContent({ onSuccess }: { onSuccess: () => void }) {
    const locale = useLocale() as TLocale;
    const { setIsOpen } = useDialog();

    const [createCategoryViewModel, setCreateCategoryViewModel] = useState<
        viewModels.TCreateCategoryViewModel | undefined
    >(undefined);
    const { presenter } = useCreateCategoryPresenter(setCreateCategoryViewModel);

    const createCategoryMutation = trpc.createCategory.useMutation();

    useEffect(() => {
        if (createCategoryMutation.isSuccess && createCategoryMutation.data) {
            // @ts-ignore
            presenter.present(createCategoryMutation.data, createCategoryViewModel);
        }
    }, [createCategoryMutation.isSuccess, createCategoryMutation.data, presenter, createCategoryViewModel]);

    useEffect(() => {
        if (createCategoryViewModel?.mode === 'default') {
            onSuccess();
            setIsOpen(false);
        }
    }, [createCategoryViewModel, onSuccess, setIsOpen]);

    const handleSave = (name: string) => {
        createCategoryMutation.mutate({
            name,
            state: "draft",
        });
    };

    return (
        <div className="p-6">
            <CreateEditCategoryTopicModal
                locale={locale}
                mode="create"
                type="category"
                onSave={handleSave}
                onClose={() => setIsOpen(false)}
            />
            {createCategoryViewModel?.mode === 'invalid' && (
                <div className="text-red-500 mt-2">
                    {createCategoryViewModel.data.message}
                </div>
            )}
            {createCategoryViewModel?.mode === 'kaboom' && (
                <div className="text-red-500 mt-2">
                    {createCategoryViewModel.data.message}
                </div>
            )}
        </div>
    );
}

function EditCategoryDialogContent({
    category,
    onSuccess,
    onDelete,
}: {
    category: { id: number; name: string };
    onSuccess: () => void;
    onDelete: () => void;
}) {
    const locale = useLocale() as TLocale;
    const { setIsOpen } = useDialog();

    const [updateCategoryViewModel, setUpdateCategoryViewModel] = useState<
        viewModels.TUpdateCategoryViewModel | undefined
    >(undefined);
    const { presenter: updatePresenter } =
        useUpdateCategoryPresenter(setUpdateCategoryViewModel);

    const [deleteCategoryViewModel, setDeleteCategoryViewModel] = useState<
        viewModels.TDeleteCategoryViewModel | undefined
    >(undefined);
    const { presenter: deletePresenter } =
        useDeleteCategoryPresenter(setDeleteCategoryViewModel);

    const updateCategoryMutation = trpc.updateCategory.useMutation();
    const deleteCategoryMutation = trpc.deleteCategory.useMutation();

    useEffect(() => {
        if (updateCategoryMutation.isSuccess && updateCategoryMutation.data) {
            // @ts-ignore
            updatePresenter.present(updateCategoryMutation.data, updateCategoryViewModel);
        }
    }, [
        updateCategoryMutation.isSuccess,
        updateCategoryMutation.data,
        updatePresenter,
        updateCategoryViewModel,
    ]);

    useEffect(() => {
        if (deleteCategoryMutation.isSuccess && deleteCategoryMutation.data) {
            // @ts-ignore
            deletePresenter.present(deleteCategoryMutation.data, deleteCategoryViewModel);
        }
    }, [
        deleteCategoryMutation.isSuccess,
        deleteCategoryMutation.data,
        deletePresenter,
        deleteCategoryViewModel,
    ]);

    useEffect(() => {
        if (updateCategoryViewModel?.mode === 'default') {
            onSuccess();
            setIsOpen(false);
        }
    }, [updateCategoryViewModel, onSuccess, setIsOpen]);

    useEffect(() => {
        if (deleteCategoryViewModel?.mode === 'default') {
            onDelete();
            setIsOpen(false);
        }
    }, [deleteCategoryViewModel, onDelete, setIsOpen]);

    const handleSave = (name: string) => {
        updateCategoryMutation.mutate({
            categoryId: category.id,
            name,
        });
    };

    const handleDelete = () => {
        deleteCategoryMutation.mutate({
            categoryId: category.id,
        });
    };

    return (
        <div className="p-6">
            <CreateEditCategoryTopicModal
                locale={locale}
                mode="edit"
                type="category"
                initialValue={category.name}
                onSave={handleSave}
                onDelete={handleDelete}
                onClose={() => setIsOpen(false)}
            />
            {updateCategoryViewModel?.mode === 'invalid' && (
                <div className="text-red-500 mt-2">
                    {updateCategoryViewModel.data.message}
                </div>
            )}
            {updateCategoryViewModel?.mode === 'kaboom' && (
                <div className="text-red-500 mt-2">
                    {updateCategoryViewModel.data.message}
                </div>
            )}
            {deleteCategoryViewModel?.mode === 'invalid' && (
                <div className="text-red-500 mt-2">
                    {deleteCategoryViewModel.data.message}
                </div>
            )}
            {deleteCategoryViewModel?.mode === 'kaboom' && (
                <div className="text-red-500 mt-2">
                    {deleteCategoryViewModel.data.message}
                </div>
            )}
        </div>
    );
}

function CreateCategoryDialog({ onCategoryCreated }: { onCategoryCreated: () => void }) {
    const t = useTranslations('pages.manageCategories');

    return (
        <Dialog
            open={undefined}
            onOpenChange={() => {
                // This function is called when the dialog is opened or closed
            }}
            defaultOpen={false}
        >
            <DialogTrigger asChild>
                <Button text={t('createCategory')} />
            </DialogTrigger>
            <DialogContent showCloseButton closeOnOverlayClick closeOnEscape>
                <CreateCategoryDialogContent onSuccess={onCategoryCreated} />
            </DialogContent>
        </Dialog>
    );
}

export default function ManageCategories({
    platformSlug,
    platformLocale,
    platformName,
    categoriesWithTopicCount = [],
}: ManageCategoriesProps) {
    // App locale - used for UI elements (buttons, labels, etc.)
    const appLocale = useLocale() as TLocale;
    const breadcrumbsTranslations = useTranslations('components.breadcrumbs');
    const t = useTranslations('pages.manageCategories');

    // Router hook - must be called before any conditional returns
    const router = useRouter();

    // Platform context - contains platform-specific information
    const platformContext = useRequiredPlatformLocale();

    // Content locale - the locale for platform content (may differ from app UI locale)
    const contentLocale = useContentLocale();

    // TODO: Add TRPC query for categories data
    const [categoriesResponse, { refetch: refetchCategories }] =
        trpc.listCategories.useSuspenseQuery({});

    const [categoriesViewModel, setCategoriesViewModel] = useState<
        viewModels.TCategoryListViewModel | undefined
    >(undefined);

    const { presenter } = useListCategoriesPresenter(setCategoriesViewModel);

    // State for edit modal
    const [isEditModalOpen, setIsEditModalOpen] = useState(false);
    const [selectedCategory, setSelectedCategory] = useState<{
        id: number;
        name: string;
    } | null>(null);

    // State for delete confirmation modal
    const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
    const [deleteCategoryId, setDeleteCategoryId] = useState<number | null>(null);

    const deleteCategoryMutation = trpc.deleteCategory.useMutation();

    // Present the data
    // @ts-ignore
    presenter.present(categoriesResponse, categoriesViewModel);

    // Loading state using discovered patterns
    if (!categoriesViewModel) {
        return <DefaultLoading locale={appLocale} variant="minimal" />;
    }

    // Error handling using discovered project patterns
    if (categoriesViewModel.mode === 'kaboom') {
        return (
            <DefaultError
                locale={appLocale}
                onRetry={() => {
                    refetchCategories();
                }}
            />
        );
    }

    // Success state - extract data using discovered pattern
    const categories = categoriesViewModel.data.categories;

    // Handler to open edit modal
    const handleOpenEditModal = (category: { id: number; name: string }) => {
        setSelectedCategory(category);
        setIsEditModalOpen(true);
    };

    // Handler to close edit modal
    const handleCloseEditModal = () => {
        setIsEditModalOpen(false);
        setSelectedCategory(null);
    };

    // Handler after successful edit
    const handleEditSuccess = () => {
        refetchCategories();
        handleCloseEditModal();
    };

    // Handler to open delete confirmation modal
    const handleOpenDeleteModal = (categoryId: number) => {
        setDeleteCategoryId(categoryId);
        setIsDeleteModalOpen(true);
    };

    // Handler to close delete confirmation modal
    const handleCloseDeleteModal = () => {
        setIsDeleteModalOpen(false);
        setDeleteCategoryId(null);
    };

    // Handler to confirm deletion
    const handleConfirmDelete = async () => {
        if (!deleteCategoryId) return;

        try {
            await deleteCategoryMutation.mutateAsync({
                categoryId: deleteCategoryId,
            });
            // Refresh the categories list
            refetchCategories();
        } catch (error) {
            // Error handling - mutation error is handled by the mutation itself
            console.error('Failed to delete category:', error);
        } finally {
            handleCloseDeleteModal();
        }
    };

    const breadcrumbItems = [
        {
            label: breadcrumbsTranslations('platforms'),
            onClick: () => router.push('/'),
        },
        {
            label: platformName,
            onClick: () => {
                // TODO: Implement navigation to platform
            },
        },
        {
            label: breadcrumbsTranslations('categories'),
            onClick: () => {
                // Nothing should happen on clicking the current page
            },
        },
    ];

    return (
        <div className="flex flex-col space-y-2 bg-card-fill p-5 border border-card-stroke rounded-medium gap-4">
            <Breadcrumbs items={breadcrumbItems} />
            <div className="flex flex-col space-y-4 sm:space-y-0 sm:flex-row sm:justify-between sm:items-center">
                <div className="flex flex-row items-center gap-3">
                    <h1> {t('title')} </h1>
                    <Badge
                        variant="info"
                        size="medium"
                        text={categories.length.toString()}
                    />
                </div>
                <CreateCategoryDialog onCategoryCreated={() => refetchCategories()} />
            </div>

            <p className="text-text-primary"> {t('description')} </p>

            <div className="flex flex-col items-start gap-6">

                <ManageCategoryTopicList locale={appLocale}>
                    {categories.map((category) => {
                        // Get counts from view model
                        const courseCount = 'courseCount' in category ? category.courseCount ?? 0 : 0;

                        return (
                            <ManageCategoryTopicItem
                                key={category.id}
                                title={category.name}
                                coursesCount={courseCount}
                                type="category"
                                locale={appLocale}
                                onEdit={() => handleOpenEditModal(category)}
                                onDelete={() => handleOpenDeleteModal(category.id)}
                            />
                        );
                    })}
                </ManageCategoryTopicList>
            </div>

            {/* Edit Category Modal */}
            {isEditModalOpen && selectedCategory && (
                <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen} defaultOpen={false}>
                    <DialogContent showCloseButton closeOnOverlayClick closeOnEscape>
                        <EditCategoryDialogContent
                            category={selectedCategory}
                            onSuccess={handleEditSuccess}
                            onDelete={() => {
                                handleCloseEditModal();
                                handleOpenDeleteModal(selectedCategory.id);
                            }}
                        />
                    </DialogContent>
                </Dialog>
            )}

            {/* Delete Confirmation Modal */}
            {isDeleteModalOpen && (
                <div className="fixed inset-0 flex items-center justify-center z-50 backdrop-blur-sm rounded-lg shadow-lg">
                    <DeleteConfirmationModal
                        locale={appLocale}
                        title={t('deleteCategoryConfirmation')}
                        onClose={handleCloseDeleteModal}
                        onDelete={handleConfirmDelete}
                    />
                </div>
            )}
        </div>
    );
}

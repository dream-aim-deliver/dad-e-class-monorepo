'use client';

// Auto-generated by page-scaffold command v2
// Notion: https://www.notion.so/CMS-Manage-Coaching-Page-25d5a7432d01802cabf7fff03e8d1b9e
// Usecases: getCoachingPage, saveCoachingPage, requestFileUpload
// Features: Manage coaching page content with banner (title, description, image, button)
// Upload type: upload_coaching_page_banner_image
// User Types: CMS (admin/superadmin - enforced by middleware)
// Design: Similar to CMS Manage Offers

import { useState } from 'react';
import { DefaultLoading, DefaultError, Outline, PageTitleSection, BannerSection, Button } from '@maany_shr/e-class-ui-kit';
import { useLocale, useTranslations } from 'next-intl';
import { TLocale } from '@maany_shr/e-class-translations';
import { trpc } from '../trpc/cms-client';
import { useSession } from 'next-auth/react';
import { viewModels } from '@maany_shr/e-class-models';
import { useGetCoachingPagePresenter } from '../hooks/use-coaching-page-presenter';
import { useofferPageFileUpload } from '../hooks/use-offer-file-upload';

interface ManageCoachingPageProps {
  locale: string;
  platformSlug: string;
  platformLocale: string;
}

export default function ManageCoachingPage({
  locale: _locale,
  platformSlug,
  platformLocale,
}: ManageCoachingPageProps) {
  const locale = useLocale() as TLocale;
  const t = useTranslations('pages.manageCoachingPage');
  const [uploadProgress, setUploadProgress] = useState<number | undefined>(undefined);

  // Defensive client-side auth check (middleware already enforces admin/superadmin)
  const sessionDTO = useSession();
  const session = sessionDTO.data;
  const isAdmin =
    session?.user?.roles?.includes('admin') ||
    session?.user?.roles?.includes('superadmin');

  // TRPC query for page data - using EXACT usecase name from Notion
  const [coachingPageResponse] = trpc.getCoachingPage.useSuspenseQuery({});

  const [coachingPageViewModel, setCoachingPageViewModel] = useState<
    viewModels.TCoachingPageViewModel | undefined
  >(undefined);

  const { presenter: coachingPagePresenter } = useGetCoachingPagePresenter(
    setCoachingPageViewModel
  );

  if (coachingPageResponse.success && (coachingPageResponse.data as any)?.success) {
    coachingPagePresenter.present((coachingPageResponse.data as any), coachingPageViewModel);
  }

  if (coachingPageViewModel?.mode === 'kaboom') {
    return (
      <DefaultError
        locale={locale}
        title={t('error.title')}
        description={t('error.description')}
      />
    );
  }

  // Defensive auth check on client side
  if (!session || !isAdmin) {
    return (
      <DefaultError
        locale={locale}
        title={t('error.unauthorized.title')}
        description={t('error.unauthorized.description')}
      />
    );
  }

  // Loading state (defensive check)
  if (!coachingPageResponse) {
    return <DefaultLoading locale={locale} variant="minimal" />;
  }

  // Extract data from view model
  const coachingPageData = coachingPageViewModel?.mode === 'default' ? coachingPageViewModel.data : null;

  // State for managing coaching page data
  const [pageTitle, setPageTitle] = useState({
    title: (coachingPageData as any)?.title || '',
    description: (coachingPageData as any)?.description || '',
  });

  // Banner data - note: API GET returns imageUrl (string), but API POST expects imageId (number)
  // We'll store imageUrl for display but track imageId separately for saving
  const bannerData = (coachingPageData as any)?.banner;
  const initialBannerData = {
    title: bannerData?.title || '',
    description: bannerData?.description || '',
    imageUrl: bannerData?.imageUrl || null,
    buttonText: bannerData?.buttonText || '',
    buttonUrl: bannerData?.buttonLink || '',
  };

  const [banner, setBanner] = useState<{
    title: string;
    description: string;
    imageUrl: string | null;
    buttonText: string;
    buttonUrl: string;
  }>(initialBannerData);

  // Track the uploaded file ID separately for the save mutation
  const [bannerImageId, setBannerImageId] = useState<number | null>(null);

  const { handleFileUpload, handleFileDelete, handleFileDownload } = useofferPageFileUpload(setUploadProgress);

  const saveCoachingPageMutation = trpc.saveCoachingPage.useMutation();

  const handleSave = async () => {
    try {
      await saveCoachingPageMutation.mutateAsync({
        title: pageTitle.title,
        description: pageTitle.description,
        banner: {
          title: banner.title,
          description: banner.description,
          imageId: bannerImageId,
          buttonText: banner.buttonText,
          buttonLink: banner.buttonUrl,
        },
      });
    } catch (error) {
      console.error('Error saving coaching page:', error);
    }
  };

  return (
    <div className="flex flex-col space-y-5">
      {/* Page header with translations */}
      <Outline
        title={t('title')}
        description={t('description')}
      />

      {/* Page Title Section */}
      <PageTitleSection
        initialValue={pageTitle}
        onChange={setPageTitle}
      />

      {/* Banner Section */}
      <BannerSection
        initialValue={banner}
        onChange={setBanner}
        onFileUpload={handleFileUpload}
        onFileDelete={handleFileDelete}
        onFileDownload={handleFileDownload}
        onImageUploadComplete={(fileId) => setBannerImageId(fileId ? Number(fileId) : null)}
        uploadProgress={uploadProgress}
      />

      {/* Save Button */}
      <div className="flex justify-end">
        <Button
          variant="primary"
          size="medium"
          text="Save Coaching Page"
          onClick={handleSave}
          disabled={saveCoachingPageMutation.isPending}
        />
      </div>
    </div>
  );
}

'use client';

// Auto-generated by page-scaffold command v2
// Notion: https://www.notion.so/CMS-Manage-Coaching-Page-25d5a7432d01802cabf7fff03e8d1b9e
// Usecases: getCoachingPage, saveCoachingPage, requestFileUpload
// Features: Manage coaching page content with banner (title, description, image, button)
// Upload type: upload_coaching_page_banner_image
// User Types: CMS (admin/superadmin - enforced by middleware)
// Design: Similar to CMS Manage Offers

import { useState } from 'react';
import { DefaultLoading, DefaultError, Outline, PageTitleSection, BannerSection, Button, Banner } from '@maany_shr/e-class-ui-kit';
import { useLocale, useTranslations } from 'next-intl';
import { TLocale } from '@maany_shr/e-class-translations';
import { trpc } from '../trpc/cms-client';
import { useSession } from 'next-auth/react';
import { viewModels } from '@maany_shr/e-class-models';
import { useGetCoachingPagePresenter } from '../hooks/use-coaching-page-presenter';
import { useHomePageFileUpload } from './common/hooks/use-homepage-file-upload';
import { useFormState } from 'packages/ui-kit/lib/hooks/use-form-state';
interface ManageCoachingPageProps {
  locale: string;
  platformSlug: string;
  platformLocale: string;
}

export default function ManageCoachingPage({
  locale: _locale,
  platformSlug,
  platformLocale,
}: ManageCoachingPageProps) {
  const locale = useLocale() as TLocale;
  const t = useTranslations('pages.manageCoachingPage');
  const [uploadProgress, setUploadProgress] = useState<number | undefined>(undefined);

  // Defensive client-side auth check (middleware already enforces admin/superadmin)
  const sessionDTO = useSession();
  const session = sessionDTO.data;
  const isAdmin =
    session?.user?.roles?.includes('admin') ||
    session?.user?.roles?.includes('superadmin');

  // TRPC query for page data - using EXACT usecase name from Notion
  const [coachingPageResponse , { refetch: refetchCoachingPage }] = trpc.getCoachingPage.useSuspenseQuery({});

  const [coachingPageViewModel, setCoachingPageViewModel] = useState<
    viewModels.TCoachingPageViewModel | undefined
  >(undefined);

  const { presenter: coachingPagePresenter } = useGetCoachingPagePresenter(
    setCoachingPageViewModel
  );

   // @ts-ignore
    coachingPagePresenter.present(coachingPageResponse, coachingPageViewModel);
  

  if (coachingPageViewModel?.mode === 'kaboom') {
    return (
      <DefaultError
        locale={locale}
        title={t('error.title')}
        description={t('error.description')}
      />
    );
  }

  // Defensive auth check on client side
  if (!session || !isAdmin) {
    return (
      <DefaultError
        locale={locale}
        title={t('error.unauthorized.title')}
        description={t('error.unauthorized.description')}
      />
    );
  }

  // Loading state (defensive check)
  if (!coachingPageResponse) {
    return <DefaultLoading locale={locale} variant="minimal" />;
  }

  // Extract data from view model
  const coachingPageData = coachingPageViewModel?.mode === 'default' ? coachingPageViewModel.data : null;

  // Track the uploaded file ID separately for the save mutation
  const [bannerImageId, setBannerImageId] = useState<number | null>(null);

  type CoachingPageFormData = {
    title: string;
    description: string;
    banner: {
      title: string;
      description: string;
      imageUrl: string | null;
      buttonText: string;
      buttonUrl: string;
    };
  };

  // Banner data - note: API GET returns imageUrl (string), but API POST expects imageId (number)
  // We'll store imageUrl for display but track imageId separately for saving
  const bannerData = (coachingPageData as any)?.banner;
  const initialFormData: CoachingPageFormData = {
    title: coachingPageData?.title || '',
    description: coachingPageData?.description || '',
    banner: {
      title: bannerData?.title || '',
      description: bannerData?.description || '',
      imageUrl: bannerData?.imageUrl || null,
      buttonText: bannerData?.buttonText || '',
      buttonUrl: bannerData?.buttonLink || '',
    },
  };

  const formState = useFormState(coachingPageData ? initialFormData : null, { enableReloadProtection: true });

  const { handleFileUpload, handleFileDelete, handleFileDownload } = useHomePageFileUpload(setUploadProgress);


  const [saveStatus, setSaveStatus] = useState<'idle' | 'success' | 'error'>('idle');

  const saveCoachingPageMutation = trpc.saveCoachingPage.useMutation({
    onSuccess: (data) => {
      if (data.success) {
        formState.markAsSaved();
        setSaveStatus('success');
        refetchCoachingPage();
      }
    },
    onError: (error) => {
      setSaveStatus('error');
    },
  });

  const handleSave = async () => {
    setSaveStatus('idle');

    await saveCoachingPageMutation.mutateAsync({
      title: formState.value!.title,
      description: formState.value!.description,
      banner: {
        title: formState.value!.banner.title,
        description: formState.value!.banner.description,
        imageId: bannerImageId,
        buttonText: formState.value!.banner.buttonText,
        buttonLink: formState.value!.banner.buttonUrl,
      },
    });
  };

  // If form isn't initialized yet, avoid mounting child sections that only read initialValue once
  if (!formState.value) {
    return <DefaultLoading locale={locale} variant="minimal" />;
  }

  return (
    <div className="flex flex-col space-y-5 w-full">
      {/* Page header with translations */}
      <div className="flex justify-between items-start">
        <div className="flex-1">
          <Outline
            title={t('title')}
            description={t('description')}
          />
        </div>
        <div className="ml-4">
          <Button
            variant="primary"
            size="medium"
            text="Save Coaching Page"
            onClick={handleSave}
            disabled={saveCoachingPageMutation.isPending}
          />
        </div>
      </div>

      {saveCoachingPageMutation.isPending && (
        <Banner style="success" title="Saving coaching page changes..." />
      )}
      {saveStatus === 'success' && (
        <Banner style="success" title="Coaching page saved successfully!" />
      )}
      {saveStatus === 'error' && (
        <Banner style="error" title="Failed to save coaching page" />
      )}

      {/* Page Title Section */}
      <PageTitleSection
        initialValue={{ title: formState.value.title, description: formState.value.description }}
        onChange={(newValue) => formState.setValue({ ...formState.value!, title: newValue.title, description: newValue.description })}
      />

      {/* Banner Section */}
      <BannerSection
        initialValue={formState.value.banner}
        onChange={(newBanner) => formState.setValue({ ...formState.value!, banner: newBanner })}
        onFileUpload={handleFileUpload}
        onFileDelete={handleFileDelete}
        onFileDownload={handleFileDownload}
        onImageUploadComplete={(fileId) => setBannerImageId(fileId ? Number(fileId) : null)}
        uploadProgress={uploadProgress}
      />

    </div>
  );
}

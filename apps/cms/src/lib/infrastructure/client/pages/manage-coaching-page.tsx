'use client';

// Auto-generated by page-scaffold command v2
// Notion: https://www.notion.so/CMS-Manage-Coaching-Page-25d5a7432d01802cabf7fff03e8d1b9e
// Usecases: getCoachingPage, saveCoachingPage, requestFileUpload
// Features: Manage coaching page content with banner (title, description, image, button)
// Upload type: upload_coaching_page_banner_image
// User Types: CMS (admin/superadmin - enforced by middleware)
// Design: Similar to CMS Manage Offers

import { useState, useEffect, useRef } from 'react';
import { DefaultLoading, DefaultError, Outline, PageTitleSection, BannerSection, Button, Banner } from '@maany_shr/e-class-ui-kit';
import { useLocale, useTranslations } from 'next-intl';
import { TLocale } from '@maany_shr/e-class-translations';
import { trpc } from '../trpc/cms-client';
import { useSession } from 'next-auth/react';
import { viewModels } from '@maany_shr/e-class-models';
import { useGetCoachingPagePresenter } from '../hooks/use-coaching-page-presenter';
import { useHomePageFileUpload } from './common/hooks/use-homepage-file-upload';
import { useFormState } from 'packages/ui-kit/lib/hooks/use-form-state';
interface ManageCoachingPageProps {
  locale: string;
  platformSlug: string;
  platformLocale: string;
}

export default function ManageCoachingPage({
  locale: _locale,
  platformSlug,
  platformLocale,
}: ManageCoachingPageProps) {
  const locale = useLocale() as TLocale;
  const t = useTranslations('pages.manageCoachingPage');

  // All hooks must be called at the top level before any conditional returns
  const [uploadProgress, setUploadProgress] = useState<number | undefined>(undefined);
  const [saveStatus, setSaveStatus] = useState<'idle' | 'success' | 'error'>('idle');
  const [coachingPageViewModel, setCoachingPageViewModel] = useState<
    viewModels.TGetCoachingPageViewModel | undefined
  >(undefined);

  // Defensive client-side auth check (middleware already enforces admin/superadmin)
  const sessionDTO = useSession();
  const session = sessionDTO.data;
  const isAdmin =
    session?.user?.roles?.includes('admin') ||
    session?.user?.roles?.includes('superadmin');

  // TRPC query for page data - using EXACT usecase name from Notion
  const [coachingPageResponse, { refetch: refetchCoachingPage }] = trpc.getCoachingPage.useSuspenseQuery({});

  const { presenter: coachingPagePresenter } = useGetCoachingPagePresenter(
    setCoachingPageViewModel
  );

  // Extract data from view model
  const coachingPageData = coachingPageViewModel?.mode === 'default' ? coachingPageViewModel.data : null;

  type CoachingPageFormData = {
    title: string;
    description: string;
    banner: {
      title: string;
      description: string;
      imageUrl: string | null;
      imageId: number | null;
      buttonText: string;
      buttonUrl: string;
    };
  };

  // Create default coaching page data when it doesn't exist (for upsert functionality)
  const defaultCoachingPageData: CoachingPageFormData = {
    title: '',
    description: '',
    banner: {
      title: '',
      description: '',
      imageUrl: null,
      imageId: null,
      buttonText: '',
      buttonUrl: '',
    },
  };

  // Banner data - note: API GET returns imageUrl (string) and imageId (number)
  // Store both for proper persistence across uploads
  const initialFormData: CoachingPageFormData = (coachingPageViewModel?.mode === 'default')
    ? {
        title: coachingPageViewModel.data.title || '',
        description: coachingPageViewModel.data.description || '',
        banner: {
          title: coachingPageViewModel.data.banner?.title || '',
          description: coachingPageViewModel.data.banner?.description || '',
          imageUrl: coachingPageViewModel.data.banner?.image?.downloadUrl || null,
          imageId: coachingPageViewModel.data.banner?.image?.id ? Number(coachingPageViewModel.data.banner.image.id) : null,
          buttonText: coachingPageViewModel.data.banner?.buttonText || '',
          buttonUrl: coachingPageViewModel.data.banner?.buttonLink || '',
        },
      }
    : defaultCoachingPageData;

  const formState = useFormState(initialFormData, { enableReloadProtection: true });
  const { handleFileUpload, handleFileDelete, handleFileDownload } = useHomePageFileUpload(setUploadProgress);
  const isInitializedRef = useRef(false);

  const saveCoachingPageMutation = trpc.saveCoachingPage.useMutation({
    onSuccess: (data) => {
      if (data.success) {
        formState.markAsSaved();
        setSaveStatus('success');
        // Don't refetch immediately after save to prevent flickering
        // The form already has the correct data
        // refetchCoachingPage();
      }
    },
    onError: (error) => {
      setSaveStatus('error');
    },
  });

  // Present data on mount and when response changes
  useEffect(() => {
    // @ts-ignore
    coachingPagePresenter.present(coachingPageResponse, coachingPageViewModel);
  }, [coachingPageResponse, coachingPagePresenter, coachingPageViewModel]);

  // Update form state when data loads ONLY on initial load
  // Don't reset form after save to prevent showing stale data
  useEffect(() => {
    if (coachingPageViewModel?.mode === 'default' && !isInitializedRef.current) {
      const loadedFormData: CoachingPageFormData = {
        title: coachingPageViewModel.data.title || '',
        description: coachingPageViewModel.data.description || '',
        banner: {
          title: coachingPageViewModel.data.banner?.title || '',
          description: coachingPageViewModel.data.banner?.description || '',
          imageUrl: coachingPageViewModel.data.banner?.image?.downloadUrl || null,
          imageId: coachingPageViewModel.data.banner?.image?.id ? Number(coachingPageViewModel.data.banner.image.id) : null,
          buttonText: coachingPageViewModel.data.banner?.buttonText || '',
          buttonUrl: coachingPageViewModel.data.banner?.buttonLink || '',
        },
      };
      formState.setValue(loadedFormData);
      isInitializedRef.current = true;
    }
  }, [coachingPageViewModel?.mode]);

  // Now handle conditional rendering after all hooks are called
  // Error handling - only kaboom errors should prevent rendering
  // Note: 'not-found' is acceptable since save mutation supports upsert
  if (coachingPageViewModel?.mode === 'kaboom') {
    return (
      <DefaultError
        locale={locale}
        title={t('error.title')}
        description={t('error.description')}
      />
    );
  }

  // Defensive auth check on client side
  if (!session || !isAdmin) {
    return (
      <DefaultError
        locale={locale}
        title={t('error.unauthorized.title')}
        description={t('error.unauthorized.description')}
      />
    );
  }

  const handleSave = async () => {
    setSaveStatus('idle');

    await saveCoachingPageMutation.mutateAsync({
      title: formState.value!.title,
      description: formState.value!.description,
      banner: {
        title: formState.value!.banner.title,
        description: formState.value!.banner.description,
        imageId: formState.value!.banner.imageId,
        buttonText: formState.value!.banner.buttonText,
        buttonLink: formState.value!.banner.buttonUrl,
      },
    });
  };

  return (
    <div className="flex flex-col space-y-5 w-full">
      {/* Page header with translations */}
      <div className="flex justify-between items-start">
        <div className="flex-1">
          <Outline
            title={t('title')}
            description={t('description')}
          />
        </div>
        <div className="ml-4">
          <Button
            variant="primary"
            size="medium"
            text="Save Coaching Page"
            onClick={handleSave}
            disabled={saveCoachingPageMutation.isPending}
          />
        </div>
      </div>

      {saveCoachingPageMutation.isPending && (
        <Banner style="success" title="Saving coaching page changes..." />
      )}
      {saveStatus === 'success' && (
        <Banner style="success" title="Coaching page saved successfully!" />
      )}
      {saveStatus === 'error' && (
        <Banner style="error" title="Failed to save coaching page" />
      )}

      {/* Page Title Section */}
      <PageTitleSection
        value={{ title: formState.value!.title, description: formState.value!.description }}
        onChange={(newValue) => formState.setValue({ ...formState.value!, title: newValue.title, description: newValue.description })}
      />

      {/* Banner Section */}
      <BannerSection
        value={formState.value!.banner}
        onChange={(newBanner) => formState.setValue({ ...formState.value!, banner: newBanner })}
        onFileUpload={handleFileUpload}
        onFileDelete={handleFileDelete}
        onFileDownload={handleFileDownload}
        onImageUploadComplete={(fileId) => {
          // Update imageId in form state when image is uploaded
          formState.setValue({
            ...formState.value!,
            banner: {
              ...formState.value!.banner,
              imageId: fileId ? Number(fileId) : null,
            },
          });
        }}
        uploadProgress={uploadProgress}
      />

    </div>
  );
}

'use client';

// Auto-generated by page-scaffold command v2
// Notion: https://www.notion.so/CMS-Manage-Offers-Page-22d5a7432d01809487b5f5592b2013f3
// Usecases: saveOffersPage, listPackages, requestFileUpload, getOffersPageOutline, listOffersPagePackagesShort
// User Types: CMS (admin/superadmin - enforced by middleware)
// Figma: https://www.figma.com/design/8KEwRuOoD5IgxTtFAtLlyS/Just_Do_Ad-1.2?node-id=8540-240257&t=qGirq2t6ka6iwg1A-4

import { useState } from 'react';
import { DefaultLoading, DefaultError, Outline, PageTitleSection, PackageSection, CarouselSection, Banner } from '@maany_shr/e-class-ui-kit';
import { useLocale, useTranslations } from 'next-intl';
import { TLocale } from '@maany_shr/e-class-translations';
import { trpc } from '../trpc/cms-client';
import { useSession } from 'next-auth/react';

import { Button } from '@maany_shr/e-class-ui-kit';
import { viewModels } from '@maany_shr/e-class-models';
import { useListOffersPagePackagesShortPresenter } from '../hooks/use-list-offers-page-packages-short-presenter';
import { useListPackagesPresenter } from '../hooks/use-list-packages-presenter';
import { useGetOffersPageOutlinePresenter } from '../hooks/use-get-offers-page-outline-presenter';
import { useHomePageFileUpload } from './common/hooks/use-homepage-file-upload';
import { useFormState } from 'packages/ui-kit/lib/hooks/use-form-state';
interface ManageOffersPageProps {
    locale: string;
    platformSlug: string;
    platformLocale: string;
}

export default function ManageOffersPage({
    locale: _locale,
    platformSlug,
    platformLocale,
}: ManageOffersPageProps) {
    const locale = useLocale() as TLocale;
    const t = useTranslations('pages.manageOffersPage');

    // All hooks must be called at the top level before any conditional returns
    const [_uploadProgress, setUploadProgress] = useState<number | undefined>(undefined);
    const [saveStatus, setSaveStatus] = useState<'idle' | 'success' | 'error'>('idle');
    const [offersPageViewModel, setOffersPageViewModel] = useState<
        viewModels.TOffersPageOutlineViewModel | undefined
    >(undefined);
    const [packagesViewModel, setPackagesViewModel] = useState<
        viewModels.TListPackagesViewModel | undefined
    >(undefined);
    const [packagesShortViewModel, setPackagesShortViewModel] = useState<
        viewModels.TListOffersPagePackagesShortViewModel | undefined
    >(undefined);

    // Defensive client-side auth check (middleware already enforces admin/superadmin)
    const sessionDTO = useSession();
    const session = sessionDTO.data;
    const isAdmin = session?.user?.roles?.includes('admin') || session?.user?.roles?.includes('superadmin');

    // TRPC queries for page data - using EXACT usecase names from Notion
    const [offersPageOutlineResponse] = trpc.getOffersPageOutline.useSuspenseQuery({});
    const [packagesShortResponse] = trpc.listOffersPagePackagesShort.useSuspenseQuery({});
    const [packagesResponse] = trpc.listPackages.useSuspenseQuery({});

    const { presenter: manageOffersPagePresenter } = useGetOffersPageOutlinePresenter(setOffersPageViewModel);
    const { presenter: packagesPresenter } = useListPackagesPresenter(setPackagesViewModel);
    const { presenter: packagesShortPresenter } = useListOffersPagePackagesShortPresenter(setPackagesShortViewModel);

    const { handleFileUpload, handleFileDelete, handleFileDownload } = useHomePageFileUpload(setUploadProgress);

    // Extract data from view models
    const offersPageData = offersPageViewModel?.mode === 'default' ? offersPageViewModel.data : null;
    const packagesData = packagesViewModel?.mode === 'default' ? packagesViewModel.data : null;
    const packagesShortData = packagesShortViewModel?.mode === 'default' ? packagesShortViewModel.data : null;

    type CarouselItem = {
        title: string;
        description: string;
        buttonText: string;
        imageUrl: string | null;
        buttonUrl: string;
        badge?: string;
    };
    type OffersPageFormData = {
        title: string;
        description: string;
        packageIds: number[];
        carousel: CarouselItem[];
    };

    const allPackages = (packagesData?.packages || []).map(pkg => ({ ...pkg, id: String(pkg.id) }));
    const linkedPackageIds = (packagesShortData?.packageIds || []).map(String);
    const initialPackageIds = allPackages.filter((pkg) =>
        pkg.id != null && linkedPackageIds.includes(String(pkg.id))
    ).map(pkg => Number(pkg.id));

    const initialFormData: OffersPageFormData = {
        title: offersPageData?.title || '',
        description: offersPageData?.description || '',
        packageIds: initialPackageIds,
        carousel: (offersPageData?.items || []).map(item => ({
            ...item,
            badge: item.badge ?? undefined,
        })),
    };

    const formState = useFormState(offersPageData && packagesData && packagesShortData ? initialFormData : null, { enableReloadProtection: true });

    const saveOffersPageMutation = trpc.saveOffersPage.useMutation({
        onMutate: () => {
            setSaveStatus('idle');
        },
        onSuccess: (data) => {
            if (data.success) {
                formState.markAsSaved();
                setSaveStatus('success');
            }
        },
        onError: (error) => {
            setSaveStatus('error');
        },
    });

    // @ts-ignore
    packagesPresenter.present(packagesResponse, packagesViewModel);
    // @ts-ignore
    manageOffersPagePresenter.present(offersPageOutlineResponse, offersPageViewModel);
    // @ts-ignore
    packagesShortPresenter.present(packagesShortResponse, packagesShortViewModel);

    // Now handle conditional rendering after all hooks are called
    if (offersPageViewModel?.mode === 'kaboom' || packagesViewModel?.mode === 'kaboom' || packagesShortViewModel?.mode === 'kaboom') {
        return (
            <DefaultError
                locale={locale}
                title={t('error.title')}
                description={t('error.description')}
            />
        );
    }
    // Defensive auth check on client side
    if (!session || !isAdmin) {
        return (
            <DefaultError
                locale={locale}
                title={t('error.unauthorized.title')}
                description={t('error.unauthorized.description')}
            />
        );
    }

    // Loading state (defensive check)
    if (!offersPageOutlineResponse || !packagesShortResponse) {
        return <DefaultLoading locale={locale} variant="minimal" />;
    }

    // Derive selected packages from form state
    // (moved below the loading guard to avoid accessing null formState.value)


    const handleSave = async () => {
        setSaveStatus('idle');

        const packageIdsAsNumbers = formState.value!.packageIds;

        const carouselForSave = formState.value!.carousel.map(item => ({
            title: item.title,
            description: item.description,
            buttonText: item.buttonText,
            buttonUrl: item.buttonUrl,
            badge: item.badge,
            imageId: item.imageUrl ? parseInt(item.imageUrl.split('/').pop() || '0', 10) : 0,
        }));

        await saveOffersPageMutation.mutateAsync({
            title: formState.value!.title,
            description: formState.value!.description,
            carousel: carouselForSave,
            packageIds: packageIdsAsNumbers,
        });

    };




    // Avoid mounting child sections until form is initialized, because they only consume initialValue on first mount
    if (!formState.value) {
        return <DefaultLoading locale={locale} variant="minimal" />;
    }

    // Safe to derive after ensuring formState.value exists
    const selectedPackages = allPackages.filter(pkg => formState.value!.packageIds.includes(Number(pkg.id)));
    const carouselItems = formState.value!.carousel;

    return (
        <div className="flex flex-col space-y-5">
            {/* Page header with translations */}
            <div className="flex justify-between items-start">
                <div className="flex-1">
                    <Outline
                        title={t('title')}
                        description={t('description')}
                    />
                </div>
                <div className="ml-4">
                    <Button
                        variant="primary"
                        size="medium"
                        text="Save Offers Page"
                        onClick={handleSave}
                        disabled={saveOffersPageMutation.isPending}
                    />
                </div>
            </div>

            {saveOffersPageMutation.isPending && (
                <Banner style="success" title="Saving offers page changes..." />
            )}
            {saveStatus === 'success' && (
                <Banner style="success" title="Offers page saved successfully!" />
            )}
            {saveStatus === 'error' && (
                <Banner style="error" title="Failed to save offers page" />
            )}

            {/* Page Title Section */}
            <PageTitleSection
                initialValue={{ title: formState.value.title, description: formState.value.description }}
                onChange={(newValue) => formState.setValue({ ...formState.value!, title: newValue.title, description: newValue.description })}
            />

            {/* Packages Section */}
            <PackageSection
                packages={allPackages}
                linkedPackages={selectedPackages}
                onChange={(newSelected) => {
                    const newPackageIds = newSelected.map((pkg: any) => Number(pkg.id));
                    formState.setValue({ ...formState.value!, packageIds: newPackageIds });
                }}
            />

            {/* Carousel Section */}
            <CarouselSection
                initialValue={carouselItems}
                onChange={(newCarousel) => formState.setValue({ ...formState.value!, carousel: newCarousel })}
                onFileUpload={handleFileUpload}
                onFileDelete={handleFileDelete}
                onFileDownload={handleFileDownload}
                uploadType='upload_offers_page_carousel_card_image'
            />

        </div>
    );
}

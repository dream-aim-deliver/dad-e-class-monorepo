'use client';

// Auto-generated by page-scaffold command v2
// Notion: https://www.notion.so/CMS-Manage-Offers-Page-22d5a7432d01809487b5f5592b2013f3
// Usecases: saveOffersPage, listPackages, requestFileUpload, getOffersPageOutline, listOffersPagePackagesShort
// User Types: CMS (admin/superadmin - enforced by middleware)
// Figma: https://www.figma.com/design/8KEwRuOoD5IgxTtFAtLlyS/Just_Do_Ad-1.2?node-id=8540-240257&t=qGirq2t6ka6iwg1A-4

import { useState } from 'react';
import { DefaultLoading, DefaultError, Outline, PageTitleSection, PackageSection, CarouselSection } from '@maany_shr/e-class-ui-kit';
import { useLocale, useTranslations } from 'next-intl';
import { TLocale } from '@maany_shr/e-class-translations';
import { trpc } from '../trpc/cms-client';
import { useSession } from 'next-auth/react';

import { Button } from '@maany_shr/e-class-ui-kit';
import { fileMetadata, viewModels } from '@maany_shr/e-class-models';
import { useListOffersPagePackagesShortPresenter } from '../hooks/use-list-offers-page-packages-short-presenter';
import { useListPackagesPresenter } from '../hooks/use-list-packages-presenter';
import { useofferPageFileUpload } from '../hooks/use-offer-file-upload';
import { useGetOffersPageOutlinePresenter } from '../hooks/use-get-offers-page-outline-presenter';
interface ManageOffersPageProps {
    locale: string;
    platformSlug: string;
    platformLocale: string;
}

export default function ManageOffersPage({
    locale: _locale,
    platformSlug,
    platformLocale,
}: ManageOffersPageProps) {
    const locale = useLocale() as TLocale;
    const t = useTranslations('pages.manageOffersPage');
    const [uploadProgress, setUploadProgress] = useState<number | undefined>(undefined);
    // Defensive client-side auth check (middleware already enforces admin/superadmin)
    const sessionDTO = useSession();
    const session = sessionDTO.data;
    const isAdmin = session?.user?.roles?.includes('admin') || session?.user?.roles?.includes('superadmin');

    // TRPC queries for page data - using EXACT usecase names from Notion
    const [offersPageOutlineResponse] = trpc.getOffersPageOutline.useSuspenseQuery({});
    const [packagesShortResponse] = trpc.listOffersPagePackagesShort.useSuspenseQuery({});
    const [packagesResponse] = trpc.listPackages.useSuspenseQuery({});

    const [offersPageViewModel, setOffersPageViewModel] = useState<
        viewModels.TOffersPageOutlineViewModel | undefined
    >(undefined);
    const [packagesViewModel, setPackagesViewModel] = useState<
        viewModels.TListPackagesViewModel | undefined
    >(undefined);
    const [packagesShortViewModel, setPackagesShortViewModel] = useState<
        viewModels.TListOffersPagePackagesShortViewModel | undefined
    >(undefined);

    const { presenter: manageOffersPagePresenter } = useGetOffersPageOutlinePresenter(setOffersPageViewModel);
    const { presenter: packagesPresenter } = useListPackagesPresenter(setPackagesViewModel);
    const { presenter: packagesShortPresenter } = useListOffersPagePackagesShortPresenter(setPackagesShortViewModel);

    
    if (offersPageOutlineResponse.success && (offersPageOutlineResponse.data as any)?.success) {
        manageOffersPagePresenter.present((offersPageOutlineResponse.data as any), offersPageViewModel);
    }
    if (packagesResponse.success && (packagesResponse.data as any)?.success) {
        packagesPresenter.present((packagesResponse.data as any), packagesViewModel);
    }
    if (packagesShortResponse.success && (packagesShortResponse.data as any)?.success) {
        packagesShortPresenter.present((packagesShortResponse.data as any), packagesShortViewModel);
    }

    const { handleFileUpload, handleFileDelete, handleFileDownload } = useofferPageFileUpload(setUploadProgress);
  if (offersPageViewModel?.mode === 'kaboom' || packagesViewModel?.mode === 'kaboom' || packagesShortViewModel?.mode === 'kaboom') {
        return (
            <DefaultError
                locale={locale}
                title={t('error.title')}
                description={t('error.description')}
            />
        );
    }
    // Defensive auth check on client side
    if (!session || !isAdmin) {
        return (
            <DefaultError
                locale={locale}
                title={t('error.unauthorized.title')}
                description={t('error.unauthorized.description')}
            />
        );
    }

    // Loading state (defensive check)
    if (!offersPageOutlineResponse || !packagesShortResponse) {
        return <DefaultLoading locale={locale} variant="minimal" />;
    }

    // Extract data from view models
    const offersPageData = offersPageViewModel?.mode === 'default' ? offersPageViewModel.data : null;
    const packagesData = packagesViewModel?.mode === 'default' ? packagesViewModel.data : null;
    const packagesShortData = packagesShortViewModel?.mode === 'default' ? packagesShortViewModel.data : null;

    // State for managing offers page data
    const [pageTitle, setPageTitle] = useState({
        title: (offersPageData as any)?.title || '',
        description: (offersPageData as any)?.description || '',
    });

    // Store selected packages (full objects)
    const allPackages = (packagesData as any)?.packages || [];
    const linkedPackageIds = ((packagesShortData as any)?.packageIds || []).map(String);
    const initialLinkedPackages = allPackages.filter((pkg: any) =>
        linkedPackageIds.includes(String(pkg.id))
    );

    const [selectedPackages, setSelectedPackages] = useState<any[]>(initialLinkedPackages);
    const [carouselItems, setCarouselItems] = useState((offersPageData as any)?.items || []);

    
    const saveOffersPageMutation = trpc.saveOffersPage.useMutation();

   
    const handleSave = async () => {
        try {
            
            const packageIdsAsNumbers = selectedPackages.map((pkg: any) => Number(pkg.id));

            await saveOffersPageMutation.mutateAsync({
                title: pageTitle.title,
                description: pageTitle.description,
                carousel: carouselItems,
                packageIds: packageIdsAsNumbers,
            });
            alert('Offers page saved successfully!');
        } catch (error) {
            console.error('Error saving offers page:', error);
            alert('Error saving offers page. Please try again.');
        }
    };

    
    
    

    return (
        <div className="flex flex-col space-y-5 px-30">
            {/* Page header with translations */}
            <Outline
                title={t('title')}
                description={t('description')}
            />

            {/* Page Title Section */}
            <PageTitleSection
                initialValue={pageTitle}
                onChange={setPageTitle}
            />

            {/* Packages Section */}
            <PackageSection
                packages={allPackages}
                linkedPackages={selectedPackages}
                onChange={setSelectedPackages}
            />

            {/* Carousel Section */}
            <CarouselSection
                initialValue={carouselItems}
                onChange={setCarouselItems}
                onFileUpload={handleFileUpload}
                onFileDelete={handleFileDelete}
                onFileDownload={handleFileDownload}
            />

            {/* Save Button */}
            <div className="flex justify-end">
                <Button
                    variant="primary"
                    size="medium"
                    text="Save Offers Page"
                    onClick={handleSave}
                    disabled={saveOffersPageMutation.isPending}
                />
            </div>

        </div>
    );
}

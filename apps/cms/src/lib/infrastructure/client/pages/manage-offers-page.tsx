'use client';

// Auto-generated by page-scaffold command v2
// Notion: https://www.notion.so/CMS-Manage-Offers-Page-22d5a7432d01809487b5f5592b2013f3
// Usecases: saveOffersPage, listPackages, requestFileUpload, getOffersPageOutline, listOffersPagePackagesShort
// User Types: CMS (admin/superadmin - enforced by middleware)
// Figma: https://www.figma.com/design/8KEwRuOoD5IgxTtFAtLlyS/Just_Do_Ad-1.2?node-id=8540-240257&t=qGirq2t6ka6iwg1A-4

import { useState } from 'react';
import { DefaultLoading, DefaultError, Outline } from '@maany_shr/e-class-ui-kit';
import { useLocale, useTranslations } from 'next-intl';
import { TLocale } from '@maany_shr/e-class-translations';
import { trpc } from '../trpc/cms-client';
import { useSession } from 'next-auth/react';

interface ManageOffersPageProps {
    locale: string;
    platformSlug: string;
    platformLocale: string;
}

export default function ManageOffersPage({
    locale: _locale,
    platformSlug,
    platformLocale,
}: ManageOffersPageProps) {
    const locale = useLocale() as TLocale;
    const t = useTranslations('pages.manageOffersPage');

    // Defensive client-side auth check (middleware already enforces admin/superadmin)
    const sessionDTO = useSession();
    const session = sessionDTO.data;
    const isAdmin = session?.user?.roles?.includes('admin') || session?.user?.roles?.includes('superadmin');

    // TRPC queries for page data - using EXACT usecase names from Notion
    const [offersPageOutlineResponse] = trpc.getOffersPageOutline.useSuspenseQuery({});
    const [packagesShortResponse] = trpc.listOffersPagePackagesShort.useSuspenseQuery({});

    // TODO: Add state management and presenter hooks when implementing
    // const [manageOffersPageViewModel, setManageOffersPageViewModel] = useState<TManageOffersPageViewModel | undefined>(undefined);
    // const { presenter } = useManageOffersPagePresenter(setManageOffersPageViewModel);

    // Defensive auth check on client side
    if (!session || !isAdmin) {
        return (
            <DefaultError
                locale={locale}
                title={t('error.unauthorized.title')}
                description={t('error.unauthorized.description')}
            />
        );
    }

    // Loading state (defensive check)
    if (!offersPageOutlineResponse || !packagesShortResponse) {
        return <DefaultLoading locale={locale} variant="minimal" />;
    }

    // TODO: Implement error handling with proper view model checks
    // Example error handling patterns from project:
    // if (viewModel.mode === 'kaboom') {
    //     const errorData = viewModel.data;
    //     console.error(errorData);
    //     return (
    //         <DefaultError
    //             locale={locale}
    //             title={t('error.title')}
    //             description={t('error.description')}
    //         />
    //     );
    // }

    return (
        <div className="flex flex-col space-y-5 px-30">
            {/* Page header with translations */}
            <Outline
                title={t('title')}
                description={t('description')}
            />

            {/* TODO: Implement page content based on Notion features */}
            {/* Usecases to integrate:
                - saveOffersPage: Save offers page configuration
                - listPackages: Display available packages
                - requestFileUpload: Handle file uploads for offers page
                - getOffersPageOutline: Display page outline (already fetched)
                - listOffersPagePackagesShort: Display package summaries (already fetched)
            */}

            {/* TODO: Add UI components for:
                - Offers page editor
                - Package selection/display
                - File upload for images/media
                - Save/publish controls
            */}

            <div className="text-gray-500">
                <p>Platform: {platformSlug}</p>
                <p>Locale: {platformLocale}</p>
                <p>Implementation in progress...</p>
            </div>
        </div>
    );
}

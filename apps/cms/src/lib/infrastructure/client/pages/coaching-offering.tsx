'use client';

// Auto-generated by page-scaffold command
// Notion: https://www.notion.so/CMS-Coaching-Offering-8867dde6ea234a6898dd28783eed06ed
// Features: listCoachingOfferings, createCoachingOffering, updateCoachingOffering, deleteCoachingOffering
// API Endpoints: TODO: Define CMS API endpoints
// User Types: CMS
// Figma: https://www.figma.com/design/8KEwRuOoD5IgxTtFAtLlyS/Just_Do_Ad-1.2?node-id=6913-328945&t=YcD6rAFmbgKrxm0Y-4

import { useEffect, useState } from 'react';
import { trpc } from '../trpc/cms-client';
import { useLocale, useTranslations } from 'next-intl';
import { TLocale } from '@maany_shr/e-class-translations';
import { useRouter } from 'next/navigation';
import {
    DefaultLoading,
    DefaultError,
    ManageCoachingOfferingList,
    ManageCoachingOfferingItem,
    Badge,
    Button,
    CoachingOfferingModal,
    Dialog,
    DialogContent,
    DialogTrigger,
    useDialog,
    DeleteConfirmationModal,
    Breadcrumbs,
} from '@maany_shr/e-class-ui-kit';
import { viewModels } from '@maany_shr/e-class-models';
import { useListCoachingOfferingsPresenter } from '../hooks/use-coaching-offerings-presenter';
import { useCreateCoachingOfferingPresenter } from '../hooks/use-create-coaching-offering-presenter';
import { useUpdateCoachingOfferingPresenter } from '../hooks/use-update-coaching-offering-presenter';
import { useDeleteCoachingOfferingPresenter } from '../hooks/use-delete-coaching-offering-presenter';
import { useRequiredPlatformLocale } from '../context/platform-locale-context';
import { useContentLocale } from '../hooks/use-platform-translations';

interface CoachingOfferingProps {
    locale: string;
    platformSlug: string;
    language: string;
}

function CreateCoachingOfferingDialogContent({
    onSuccess,
}: {
    onSuccess: () => void;
}) {
    const locale = useLocale() as TLocale;
    const { setIsOpen } = useDialog();

    const [createCoachingOfferingViewModel, setCreateCoachingOfferingViewModel] = useState<
        viewModels.TCreateCoachingOfferingViewModel | undefined
    >(undefined);
    const { presenter } = useCreateCoachingOfferingPresenter(setCreateCoachingOfferingViewModel);

    const createCoachingOfferingMutation = trpc.createCoachingOffering.useMutation();

    useEffect(() => {
        if (createCoachingOfferingMutation.isSuccess && createCoachingOfferingMutation.data) {
            // @ts-ignore
            presenter.present(createCoachingOfferingMutation.data, createCoachingOfferingViewModel);
        }
    }, [createCoachingOfferingMutation.isSuccess, createCoachingOfferingMutation.data, presenter, createCoachingOfferingViewModel]);

    useEffect(() => {
        if (createCoachingOfferingViewModel?.mode === 'default') {
            onSuccess();
            setIsOpen(false);
        }
    }, [createCoachingOfferingViewModel, onSuccess, setIsOpen]);

    const handleSave = (data: {
        title: string;
        description: string;
        duration: string;
        price: string;
    }) => {
        createCoachingOfferingMutation.mutate({
            title: data.title,
            description: data.description,
            duration: parseInt(data.duration),
            price: parseFloat(data.price),
            state: 'draft',
        });
    };

    return (
        <div className="p-6">
            <CoachingOfferingModal
                locale={locale}
                mode="create"
                onSave={handleSave}
                onClose={() => setIsOpen(false)}
            />
            {createCoachingOfferingViewModel?.mode === 'invalid' && (
                <div className="text-red-500 mt-2">
                    {createCoachingOfferingViewModel.data.message}
                </div>
            )}
            {createCoachingOfferingViewModel?.mode === 'kaboom' && (
                <div className="text-red-500 mt-2">
                    {createCoachingOfferingViewModel.data.message}
                </div>
            )}
        </div>
    );
}

function EditCoachingOfferingDialogContent({
    offering,
    onSuccess,
    onDelete,
}: {
    offering: {
        id: string | number;
        name: string;
        description: string;
        duration: number;
        price: number;
        currency: string;
    };
    onSuccess: () => void;
    onDelete: () => void;
}) {
    const locale = useLocale() as TLocale;
    const { setIsOpen } = useDialog();

    const [updateCoachingOfferingViewModel, setUpdateCoachingOfferingViewModel] = useState<
        viewModels.TUpdateCoachingOfferingViewModel | undefined
    >(undefined);
    const { presenter: updatePresenter } =
        useUpdateCoachingOfferingPresenter(setUpdateCoachingOfferingViewModel);

    const [deleteCoachingOfferingViewModel, setDeleteCoachingOfferingViewModel] = useState<
        viewModels.TDeleteCoachingOfferingViewModel | undefined
    >(undefined);
    const { presenter: deletePresenter } =
        useDeleteCoachingOfferingPresenter(setDeleteCoachingOfferingViewModel);

    const updateCoachingOfferingMutation = trpc.updateCoachingOffering.useMutation();
    const deleteCoachingOfferingMutation = trpc.deleteCoachingOffering.useMutation();

    useEffect(() => {
        if (updateCoachingOfferingMutation.isSuccess && updateCoachingOfferingMutation.data) {
            // @ts-ignore
            updatePresenter.present(updateCoachingOfferingMutation.data, updateCoachingOfferingViewModel);
        }
    }, [
        updateCoachingOfferingMutation.isSuccess,
        updateCoachingOfferingMutation.data,
        updatePresenter,
        updateCoachingOfferingViewModel,
    ]);

    useEffect(() => {
        if (deleteCoachingOfferingMutation.isSuccess && deleteCoachingOfferingMutation.data) {
            // @ts-ignore
            deletePresenter.present(deleteCoachingOfferingMutation.data, deleteCoachingOfferingViewModel);
        }
    }, [
        deleteCoachingOfferingMutation.isSuccess,
        deleteCoachingOfferingMutation.data,
        deletePresenter,
        deleteCoachingOfferingViewModel,
    ]);

    useEffect(() => {
        if (updateCoachingOfferingViewModel?.mode === 'default') {
            onSuccess();
            setIsOpen(false);
        }
    }, [updateCoachingOfferingViewModel, onSuccess, setIsOpen]);

    useEffect(() => {
        if (deleteCoachingOfferingViewModel?.mode === 'default') {
            onDelete();
            setIsOpen(false);
        }
    }, [deleteCoachingOfferingViewModel, onDelete, setIsOpen]);

    const handleSave = (data: {
        title: string;
        description: string;
        duration: string;
        price: string;
    }) => {
        updateCoachingOfferingMutation.mutate({
            id: typeof offering.id === 'string' ? parseInt(offering.id) : offering.id,
            title: data.title,
            description: data.description,
            duration: parseInt(data.duration),
            price: parseFloat(data.price),
        });
    };

    const handleDelete = () => {
        deleteCoachingOfferingMutation.mutate({
            coachingOfferingId: typeof offering.id === 'string' ? parseInt(offering.id) : offering.id,
        });
    };

    return (
        <div className="p-6">
            <CoachingOfferingModal
                locale={locale}
                mode="edit"
                initialValue={{
                    title: offering.name,
                    description: offering.description,
                    duration: offering.duration.toString(),
                    price: `${offering.price} ${offering.currency}`,
                }}
                onSave={handleSave}
                onDelete={handleDelete}
                onClose={() => setIsOpen(false)}
            />
            {updateCoachingOfferingViewModel?.mode === 'invalid' && (
                <div className="text-red-500 mt-2">
                    {updateCoachingOfferingViewModel.data.message}
                </div>
            )}
            {updateCoachingOfferingViewModel?.mode === 'kaboom' && (
                <div className="text-red-500 mt-2">
                    {updateCoachingOfferingViewModel.data.message}
                </div>
            )}
            {deleteCoachingOfferingViewModel?.mode === 'invalid' && (
                <div className="text-red-500 mt-2">
                    {deleteCoachingOfferingViewModel.data.message}
                </div>
            )}
            {deleteCoachingOfferingViewModel?.mode === 'kaboom' && (
                <div className="text-red-500 mt-2">
                    {deleteCoachingOfferingViewModel.data.message}
                </div>
            )}
        </div>
    );
}

function CreateCoachingOfferingDialog({
    onOfferingCreated,
}: {
    onOfferingCreated: () => void;
}) {
    const t = useTranslations('pages.coachingOffering');

    return (
        <Dialog
            open={undefined}
            onOpenChange={() => {
                // This function is called when the dialog is opened or closed
            }}
            defaultOpen={false}
        >
            <DialogTrigger asChild>
                <Button text={t('newCoachingOffering')} />
            </DialogTrigger>
            <DialogContent showCloseButton closeOnOverlayClick closeOnEscape>
                <CreateCoachingOfferingDialogContent
                    onSuccess={onOfferingCreated}
                />
            </DialogContent>
        </Dialog>
    );
}

export default function CoachingOffering({
    locale: localeString,
    platformSlug,
    language,
}: CoachingOfferingProps) {
    const locale = useLocale() as TLocale;
    const router = useRouter();
    const t = useTranslations('pages.coachingOffering');
    const breadcrumbsTranslations = useTranslations('components.breadcrumbs');

    // Platform context - contains platform-specific information
    const platformContext = useRequiredPlatformLocale();

    // Content locale - the locale for platform content (may differ from app UI locale)
    const contentLocale = useContentLocale();

    // List coaching offerings - fetch data
    const [coachingOfferingsResponse, { refetch: refetchOfferings }] =
        trpc.listCoachingOfferings.useSuspenseQuery({});

    // View models
    const [listViewModel, setListViewModel] = useState<
        viewModels.TCoachingOfferingListViewModel | undefined
    >(undefined);

    // Presenters
    const { presenter } = useListCoachingOfferingsPresenter(setListViewModel);

    // State for edit modal
    const [isEditModalOpen, setIsEditModalOpen] = useState(false);
    const [selectedOffering, setSelectedOffering] = useState<{
        id: string | number;
        name: string;
        description: string;
        duration: number;
        price: number;
        currency: string;
    } | null>(null);

    // State for delete confirmation modal
    const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
    const [deleteOfferingId, setDeleteOfferingId] = useState<
        string | number | null
    >(null);

    const deleteCoachingOfferingMutation = trpc.deleteCoachingOffering.useMutation();

    // @ts-ignore
    presenter.present(coachingOfferingsResponse, listViewModel)

    // Loading state
    if (!listViewModel) {
        return <DefaultLoading locale={locale} variant="minimal" />;
    }

    // Error handling
    if (listViewModel.mode === 'kaboom') {
        return (
            <DefaultError
                locale={locale}
                onRetry={() => {
                    refetchOfferings();
                }}
            />
        );
    }

    if (listViewModel.mode === 'not-found') {
        return <DefaultError locale={locale} />;
    }

    // Success state - extract data
    const offerings = listViewModel.data.offerings;

    // Handler to open edit modal
    const handleOpenEditModal = (offering: (typeof offerings)[0]) => {
        setSelectedOffering(offering);
        setIsEditModalOpen(true);
    };

    // Handler to close edit modal
    const handleCloseEditModal = () => {
        setIsEditModalOpen(false);
        setSelectedOffering(null);
    };

    // Handler after successful edit
    const handleEditSuccess = () => {
        refetchOfferings();
        handleCloseEditModal();
    };

    // Handler to open delete confirmation modal
    const handleOpenDeleteModal = (offeringId: string | number) => {
        setDeleteOfferingId(offeringId);
        setIsDeleteModalOpen(true);
    };

    // Handler to close delete confirmation modal
    const handleCloseDeleteModal = () => {
        setIsDeleteModalOpen(false);
        setDeleteOfferingId(null);
    };

    // Handler to confirm deletion
    const handleConfirmDelete = async () => {
        if (!deleteOfferingId) return;

        try {
            await deleteCoachingOfferingMutation.mutateAsync({
                coachingOfferingId: typeof deleteOfferingId === 'string' ? parseInt(deleteOfferingId) : deleteOfferingId,
            });
            // Refresh the offerings list
            refetchOfferings();
        } catch (error) {
            // Error handling - mutation error is handled by the mutation itself
            console.error('Failed to delete coaching offering:', error);
        } finally {
            handleCloseDeleteModal();
        }
    };

    const breadcrumbItems = [
        {
            label: breadcrumbsTranslations('platforms'),
            onClick: () => router.push('/'),
        },
        {
            label: platformContext.platformSlug.charAt(0).toUpperCase() + platformContext.platformSlug.slice(1),
            onClick: () => {
                // TODO: Implement navigation to platform
            },
        },
        {
            label: breadcrumbsTranslations('coachingOfferings'),
            onClick: () => {
                // Nothing should happen on clicking the current page
            },
        },
    ];

    return (
        <div className="flex flex-col space-y-2 bg-card-fill p-5 border border-card-stroke rounded-medium gap-4">
            <Breadcrumbs items={breadcrumbItems} />

            <div className="flex flex-col space-y-2">
                <div className="flex flex-col space-y-4 sm:space-y-0 sm:flex-row sm:justify-between sm:items-center">
                    <div className="flex flex-row items-center gap-3">
                        <h1>{t('title')}</h1>
                        <Badge
                            variant="info"
                            size="medium"
                            text={offerings.length.toString()}
                        />
                    </div>
                    <CreateCoachingOfferingDialog
                        onOfferingCreated={() => refetchOfferings()}
                    />
                </div>
                <p className="text-text-secondary text-sm">
                    Platform: {platformContext.platformSlug} | Content Language: {contentLocale.toUpperCase()}
                </p>
            </div>

            <div className="flex flex-col items-start gap-6">
                <ManageCoachingOfferingList locale={locale}>
                    {offerings.map((offering) => (
                        <ManageCoachingOfferingItem
                            key={offering.id}
                            title={offering.name}
                            description={offering.description}
                            durationMinutes={offering.duration}
                            price={`${offering.price} ${offering.currency}`}
                            locale={locale}
                            onEdit={() => handleOpenEditModal(offering)}
                            onDelete={() => handleOpenDeleteModal(offering.id)}
                        />
                    ))}
                </ManageCoachingOfferingList>
            </div>

            {/* Edit Coaching Offering Modal */}
            {isEditModalOpen && selectedOffering && (
                <Dialog
                    open={isEditModalOpen}
                    onOpenChange={setIsEditModalOpen}
                    defaultOpen={false}
                >
                    <DialogContent
                        showCloseButton
                        closeOnOverlayClick
                        closeOnEscape
                    >
                        <EditCoachingOfferingDialogContent
                            offering={selectedOffering}
                            onSuccess={handleEditSuccess}
                            onDelete={() => {
                                handleCloseEditModal();
                                handleOpenDeleteModal(selectedOffering.id);
                            }}
                        />
                    </DialogContent>
                </Dialog>
            )}

            {/* Delete Confirmation Modal */}
            {isDeleteModalOpen && (
                <div className="fixed inset-0 flex items-center justify-center z-50 backdrop-blur-sm rounded-lg shadow-lg">
                    <DeleteConfirmationModal
                        locale={locale}
                        title={t('deleteCoachingOffering')}
                        message={t('descriptionDeleteCoaching')}
                        onClose={handleCloseDeleteModal}
                        onDelete={handleConfirmDelete}
                    />
                </div>
            )}
        </div>
    );
}

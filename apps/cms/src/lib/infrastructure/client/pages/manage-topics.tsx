'use client';

// Auto-generated by page-scaffold command
// Notion: https://www.notion.so/CMS-Manage-Topics-13a5a7432d0180078589efbb54a14f5b
// Features: createTopic, and 3 other features
// User Types: CMS
// Figma: https://www.figma.com/design/8KEwRuOoD5IgxTtFAtLlyS/Just_Do_Ad-1.2?node-id=6055-109625&t=GjW3V89mle6BrGgh-4

import { trpc } from '../trpc/cms-client';
import { useLocale, useTranslations } from 'next-intl';
import {
    Breadcrumbs,
    DefaultError,
    DefaultLoading,
    DefaultNotFound,
    ManageCategoryTopicList,
    ManageCategoryTopicItem,
    Badge,
    Button,
    CreateEditCategoryTopicModal,
    Dialog,
    DialogContent,
    DialogTrigger,
    useDialog,
    DeleteConfirmationModal,
} from '@maany_shr/e-class-ui-kit';
import { TLocale } from '@maany_shr/e-class-translations';
import { viewModels } from '@maany_shr/e-class-models';
import { useState, useEffect } from 'react';
import { useListTopicsPresenter } from '../hooks/use-topics-presenter';
import { useCreateTopicPresenter } from '../hooks/use-create-topic-presenter';
import { useUpdateTopicPresenter } from '../hooks/use-update-topic-presenter';
import { useDeleteTopicPresenter } from '../hooks/use-delete-topic-presenter';
import { useRequiredPlatformLocale } from '../context/platform-locale-context';
import { useRequiredPlatform } from '../context/platform-context';
import { useContentLocale } from '../hooks/use-platform-translations';
import { useRouter } from 'next/navigation';

interface ManageTopicsProps {
    platformSlug: string;
    platformLocale: string;
    topicsWithCourseCount?: Array<{ topicId: number; coursesCount: number }>;
}

function CreateTopicDialogContent({ onSuccess }: { onSuccess: () => void }) {
    const locale = useLocale() as TLocale;
    const { setIsOpen } = useDialog();

    const [createTopicViewModel, setCreateTopicViewModel] = useState<
        viewModels.TCreateTopicViewModel | undefined
    >(undefined);
    const { presenter } = useCreateTopicPresenter(setCreateTopicViewModel);

    const createTopicMutation = trpc.createTopic.useMutation();

    useEffect(() => {
        if (createTopicMutation.isSuccess && createTopicMutation.data) {
            // @ts-ignore
            presenter.present(createTopicMutation.data, createTopicViewModel);
        }
    }, [createTopicMutation.isSuccess, createTopicMutation.data, presenter, createTopicViewModel]);

    useEffect(() => {
        if (createTopicViewModel?.mode === 'default') {
            onSuccess();
            setIsOpen(false);
        }
    }, [createTopicViewModel, onSuccess, setIsOpen]);

    const handleSave = (name: string) => {
        // Generate a slug from the name
        const slug = name
            .toLowerCase()
            .trim()
            .replace(/[^\w\s-]/g, '')
            .replace(/[\s_-]+/g, '-')
            .replace(/^-+|-+$/g, '');

        createTopicMutation.mutate({
            name,
            slug,
            state: 'draft',
        });
    };

    return (
        <div className="p-6">
            <CreateEditCategoryTopicModal
                locale={locale}
                mode="create"
                type="topic"
                onSave={handleSave}
                onClose={() => setIsOpen(false)}
            />
            {createTopicViewModel?.mode === 'invalid' && (
                <div className="text-red-500 mt-2">
                    {createTopicViewModel.data.message}
                </div>
            )}
            {createTopicViewModel?.mode === 'kaboom' && (
                <div className="text-red-500 mt-2">
                    {createTopicViewModel.data.message}
                </div>
            )}
        </div>
    );
}

function EditTopicDialogContent({
    topic,
    onSuccess,
    onDelete,
}: {
    topic: { id: number; name: string; slug: string };
    onSuccess: () => void;
    onDelete: () => void;
}) {
    const locale = useLocale() as TLocale;
    const { setIsOpen } = useDialog();

    const [updateTopicViewModel, setUpdateTopicViewModel] = useState<
        viewModels.TUpdateTopicViewModel | undefined
    >(undefined);
    const { presenter: updatePresenter } =
        useUpdateTopicPresenter(setUpdateTopicViewModel);

    const [deleteTopicViewModel, setDeleteTopicViewModel] = useState<
        viewModels.TDeleteTopicViewModel | undefined
    >(undefined);
    const { presenter: deletePresenter } =
        useDeleteTopicPresenter(setDeleteTopicViewModel);

    const updateTopicMutation = trpc.updateTopic.useMutation();
    const deleteTopicMutation = trpc.deleteTopic.useMutation();

    useEffect(() => {
        if (updateTopicMutation.isSuccess && updateTopicMutation.data) {
            // @ts-ignore
            updatePresenter.present(updateTopicMutation.data, updateTopicViewModel);
        }
    }, [
        updateTopicMutation.isSuccess,
        updateTopicMutation.data,
        updatePresenter,
        updateTopicViewModel,
    ]);

    useEffect(() => {
        if (deleteTopicMutation.isSuccess && deleteTopicMutation.data) {
            // @ts-ignore
            deletePresenter.present(deleteTopicMutation.data, deleteTopicViewModel);
        }
    }, [
        deleteTopicMutation.isSuccess,
        deleteTopicMutation.data,
        deletePresenter,
        deleteTopicViewModel,
    ]);

    useEffect(() => {
        if (updateTopicViewModel?.mode === 'default') {
            onSuccess();
            setIsOpen(false);
        }
    }, [updateTopicViewModel, onSuccess, setIsOpen]);

    useEffect(() => {
        if (deleteTopicViewModel?.mode === 'default') {
            onDelete();
            setIsOpen(false);
        }
    }, [deleteTopicViewModel, onDelete, setIsOpen]);

    const handleSave = (name: string) => {
        // Generate a slug from the name
        const slug = name
            .toLowerCase()
            .trim()
            .replace(/[^\w\s-]/g, '')
            .replace(/[\s_-]+/g, '-')
            .replace(/^-+|-+$/g, '');

        updateTopicMutation.mutate({
            topicId: topic.id,
            name,
            slug,
        });
    };

    const handleDelete = () => {
        deleteTopicMutation.mutate({
            topicId: topic.id,
        });
    };

    return (
        <div className="p-6">
            <CreateEditCategoryTopicModal
                locale={locale}
                mode="edit"
                type="topic"
                initialValue={topic.name}
                onSave={handleSave}
                onDelete={handleDelete}
                onClose={() => setIsOpen(false)}
            />
            {updateTopicViewModel?.mode === 'invalid' && (
                <div className="text-red-500 mt-2">
                    {updateTopicViewModel.data.message}
                </div>
            )}
            {updateTopicViewModel?.mode === 'kaboom' && (
                <div className="text-red-500 mt-2">
                    {updateTopicViewModel.data.message}
                </div>
            )}
            {deleteTopicViewModel?.mode === 'invalid' && (
                <div className="text-red-500 mt-2">
                    {deleteTopicViewModel.data.message}
                </div>
            )}
            {deleteTopicViewModel?.mode === 'kaboom' && (
                <div className="text-red-500 mt-2">
                    {deleteTopicViewModel.data.message}
                </div>
            )}
        </div>
    );
}

function CreateTopicDialog({ onTopicCreated }: { onTopicCreated: () => void }) {
    const t = useTranslations('pages.manageTopics');

    return (
        <Dialog
            open={undefined}
            onOpenChange={() => {
                // This function is called when the dialog is opened or closed
            }}
            defaultOpen={false}
        >
            <DialogTrigger asChild>
                <Button text={t('createTopic')} />
            </DialogTrigger>
            <DialogContent showCloseButton closeOnOverlayClick closeOnEscape>
                <CreateTopicDialogContent onSuccess={onTopicCreated} />
            </DialogContent>
        </Dialog>
    );
}

export default function ManageTopics({
    platformSlug,
    platformLocale,
    topicsWithCourseCount = [],
}: ManageTopicsProps) {
    // App locale - used for UI elements (buttons, labels, etc.)
    const appLocale = useLocale() as TLocale;
    const breadcrumbsTranslations = useTranslations('components.breadcrumbs');
    const t = useTranslations('pages.manageTopics');

    // Router hook - must be called before any conditional returns
    const router = useRouter();

    // Platform context - contains platform-specific information
    const platformContext = useRequiredPlatformLocale();

    // Platform data - contains platform name, logo, etc.
    const { platform } = useRequiredPlatform();

    // Content locale - the locale for platform content (may differ from app UI locale)
    const contentLocale = useContentLocale();

    // TODO: Add TRPC query for topics data
    const [topicsResponse, { refetch: refetchTopics }] =
        trpc.listTopics.useSuspenseQuery({
            withCounts: true
        });

    const [topicsViewModel, setTopicsViewModel] = useState<
        viewModels.TTopicListViewModel | undefined
    >(undefined);

    const { presenter } = useListTopicsPresenter(setTopicsViewModel);

    // State for edit modal
    const [isEditModalOpen, setIsEditModalOpen] = useState(false);
    const [selectedTopic, setSelectedTopic] = useState<{
        id: number;
        name: string;
        slug: string;
    } | null>(null);

    // State for delete confirmation modal
    const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
    const [deleteTopicId, setDeleteTopicId] = useState<number | null>(null);

    const deleteTopicMutation = trpc.deleteTopic.useMutation();

    // Present the data
    // @ts-ignore
    presenter.present(topicsResponse, topicsViewModel);

    // Loading state using discovered patterns
    if (!topicsViewModel) {
        return <DefaultLoading locale={appLocale} variant="minimal" />;
    }

    // Error handling using discovered project patterns
    if (topicsViewModel.mode === 'kaboom') {
        return (
            <DefaultError
                locale={appLocale}
                onRetry={() => {
                    refetchTopics();
                }}
            />
        );
    }

    // Success state - extract data using discovered pattern
    const topics = topicsViewModel.data.topics;

    // Handler to open edit modal
    const handleOpenEditModal = (topic: { id: number; name: string; slug: string }) => {
        setSelectedTopic(topic);
        setIsEditModalOpen(true);
    };

    // Handler to close edit modal
    const handleCloseEditModal = () => {
        setIsEditModalOpen(false);
        setSelectedTopic(null);
    };

    // Handler after successful edit
    const handleEditSuccess = () => {
        refetchTopics();
        handleCloseEditModal();
    };

    // Handler to open delete confirmation modal
    const handleOpenDeleteModal = (topicId: number) => {
        setDeleteTopicId(topicId);
        setIsDeleteModalOpen(true);
    };

    // Handler to close delete confirmation modal
    const handleCloseDeleteModal = () => {
        setIsDeleteModalOpen(false);
        setDeleteTopicId(null);
    };

    // Handler to confirm deletion
    const handleConfirmDelete = async () => {
        if (!deleteTopicId) return;

        try {
            await deleteTopicMutation.mutateAsync({
                topicId: deleteTopicId,
            });
            // Refresh the topics list
            refetchTopics();
        } catch (error) {
            // Error handling - mutation error is handled by the mutation itself
            console.error('Failed to delete topic:', error);
        } finally {
            handleCloseDeleteModal();
        }
    };

    const breadcrumbItems = [
        {
            label: breadcrumbsTranslations('platforms'),
            onClick: () => router.push('/'),
        },
        {
            label: platform.name,
            onClick: () => {
                router.push(`/platform/${platformSlug}/${platformLocale}`);
            },
        },
        {
            label: breadcrumbsTranslations('topics'),
            onClick: () => {
                // Nothing should happen on clicking the current page
            },
        },
    ];

    return (
        <div className="flex flex-col space-y-2 bg-card-fill p-5 border border-card-stroke rounded-medium gap-4">
            <Breadcrumbs items={breadcrumbItems} />

            <div className="flex flex-col space-y-2">
                <div className="flex flex-col space-y-4 sm:space-y-0 sm:flex-row sm:justify-between sm:items-center">
                    <div className="flex flex-row items-center gap-3">
                        <h1> {t('title')} </h1>
                        <Badge
                            variant="info"
                            size="medium"
                            text={topics.length.toString()}
                        />
                    </div>
                    {topics.length < 25 ? (
                    <CreateTopicDialog onTopicCreated={() => refetchTopics()} />
                    ) : (
                        <Button
                        text={t('createTopic')}
                        disabled
                        />
                    )}
                </div>
                <p className="text-text-secondary text-sm">
                    Platform: {platform.name} | Content Language: {contentLocale.toUpperCase()}
                </p>
            </div>

            <p className="text-text-primary"> {t('description')} </p>

            <div className="flex flex-col items-start gap-6">

                <ManageCategoryTopicList locale={appLocale}>
                    {topics.map((topic) => {
                        // Get counts from view model
                        const courseCount = 'courseCount' in topic ? topic.courseCount ?? 0 : 0;
                        const coachCount = 'coachCount' in topic ? topic.coachCount ?? 0 : 0;

                        return (
                            <ManageCategoryTopicItem
                                key={topic.id}
                                title={topic.name}
                                coursesCount={courseCount}
                                coachesCount={coachCount}
                                type="topic"
                                locale={appLocale}
                                onEdit={() => handleOpenEditModal(topic)}
                                onDelete={() => handleOpenDeleteModal(topic.id)}
                            />
                        );
                    })}
                </ManageCategoryTopicList>
            </div>

            {/* Edit Topic Modal */}
            {isEditModalOpen && selectedTopic && (
                <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen} defaultOpen={false}>
                    <DialogContent showCloseButton closeOnOverlayClick closeOnEscape>
                        <EditTopicDialogContent
                            topic={selectedTopic}
                            onSuccess={handleEditSuccess}
                            onDelete={() => {
                                handleCloseEditModal();
                                handleOpenDeleteModal(selectedTopic.id);
                            }}
                        />
                    </DialogContent>
                </Dialog>
            )}

            {/* Delete Confirmation Modal */}
            {isDeleteModalOpen && (
                <div className="fixed inset-0 flex items-center justify-center z-50 backdrop-blur-sm rounded-lg shadow-lg">
                    <DeleteConfirmationModal
                        locale={appLocale}
                        title={t('deleteTopicConfirmation')}
                        onClose={handleCloseDeleteModal}
                        onDelete={handleConfirmDelete}
                    />
                </div>
            )}
        </div>
    );
}

'use client';

// Auto-generated by page-scaffold command
// Notion: https://www.notion.so/CMS-Manage-Topics-13a5a7432d0180078589efbb54a14f5b
// Features: createTopic, and 3 other features
// User Types: CMS
// Figma: https://www.figma.com/design/8KEwRuOoD5IgxTtFAtLlyS/Just_Do_Ad-1.2?node-id=6055-109625&t=GjW3V89mle6BrGgh-4

import { trpc } from '../trpc/cms-client';
import { useLocale, useTranslations } from 'next-intl';
import {
    Breadcrumbs,
    DefaultError,
    DefaultLoading,
    DefaultNotFound,
} from '@maany_shr/e-class-ui-kit';
import { TLocale } from '@maany_shr/e-class-translations';
import { viewModels } from '@maany_shr/e-class-models';
import { useState } from 'react';
import { useListTopicsPresenter } from '../hooks/use-topics-presenter';
import { useRequiredPlatformLocale } from '../context/platform-locale-context';
import { useContentLocale } from '../hooks/use-platform-translations';
import { useRouter } from 'next/navigation';

interface ManageTopicsProps {
    platformSlug: string;
    platformLocale: string;
    platformName: string;
}

export default function ManageTopics({
    platformSlug,
    platformLocale,
    platformName,
}: ManageTopicsProps) {
    // App locale - used for UI elements (buttons, labels, etc.)
    const appLocale = useLocale() as TLocale;
    const breadcrumbsTranslations = useTranslations('components.breadcrumbs');
    const t = useTranslations('pages.manageTopics');

    // Platform context - contains platform-specific information
    const platformContext = useRequiredPlatformLocale();

    // Content locale - the locale for platform content (may differ from app UI locale)
    const contentLocale = useContentLocale();

    // TODO: Add TRPC query for topics data
    const [topicsResponse, { refetch: refetchTopics }] =
        trpc.listTopics.useSuspenseQuery({});

    const [topicsViewModel, setTopicsViewModel] = useState<
        viewModels.TTopicListViewModel | undefined
    >(undefined);

    const { presenter } = useListTopicsPresenter(setTopicsViewModel);

    // Present the data
    // @ts-ignore
    presenter.present(topicsResponse, topicsViewModel);

    // Loading state using discovered patterns
    if (!topicsViewModel) {
        return <DefaultLoading locale={appLocale} variant="minimal" />;
    }

    // Error handling using discovered project patterns
    if (topicsViewModel.mode === 'kaboom') {
        return (
            <DefaultError
                locale={appLocale}
                onRetry={() => {
                    refetchTopics();
                }}
            />
        );
    }

    // Success state - extract data using discovered pattern
    const topics = topicsViewModel.data.topics;
    const router = useRouter();

    const breadcrumbItems = [
        {
            label: breadcrumbsTranslations('home'),
            onClick: () => router.push('/'),
        },
        {
            label: platformName,
            onClick: () => {
                // TODO: Implement navigation to platform
            },
        },
        {
            label: breadcrumbsTranslations('topics'),
            onClick: () => {
                // Nothing should happen on clicking the current page
            },
        },
    ];

    return (
        <div className="flex flex-col space-y-2">
            <Breadcrumbs items={breadcrumbItems} />
            <div>
            <h1> {t('title')} </h1>
            <p className='text-text-primary'> {t('description')} </p>
            </div>
        </div>
    );
}

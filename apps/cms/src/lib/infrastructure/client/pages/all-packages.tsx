'use client';

// Auto-generated by page-scaffold command
// Notion: https://www.notion.so/CMS-All-Packages-Manage-Packages-13a5a7432d01809c9917d80fe8f7b644
// Usecases: listPackages (FEAT-164), archivePackage (FEAT-165)
// User Type: CMS
// Figma: https://www.figma.com/design/8KEwRuOoD5IgxTtFAtLlyS/Just_Do_Ad-1.2?node-id=6400-219054

import { viewModels } from '@maany_shr/e-class-models';
import { trpc } from '../trpc/cms-client';
// TODO: Create presenter hook
// import { useListPackagesPresenter } from '../hooks/use-list-packages-presenter';
import { useState } from 'react';
import { TLocale } from '@maany_shr/e-class-translations';
import { useLocale, useTranslations } from 'next-intl';
import { useRouter } from 'next/navigation';
import { DefaultLoading, DefaultError, DefaultNotFound, Outline } from '@maany_shr/e-class-ui-kit';

interface AllPackagesProps {
  locale: TLocale;
  platformSlug: string;
  platformLocale: string;
}

export default function AllPackages({ locale, platformSlug, platformLocale }: AllPackagesProps) {
  const currentLocale = useLocale() as TLocale;
  const router = useRouter();
  const t = useTranslations('pages.allPackages');

  // TODO: Add TRPC query for listPackages usecase (FEAT-164)
  // const [listPackagesResponse] = trpc.listPackages.useSuspenseQuery({
  //   platformSlug,
  //   platformLocale,
  // });

  const [listPackagesViewModel, setListPackagesViewModel] = useState<
    viewModels.TListPackagesViewModel | undefined
  >(undefined);

  // TODO: Create useListPackagesPresenter hook
  // const { presenter } = useListPackagesPresenter(setListPackagesViewModel);

  // TODO: Present the data when you have the response
  // @ts-ignore
  // presenter.present(listPackagesResponse, listPackagesViewModel);

  // Loading state using discovered patterns
  if (!listPackagesViewModel) {
    return <DefaultLoading locale={currentLocale} variant="minimal" />;
  }

  // Error handling using discovered project patterns
  if (listPackagesViewModel.mode === 'kaboom') {
    const errorData = listPackagesViewModel.data;
    console.error(errorData);
    return <DefaultError locale={currentLocale} />;
  }

  if (listPackagesViewModel.mode === 'not-found') {
    const errorData = listPackagesViewModel.data;
    console.error(errorData);
    return <DefaultNotFound locale={currentLocale} />;
  }

  // Success state - extract data using discovered pattern
  const packagesData = listPackagesViewModel.data;

  return (
    <div className="flex flex-col space-y-5 px-30">
      {/* TODO: Add your page content */}

      <Outline
        title={t('title') || 'All Packages'}
        description={t('description') || 'Manage all packages for this platform'}
      />

      {/* TODO: Add main content sections */}
      {/* Usecases to implement: */}
      {/* - listPackages (FEAT-164): Display all packages for platform */}
      {/* - archivePackage (FEAT-165): Archive package action/modal */}
      {/* UI Components needed: 3 components (see Notion) */}

      {/* TODO: Implement listPackages usecase - display packages table */}
      {/* TODO: Implement archivePackage usecase - archive button/modal */}
      {/* TODO: Add "Show archived" filter (client-side) */}
      {/* TODO: Add navigation to Create Package and Edit Package pages */}

      <div>
        <p className="text-sm text-gray-500">
          Platform: {platformSlug} | Locale: {platformLocale}
        </p>
        {/* TODO: Implement packages listing here */}
      </div>
    </div>
  );
}

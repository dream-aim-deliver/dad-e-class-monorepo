'use client';

// Auto-generated by page-scaffold command v2
// Notion: https://www.notion.so/CMS-Coupons-26e5084127d642e0874bca1f789b5e68
// Usecases: listCoupons
// Features: FEAT-177: listCoupons
// API Endpoints:
// User Types: CMS (admin/superadmin)
// Figma: https://www.figma.com/design/8KEwRuOoD5IgxTtFAtLlyS/Just_Do_Ad-1.2?node-id=5127-27462

import { trpc } from '../trpc/cms-client';
import { useState } from 'react';
import { DefaultLoading, DefaultError } from '@maany_shr/e-class-ui-kit';
import { useLocale, useTranslations } from 'next-intl';
import { TLocale } from '@maany_shr/e-class-translations';

interface CouponsProps {
  locale: string;
  platformSlug: string;
  platformLocale: string;
}

export default function Coupons({ platformSlug, platformLocale }: CouponsProps) {
  const locale = useLocale() as TLocale;
  const t = useTranslations('pages.coupons');

  // TRPC query for page data
  // TODO: Replace with actual usecase from: listCoupons
  const [couponsResponse] = trpc.listCoupons.useSuspenseQuery({
    // TODO: Add query parameters for the usecase
  });

  // TODO: Create presenter hook for CouponsViewModel
  // const [couponsViewModel, setCouponsViewModel] = useState<TCouponsViewModel | undefined>(undefined);
  // const { presenter } = useCouponsPresenter(setCouponsViewModel);
  // presenter.present(couponsResponse, couponsViewModel);

  // Loading state - TODO: Implement proper loading check once ViewModel is created
  // if (!couponsViewModel) {
  //   return <DefaultLoading locale={locale} variant="minimal" />;
  // }

  // Error handling - TODO: Implement error handling once ViewModel is created
  // if (couponsViewModel.mode === 'kaboom') {
  //   const errorData = couponsViewModel.data;
  //   console.error(errorData);
  //   return (
  //     <DefaultError
  //       locale={locale}
  //       title={t('error.kaboom.title')}
  //       description={t('error.kaboom.description')}
  //     />
  //   );
  // }

  // if (couponsViewModel.mode === 'not-found') {
  //   const errorData = couponsViewModel.data;
  //   console.error(errorData);
  //   return (
  //     <DefaultError
  //       locale={locale}
  //       title={t('error.notFound.title')}
  //       description={t('error.notFound.description')}
  //     />
  //   );
  // }

  // TODO: Extract data from ViewModel once created
  // const couponsData = couponsViewModel.data;

  return (
    <div className="flex flex-col space-y-5 px-30">
      {/* Page header with translations */}
      <div>
        <h1>{t('title')}</h1>
        <p>{t('description')}</p>
      </div>

      {/* TODO: Implement coupons list grid with AG Grid */}
      {/* Features to implement: List Coupon, Create & Revoke Coupon Modal */}
      {/* UI Components needed: Nav bar / Header, SideMenu (Sidebar Navigation), List Coupon, Create & Revoke Coupon Modal */}
      {/* Usecases: listCoupons */}

      <div>
        {/* TODO: Add Create Coupon button */}
        {/* TODO: Add search/filter functionality */}
        {/* TODO: Add AG Grid to display coupons */}
        {/* TODO: Add Create Coupon Modal */}
        {/* TODO: Add Revoke Coupon Modal */}
        <p>{t('loading')}</p>
      </div>
    </div>
  );
}

'use client';

// Auto-generated by page-scaffold command v2
// Notion: https://www.notion.so/CMS-Coupons-26e5084127d642e0874bca1f789b5e68
// Usecases: listCoupons
// Features: FEAT-177: listCoupons
// API Endpoints:
// User Types: CMS (admin/superadmin)
// Figma: https://www.figma.com/design/8KEwRuOoD5IgxTtFAtLlyS/Just_Do_Ad-1.2?node-id=5127-27462

import { trpc } from '../trpc/cms-client';
import { useState, useRef } from 'react';
import { DefaultLoading, DefaultError, CouponGrid, Breadcrumbs, RevokeCouponModal } from '@maany_shr/e-class-ui-kit';
import { useLocale, useTranslations } from 'next-intl';
import { TLocale } from '@maany_shr/e-class-translations';
import { viewModels } from '@maany_shr/e-class-models';
import { useListCouponsPresenter } from '../hooks/use-list-coupons-presenter';
import { useRequiredPlatformLocale } from '../context/platform-locale-context';
import { useRequiredPlatform } from '../context/platform-context';
import { useRouter } from 'next/navigation';

interface CouponsProps {
  locale: string;
  platformSlug: string;
  platformLocale: string;
}

export default function Coupons({ platformSlug, platformLocale }: CouponsProps) {
  const locale = useLocale() as TLocale;
  const t = useTranslations('pages.coupons');
  const breadcrumbsTranslations = useTranslations('components.breadcrumbs');

  // Platform context
  const platformContext = useRequiredPlatformLocale();
  const { platform } = useRequiredPlatform();
  const router = useRouter();

  // Grid ref for AG Grid instance
  const gridRef = useRef<any>(null);

  // Modal state
  const [revokingCouponId, setRevokingCouponId] = useState<string | null>(null);
  const [revokingCouponName, setRevokingCouponName] = useState<string>('');
  const [revokeSuccess, setRevokeSuccess] = useState<boolean>(false);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  // TRPC mutation for revoking coupons
  const revokeCouponMutation = trpc.revokeCoupon.useMutation();

  // ViewModel state
  const [listCouponsViewModel, setListCouponsViewModel] = useState<
    viewModels.TListCouponsViewModel | undefined
  >(undefined);

  // Presenter hook
  const { presenter } = useListCouponsPresenter(setListCouponsViewModel);

  // TRPC query for page data
  const [couponsResponse] = trpc.listCoupons.useSuspenseQuery({
    // TODO: Add query parameters for the usecase
  });

  // Connect TRPC response to presenter
  // @ts-ignore
  presenter.present(couponsResponse, listCouponsViewModel);

  // Loading state
  if (!listCouponsViewModel) {
    return <DefaultLoading locale={locale} variant="minimal" />;
  }

  // Error handling
  if (listCouponsViewModel.mode === 'kaboom') {
    const errorData = listCouponsViewModel.data;
    console.error(errorData);
    return (
      <DefaultError
        locale={locale}
        title={t('error.kaboom.title')}
        description={t('error.kaboom.description')}
      />
    );
  }

  if (listCouponsViewModel.mode === 'not-found') {
    const errorData = listCouponsViewModel.data;
    console.error(errorData);
    return (
      <DefaultError
        locale={locale}
        title={t('error.notFound.title')}
        description={t('error.notFound.description')}
      />
    );
  }

  // Success state - extract data from ViewModel
  const couponsData = listCouponsViewModel.data;

  // Revoke coupon handlers
  const handleRevokeCoupon = (couponId: string) => {
    const coupon = listCouponsViewModel.data.coupons.find(c => c.id === couponId);
    if (coupon) {
      setRevokingCouponId(coupon.id);
      setRevokingCouponName(coupon.name);
      setRevokeSuccess(false);
      setErrorMessage(null); // Clear any previous errors
    }
  };

  const handleConfirmRevoke = async () => {
    if (!revokingCouponId) return;
    
    try {
      await revokeCouponMutation.mutateAsync({
        couponId: revokingCouponId
      });
      
      // Update local coupon state to 'revoked'
      const updatedCoupons = listCouponsViewModel.data.coupons.map(coupon => 
        coupon.id === revokingCouponId 
          ? { ...coupon, status: 'revoked' as const }
          : coupon
      );
      
      // Update the view model with the new coupon data
      setListCouponsViewModel({
        mode: 'default',
        data: {
          ...listCouponsViewModel.data,
          coupons: updatedCoupons
        }
      });
      
      // Show success state
      setRevokeSuccess(true);
      setErrorMessage(null);
      
      // Auto-close modal after 5 seconds
      setTimeout(() => {
        setRevokingCouponId(null);
        setRevokingCouponName('');
        setRevokeSuccess(false);
        setErrorMessage(null); // Clear error message on auto-close
      }, 5000);
      
    } catch (error: any) {
      // Error handling
      console.error('Failed to revoke coupon:', error);
      
      // Set appropriate error message based on error type
      if (error?.data?.code === 'UNAUTHORIZED') {
        setErrorMessage('You do not have permission to revoke this coupon.');
      } else if (error?.data?.code === 'NOT_FOUND') {
        setErrorMessage('Coupon not found.');
      } else if (error?.data?.code === 'VALIDATION_ERROR') {
        setErrorMessage('Invalid coupon ID.');
      } else {
        setErrorMessage('Failed to revoke coupon. Please try again.');
      }
    }
  };

  const handleCancelRevoke = () => {
    setRevokingCouponId(null);
    setRevokingCouponName('');
    setRevokeSuccess(false);
    setErrorMessage(null);
  };

  // Breadcrumbs following the standard pattern
  const breadcrumbItems = [
    {
      label: breadcrumbsTranslations('platforms'),
      onClick: () => router.push('/'),
    },
    {
      label: platform.name,
      onClick: () => {
        // TODO: Implement navigation to platform
      },
    },
    {
      label: breadcrumbsTranslations('coupons'),
      onClick: () => {
        // Nothing should happen on clicking the current page
      },
    },
  ];

  return (
    <div className="flex flex-col space-y-2 bg-card-fill p-5 border border-card-stroke rounded-medium gap-4 h-screen">
      <Breadcrumbs items={breadcrumbItems} />

      <div className="flex flex-col space-y-2">
        <h1>{t('title')}</h1>
        <p className="text-text-secondary text-sm">
          Platform: {platformContext.platformSlug} | Content Language: {platformLocale.toUpperCase()}
        </p>
      </div>

      {/* Coupons Grid */}
      <div className="flex flex-col grow bg-transparent">
        <CouponGrid
          gridRef={gridRef}
          coupons={listCouponsViewModel.data.coupons}
          locale={locale}
          onRevokeCoupon={handleRevokeCoupon}
          onCreateCoupon={() => {
            // TODO: Implement create coupon functionality
            console.log('Create new coupon');
          }}
        />
      </div>

      {/* Revoke Coupon Modal */}
      {revokingCouponId && (
        <RevokeCouponModal
          couponName={revokingCouponName}
          locale={locale}
          onConfirm={handleConfirmRevoke}
          onCancel={handleCancelRevoke}
          isRevoking={revokeCouponMutation.isPending}
          isSuccess={revokeSuccess}
          errorMessage={errorMessage}
        />
      )}
    </div>
  );
}

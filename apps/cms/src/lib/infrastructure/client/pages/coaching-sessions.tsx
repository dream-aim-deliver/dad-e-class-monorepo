'use client';

// Auto-generated by page-scaffold command v2
// Notion: https://www.notion.so/CMS-Coaching-Sessions-48f9e69afeb04b6d94e572a79e233433
// Usecase: listCoachingSessions
// Features: List and manage coaching sessions
// UI Components: AG Grid (BaseGrid)
// User Types: CMS (Admin/Superadmin)
// Figma: https://www.figma.com/design/8KEwRuOoD5IgxTtFAtLlyS/Just_Do_Ad-1.2?node-id=5127-42456&t=YcD6rAFmbgKrxm0Y-4

import { viewModels } from '@maany_shr/e-class-models';
import { trpc } from '../trpc/cms-client';
import { useListCoachingSessionsPresenter } from '../hooks/use-list-coaching-sessions-presenter';
import { useState } from 'react';
import {
  DefaultLoading,
  DefaultError,
  DefaultNotFound,
} from '@maany_shr/e-class-ui-kit';
import { useLocale, useTranslations } from 'next-intl';
import { TLocale } from '@maany_shr/e-class-translations';

interface CoachingSessionsProps {
  locale: TLocale;
  platformSlug: string;
  platformLocale: TLocale;
}

export default function CoachingSessions({
  locale,
  platformSlug,
  platformLocale,
}: CoachingSessionsProps) {
  const currentLocale = useLocale() as TLocale;
  const t = useTranslations('pages.coachingSessions');

  // TRPC query for coaching sessions data
  const [coachingSessionsResponse] = trpc.listCoachingSessions.useSuspenseQuery({
    // TODO: Add query parameters if needed for the usecase
  });

  const [coachingSessionsViewModel, setCoachingSessionsViewModel] = useState<
    viewModels.TListCoachingSessionsViewModel | undefined
  >(undefined);

  const { presenter } = useListCoachingSessionsPresenter(
    setCoachingSessionsViewModel,
  );

  // @ts-ignore
  // Present the data
  presenter.present(coachingSessionsResponse, coachingSessionsViewModel);

  // Loading state
  if (!coachingSessionsViewModel) {
    return <DefaultLoading locale={currentLocale} variant="minimal" />;
  }

  // Error handling - kaboom error
  if (coachingSessionsViewModel.mode === 'kaboom') {
    const errorData = coachingSessionsViewModel.data;
    console.error(errorData);

    return (
      <DefaultError
        locale={currentLocale}
        title={t('error.title')}
        description={t('error.description')}
      />
    );
  }

  // Error handling - not found error
  if (coachingSessionsViewModel.mode === 'not-found') {
    const errorData = coachingSessionsViewModel.data;
    console.error(errorData);

    return (
      <DefaultNotFound
        locale={currentLocale}
        title={t('error.notFound.title')}
        description={t('error.notFound.description')}
      />
    );
  }

  // Success state - extract data
  const coachingSessionsData = coachingSessionsViewModel.data;

  return (
    <div className="flex flex-col space-y-5 px-30">
      {/* Page header with translations */}
      <div>
        <h1 className="text-2xl font-bold">{t('title')}</h1>
        <p className="text-gray-600">{t('description')}</p>
      </div>

      {/* TODO: Implement AG Grid (BaseGrid) for coaching sessions */}
      {/* Features to implement: List and manage coaching sessions */}
      {/* UI Components needed: AG Grid */}
      {/* Usecase: listCoachingSessions */}

      {/* TODO: Add search functionality using searchPlaceholder translation */}
      {/* TODO: Add export button using exportButton translation */}
      {/* TODO: Configure AG Grid columns based on coaching sessions data structure */}
      {/* TODO: Add filtering and sorting capabilities */}
      {/* TODO: Add pagination if needed */}

      <div className="text-sm text-gray-500">
        Platform: {platformSlug} | Locale: {platformLocale}
      </div>
    </div>
  );
}

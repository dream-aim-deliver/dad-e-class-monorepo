'use client';

// Auto-generated by page-scaffold command v2
// Notion: https://www.notion.so/CMS-Coaching-Sessions-48f9e69afeb04b6d94e572a79e233433
// Usecase: listCoachingSessions
// Features: List and manage coaching sessions
// UI Components: AG Grid (BaseGrid)
// User Types: CMS (Admin/Superadmin)
// Figma: https://www.figma.com/design/8KEwRuOoD5IgxTtFAtLlyS/Just_Do_Ad-1.2?node-id=5127-42456&t=YcD6rAFmbgKrxm0Y-4

import { viewModels } from '@maany_shr/e-class-models';
import { trpc } from '../trpc/cms-client';
import { useListCoachingSessionsPresenter } from '../hooks/use-list-coaching-sessions-presenter';
import { useState, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { Outline, Button, IconCloudDownload } from '@maany_shr/e-class-ui-kit';
import {
  DefaultLoading,
  DefaultError,
  DefaultNotFound,
} from '@maany_shr/e-class-ui-kit';
import { useLocale, useTranslations } from 'next-intl';
import { TLocale } from '@maany_shr/e-class-translations';
import { CoachingSessionGrid } from '@maany_shr/e-class-ui-kit';

interface CoachingSessionsProps {
  locale: TLocale;
  platformSlug: string;
  platformLocale: TLocale;
}

/**
 * @todo: Consider extracting presenter wiring and TRPC calls to a custom hook for testability.
 *        This component currently mixes data presentation and navigation handlers.
 */
export default function CoachingSessions({
  locale,
  platformSlug,
  platformLocale,
}: CoachingSessionsProps) {
  const currentLocale = useLocale() as TLocale;
  const t = useTranslations('pages.coachingSessions');
  const router = useRouter();

  // TRPC query for coaching sessions data
  const [coachingSessionsResponse,{ refetch: refetchCoachingSessions }] = trpc.listCoachingSessions.useSuspenseQuery({
  });

  const [coachingSessionsViewModel, setCoachingSessionsViewModel] = useState<
    viewModels.TListCoachingSessionsViewModel | undefined
  >(undefined);

  const { presenter } = useListCoachingSessionsPresenter(
    setCoachingSessionsViewModel,
  );

  // @ts-ignore
  // Present the data
  presenter.present(coachingSessionsResponse, coachingSessionsViewModel);


  const gridRef = useRef<any>(null);


  const handleCoachClick = (coach: any) => {
    // navigate to platform coach page by username if available
    if (!coach || !coach.username) return;
    router.push(`/${platformLocale}/coaches/${coach.username}`);
  };

  // @todo: Add analytics tracking when admins navigate to student profiles.
  const handleStudentClick = (student: any) => {
    if (!student || !student.username) return;

    // 
    router.push(`/${platformLocale}/students/${student.username}`);
  };

  // @todo: Validate course.slug presence and fallback gracefully if missing.
  const handleCourseClick = (course: any) => {
    if (!course || !course.slug) return;
    router.push(`/${platformLocale}/courses/${course.slug}`);
  };

  // Loading state
  if (!coachingSessionsViewModel) {
    return <DefaultLoading locale={currentLocale} variant="minimal" />;
  }

  // Error handling - kaboom error
  if (coachingSessionsViewModel.mode === 'kaboom') {

    return (
      <DefaultError
        locale={currentLocale}
        title={t('error.title')}
        description={t('error.description')}
        onRetry={() => {
					refetchCoachingSessions();
				}}
      />
    );
  }

  // Error handling - not found error
  if (coachingSessionsViewModel.mode === 'not-found') {

    return (
      <DefaultNotFound
        locale={currentLocale}
        title={t('error.notFound.title')}
        description={t('error.notFound.description')}
      />
    );
  }

  // Success state - extract data
  const coachingSessionsData = coachingSessionsViewModel.data;

  const handleExportCurrentView = () => {
    if (gridRef.current?.api) {
      gridRef.current.api.exportDataAsCsv({
        fileName: `coaching_sessions_export_${new Date().toISOString().split('T')[0]}.csv`,
        onlySelected: false,
        skipPinnedTop: true,
        skipPinnedBottom: true,
        processCellCallback: (params: any) => {
          const colId = params.column.getColId();
          const data = params.node?.data;
          if (!data) return params.value;

          // Format date & time column
          if (colId === 'startTime' && params.column.getColDef().headerName === 'Date & Time') {
            if (!data.startTime) return '-';
            const date = new Date(data.startTime);
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            const dateStr = `${year}-${month}-${day}`;
            const timeStr = date.toLocaleTimeString('en-US', {
              hour: 'numeric',
              minute: '2-digit',
              hour12: true
            });
            return `${dateStr} at ${timeStr}`;
          }

          // Format coach name
          if (colId === 'coach') {
            const coach = data.coach;
            if (!coach) return '-';
            return coach.name && coach.surname
              ? `${coach.name} ${coach.surname}`
              : coach.username;
          }

          // Format student name
          if (colId === 'student') {
            const student = data.student;
            if (!student) return '-';
            return student.name && student.surname
              ? `${student.name} ${student.surname}`
              : student.username;
          }

          // Format rating
          if (colId === 'rating') {
            const rating = data.rating;
            return rating !== undefined && rating !== null ? rating.toString() : '-';
          }

          // Format course
          if (colId === 'course') {
            const course = data.course;
            return course ? course.title : '-';
          }

          // Format coupon
          if (colId === 'coupon') {
            const coupon = data.coupon;
            return coupon ? coupon.code : '-';
          }

          return params.value;
        },
      });
    }
  }


  return (
    <div className="flex flex-col space-y-5 bg-card-fill p-6 rounded-md">
      {/* Page header with Outline and export control */}
      <div className="flex items-start justify-between w-full gap-4">
        <Outline title={t('title')} description={t('description')} className="flex-1" />
        <div className="flex items-center space-x-2">
          <Button
            variant="secondary"
            size="medium"
            text={t('exportButton') || 'Export view'}
            hasIconLeft
            iconLeft={<IconCloudDownload />}
            onClick={handleExportCurrentView}
            disabled={coachingSessionsData?.sessions.length === 0}
          />
        </div>
      </div>

      {/* Coaching sessions grid */}
      <div>
        <CoachingSessionGrid
          gridRef={gridRef}
          locale={currentLocale}
          sessions={coachingSessionsData?.sessions ?? []}
          onCoachClick={handleCoachClick}
          onStudentClick={handleStudentClick}
          onCourseClick={handleCourseClick}
        />
      </div>

    </div>
  );
}

'use client';

// Auto-generated by page-scaffold command
// Notion: https://www.notion.so/CMS-Manage-Homepage-13a5a7432d018034836ff1ff30ebf200
// Features: getHomePage, saveHomePage, requestFileUpload
// User Types: CMS
// Figma: https://www.figma.com/design/8KEwRuOoD5IgxTtFAtLlyS/Just_Do_Ad-1.2?node-id=5664-69581&t=GjW3V89mle6BrGgh-4

import { trpc } from '../trpc/cms-client';
import { useLocale } from 'next-intl';

import {
	DefaultError,
	DefaultLoading,
	DefaultNotFound,
	Button,
	Tabs,
	Banner,
} from '@maany_shr/e-class-ui-kit';
import { viewModels } from '@maany_shr/e-class-models';
import { TLocale } from '@maany_shr/e-class-translations';
import { useEffect, useState } from 'react';
import { useGetHomePagePresenter } from '../hooks/use-get-home-page-presenter';
import { useContentLocale } from '../hooks/use-platform-translations';
import { useRequiredPlatformLocale } from '../context/platform-locale-context';
import { useHomePageFileUpload } from './manage-homepage-hooks/use-homepage-file-upload';
import { HeroSection, CarouselSection, CoachingDemandSection, HowItWorksSection } from '@maany_shr/e-class-ui-kit';


/**
 * ManageHomepage component for CMS
 * Allows admins to manage the homepage content including:
 * - Banner with title, description, video, and thumbnail
 * - Carousel items with text, images, buttons, and badges
 * - Coaching On Demand section
 * - Accordion section
 */
export default function ManageHomepage() {
	// App locale - used for UI elements
	const appLocale = useLocale() as TLocale;

	// Platform context
	const platformContext = useRequiredPlatformLocale();
	const contentLocale = useContentLocale();

	// Fetch homepage data (refetch retained for future integration)
	const [getHomePageResponse, { refetch: refetchHomePage }] = trpc.getHomePage.useSuspenseQuery({});
	const [homePageViewModel, setHomePageViewModel] = useState<
		viewModels.TGetHomePageViewModel | undefined
	>(undefined);

	const { presenter: homePagePresenter } = useGetHomePagePresenter(setHomePageViewModel);

	// @ts-ignore
	homePagePresenter.present(getHomePageResponse, homePageViewModel);

	// Track upload progress
	const [uploadProgress, setUploadProgress] = useState<number | undefined>(undefined);

	const [currentHomePageData, setCurrentHomePageData] = useState<viewModels.TGetHomePageSuccess | null>(null);

	const [saveStatus, setSaveStatus] = useState<'idle' | 'success' | 'error'>('idle');
	const [saveMessage, setSaveMessage] = useState<string | null>(null);

	// File upload hook - MUST be called before any conditional returns
	const { handleFileUpload, handleFileDelete, handleFileDownload } = useHomePageFileUpload(setUploadProgress);

	// Save homepage mutation - uncommented
	const saveHomePageMutation = trpc.saveHomePage.useMutation({
		onSuccess: (data) => {
			if (data.success) {
				setSaveStatus('success');
				setSaveMessage('Homepage saved successfully!');
				// Optionally refetch homepage data
				refetchHomePage();
			} else {
				setSaveStatus('error');
				setSaveMessage('Failed to save homepage');
			}
		},
		onError: (error) => {
			setSaveStatus('error');
			setSaveMessage(error.message ?? 'An error occurred while saving');
			console.error('Error saving homepage:', error);
		},

	});


	useEffect(() => {
		if (homePageViewModel?.mode === 'default' && !currentHomePageData) {
			setCurrentHomePageData(homePageViewModel.data);
		}
	}, [homePageViewModel, currentHomePageData]);


	// Loading state
	if (!homePageViewModel) {
		return <DefaultLoading locale={appLocale} variant="minimal" />;
	}

	// Error handling - only kaboom errors should prevent rendering
	// Note: 'not-found' is acceptable since save mutation supports upsert
	if (homePageViewModel.mode === 'kaboom') {
		return (
			<DefaultError
				locale={appLocale}
				onRetry={() => {
					refetchHomePage();
				}}
			/>
		);
	}

	// Create default homepage data when it doesn't exist (for upsert functionality)
	const defaultHomePageData: viewModels.TGetHomePageSuccess = {
		banner: {
			title: '',
			description: '',
			videoId: null,
			thumbnailUrl: '',
		},
		carousel: [],
		coachingOnDemand: {
			title: '',
			description: '',
			desktopImageUrl: '',
			tabletImageUrl: '',
			mobileImageUrl: '',
		},
		accordion: {
			title: '',
			showNumbers: true,
			items: [],
		},
	};

	// Use actual data if available (mode is 'default'), otherwise use default
	const homePageData = homePageViewModel.mode === 'default'
		? homePageViewModel.data
		: defaultHomePageData;

	// Single state for all homepage data

	const editableHomePageData = currentHomePageData ?? homePageData;

	const handleBannerChange = (banner: typeof homePageData.banner) => {
		setCurrentHomePageData(prev => {
			const base = prev ?? homePageData;
			return {
				...base,
				banner,
			};
		});
	};

	const handleCarouselChange = (carousel: typeof homePageData.carousel) => {
		setCurrentHomePageData(prev => {
			const base = prev ?? homePageData;
			return {
				...base,
				carousel,
			};
		});
	};

	const handleCoachingDemandChange = (coachingOnDemand: typeof homePageData.coachingOnDemand) => {
		setCurrentHomePageData(prev => {
			const base = prev ?? homePageData;
			return {
				...base,
				coachingOnDemand,
			};
		});
	};

	const handleAccordionChange = (accordion: typeof homePageData.accordion) => {
		setCurrentHomePageData(prev => {
			const base = prev ?? homePageData;
			return {
				...base,
				accordion,
			};
		});
	};

	const handleSaveHomePage = () => {
		setSaveStatus('idle');
		setSaveMessage(null);

		saveHomePageMutation.mutate({
			banner: editableHomePageData.banner,
			carousel: editableHomePageData.carousel,
			coachingOnDemand: editableHomePageData.coachingOnDemand,
			accordion: editableHomePageData.accordion,
		});
	};

	return (
		<div className="flex flex-col space-y-6 p-6 max-w-7xl mx-auto">
			{/* Page Header */}
			<div className="bg-gradient-to-r from-primary-500 to-primary-600 text-white p-6 rounded-lg shadow-lg">
				<div className="flex justify-between items-center">
					<div>
						<h1 className="text-3xl font-bold mb-2">Manage Homepage</h1>
						<p className="text-lg opacity-90">
							Platform: {platformContext.platformSlug} | Content Language: {contentLocale.toUpperCase()}
						</p>
					</div>
					<Button
						variant="primary"
						size="medium"
						text="Save Changes"
						onClick={handleSaveHomePage}
						disabled={saveHomePageMutation.isPending}

					/>
				</div>
			</div>

			{saveHomePageMutation.isPending && (
				<Banner style="success" title="Saving homepage changes..." />


			)}
			{saveStatus === 'success' && saveMessage && (
				<Banner style="success" title={saveMessage} />
			)
			}
			{
				saveStatus === 'error' && saveMessage && (
					<Banner style="error" title={saveMessage} />
				)
			}

			{/* Tabs for Homepage Sections */}
			<Tabs.Root defaultTab="hero" className="w-full">
				<Tabs.List variant="default">
					<Tabs.Trigger value="hero" isLast={false}>
						Hero Section
					</Tabs.Trigger>
					<Tabs.Trigger value="carousel" isLast={false}>
						Carousel
					</Tabs.Trigger>
					<Tabs.Trigger value="coaching" isLast={false}>
						Coaching On Demand
					</Tabs.Trigger>
					<Tabs.Trigger value="accordion" isLast={true}>
						Accordion
					</Tabs.Trigger>
				</Tabs.List>

				<div className="mt-6">
					<Tabs.Content value="hero">
						<HeroSection
							initialValue={editableHomePageData.banner}
							onChange={handleBannerChange}
							onFileUpload={handleFileUpload}
							onFileDelete={handleFileDelete}
							onFileDownload={handleFileDownload}
							uploadProgress={uploadProgress}
						/>
					</Tabs.Content>

					<Tabs.Content value="carousel">
						<CarouselSection
							initialValue={editableHomePageData.carousel}
							onChange={handleCarouselChange}
							onFileUpload={handleFileUpload}
							onFileDelete={handleFileDelete}
							onFileDownload={handleFileDownload}
							uploadProgress={uploadProgress}
						/>
					</Tabs.Content>

					<Tabs.Content value="coaching">
						<CoachingDemandSection
							initialValue={editableHomePageData.coachingOnDemand}
							onChange={handleCoachingDemandChange}
							onFileUpload={handleFileUpload}
							onFileDelete={handleFileDelete}
							onFileDownload={handleFileDownload}
							uploadProgress={uploadProgress}
						/>
					</Tabs.Content>

					<Tabs.Content value="accordion">
						<HowItWorksSection
							initialValue={editableHomePageData.accordion}
							onChange={handleAccordionChange}
							onFileUpload={handleFileUpload}
							onFileDelete={handleFileDelete}
							onFileDownload={handleFileDownload}
							uploadProgress={uploadProgress}
						/>
					</Tabs.Content>
				</div>
			</Tabs.Root>
		</div >
	);
}

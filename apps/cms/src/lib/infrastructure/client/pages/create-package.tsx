'use client';

// Auto-generated by page-scaffold command
// Notion: https://www.notion.so/CMS-Create-package-Manage-Packages-f3ea8a52ac704207bdfdec2bacfb37a1
// Title: CMS Create package (Manage Packages)
// Route: /[platform_slug]/packages/create
// User Types: CMS
// Figma: https://www.figma.com/design/8KEwRuOoD5IgxTtFAtLlyS/Just_Do_Ad-1.2?node-id=6385-175063
// Features: 3 features linked (see Notion for details)
// UI Components: 9 components linked (see Notion for details)
// Comments: createPackage creates package in draft state; publishPackage puts it in published state

import { useContentLocale } from '../hooks/use-platform-translations';
import { useRequiredPlatformLocale } from '../context/platform-locale-context';
import { useState, useCallback } from 'react';
import { trpc } from '../trpc/cms-client';
import { viewModels } from '@maany_shr/e-class-models';
import { useGetPlatformLanguagePresenter } from '../hooks/use-platform-language-presenter';
import { getAuthorDisplayName } from '../utils/get-author-display-name';
import { useCreatePackagePresenter } from '../hooks/use-create-package-presenter';
import React from 'react';
import {
    Button,
    Stepper,
    Breadcrumbs,
    PackageDetailsStep,
    PackagePricingStep,
    PackageCoursesStep,
    PackagePreviewStep,
} from '@maany_shr/e-class-ui-kit';
import type { PackageDetailsFormData, PackagePricingFormData } from '@maany_shr/e-class-ui-kit';
import { useLocale, useTranslations } from 'next-intl';
import { TLocale } from '@maany_shr/e-class-translations';
import { useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';
import { fileMetadata } from '@maany_shr/e-class-models';
import { AccordionBuilderItem } from '@maany_shr/e-class-ui-kit';
import { usePackageFileUpload } from './common/hooks/use-package-file-upload';

// Types for course data
interface CourseData {
    id: string;
    title: string;
    description: string;
    rating: number;
    reviewCount: number;
    language: { code: string; name: string };
    sessions: number;
    duration: { video: number; coaching: number; selfStudy: number };
    sales: number;
    imageUrl: string;
    author: { name: string; image: string };
    pricing: { fullPrice: number; currency: string; partialPrice: number };
}

// Types for package preview
interface PackagePreviewData {
    title: string;
    description: string;
    featuredImage: fileMetadata.TFileMetadata | null;
    accordionTitle: string;
    showListItemNumbers: boolean;
    accordionItems: AccordionBuilderItem[];
    selectedCourses: CourseData[];
    pricingFormData: PackagePricingFormData;
    coachingIncluded: boolean;
}

export default function CreatePackage() {
    // Platform context
    const platformContext = useRequiredPlatformLocale();
    const contentLocale = useContentLocale();
    const locale = useLocale() as TLocale;
    const router = useRouter();
    const breadcrumbsTranslations = useTranslations('components.breadcrumbs');
    // const t = useTranslations('components.createPackage');

    // CMS-specific context hooks
    const platformSlug = platformContext.platformSlug;
    const platformLocale = platformContext.platformLocale;

    // Data fetching - platform language (hydrated by RSC)
    const [platformLanguageResponse, { refetch: refetchPlatformLanguage }] = trpc.getPlatformLanguage.useSuspenseQuery({});
    const [platformLanguageViewModel, setPlatformLanguageViewModel] = useState<
        viewModels.TPlatformLanguageViewModel | undefined
    >(undefined);
    const { presenter: platformLanguagePresenter } = useGetPlatformLanguagePresenter(
        setPlatformLanguageViewModel,
    );
    // @ts-ignore
    platformLanguagePresenter.present(platformLanguageResponse, platformLanguageViewModel);

    // Authentication check for CMS users
    const sessionDTO = useSession();
    const session = sessionDTO.data;
    const isLoggedIn = !!session;

    // Multi-step form state
    const [currentStep, setCurrentStep] = useState(1);
    
    // Package details form data
    const [packageDetailsFormData, setPackageDetailsFormData] = useState<PackageDetailsFormData>({
        packageTitle: '',
        packageDescription: '',
        featuredImage: null,
        accordionTitle: '',
        showListItemNumbers: true,
        accordionItems: [],
    });

    // Pricing form data
    const [pricingFormData, setPricingFormData] = useState<PackagePricingFormData>({
        completePackageWithCoaching: '',
        completePackageWithoutCoaching: '',
        partialDiscounts: {
            '2': '',
            '3': '',
            '4': '',
            '5': '',
            '6': '',
            '7': ''
        }
    });

    // Course selection state
    const [selectedCourseIds, setSelectedCourseIds] = useState<string[]>(['1', '2']); // Mock: 2 courses selected

    // Preview state
    const [coachingIncluded, setCoachingIncluded] = useState(true);
    const [isPublishing, setIsPublishing] = useState(false);

    // Courses data from TRPC usecase
    const [coursesResponse] = trpc.listCourses.useSuspenseQuery({ pagination: { page: 1, pageSize: 50 } });
    const allCourses: CourseData[] = (() => {
        if (!coursesResponse.success) return [];
        const payload: any = coursesResponse.data;
        const data = payload?.success ? payload.data : payload;
        const courses: any[] = data?.courses ?? [];
        return courses.map((course) => ({
            id: String(course.id),
            title: course.title,
            description: course.description,
            rating: course.averageRating ?? 0,
            reviewCount: course.reviewCount,
            language: { code: '', name: course.language },
            sessions: course.coachingSessionCount ?? 0,
            duration: { video: 0, coaching: 0, selfStudy: course.fullDuration },
            sales: course.salesCount,
            imageUrl: course.imageUrl ?? '',
            author: {
                name: getAuthorDisplayName(course.author.name, course.author.surname, locale),
                image: course.author.avatarUrl ?? ''
            },
            pricing: {
                fullPrice: course.pricing.withCoaching ?? 0,
                partialPrice: course.pricing.base,
                currency: course.pricing.currency
            }
        }));
    })();


    // File upload handlers using custom hook
    const [packageImageProgress, setPackageImageProgress] = useState<number | undefined>(undefined);
    const {
        handleFileChange: handlePackageImageUpload,
        uploadError: packageImageError,
        handleDelete: handleDeleteFeaturedImage,
        handleDownload: handleDownloadFeaturedImage,
    } = usePackageFileUpload("upload_package_image", null, setPackageImageProgress);

    const [iconUploadProgress, setIconUploadProgress] = useState<number | undefined>(undefined);
    const {
        handleFileChange: handleAccordionIconUpload,
        uploadError: iconUploadError,
    } = usePackageFileUpload("upload_package_accordion_item_icon", null, setIconUploadProgress);

    // Form data handlers
    const handlePackageDetailsChange = useCallback((updates: Partial<PackageDetailsFormData>) => {
        setPackageDetailsFormData((prev: PackageDetailsFormData) => ({ ...prev, ...updates }));
    }, []);

    const handlePricingChange = useCallback((updates: Partial<PackagePricingFormData>) => {
        setPricingFormData((prev: PackagePricingFormData) => ({ ...prev, ...updates }));
    }, []);

    // Course management functions
    const toggleCourseSelection = useCallback((courseId: string) => {
        setSelectedCourseIds(prev => 
            prev.includes(courseId) 
                ? prev.filter(id => id !== courseId)
                : [...prev, courseId]
        );
    }, []);

    // Pricing management functions
    const updatePricingConfig = useCallback((updates: Partial<PackagePricingFormData>) => {
        setPricingFormData(prev => ({ ...prev, ...updates }));
    }, []);

    const updatePartialDiscount = useCallback((courseCount: string, discount: string) => {
        setPricingFormData(prev => ({
            ...prev,
            partialDiscounts: {
                ...prev.partialDiscounts,
                [courseCount]: discount
            }
        }));
    }, []);

    // Publish logic
    const createPackageMutation = trpc.createPackage.useMutation();
    
    const handlePublishPackage = useCallback(async () => {
        setIsPublishing(true);
        try {
            // Build payload matching backend contract
            // TODO: Replace string parsing when backend exposes numeric price fields
            const price = parseFloat(pricingFormData.completePackageWithoutCoaching.replace(/[^\d.]/g, '')) || 0;
            const priceWithCoachings = parseFloat(pricingFormData.completePackageWithCoaching.replace(/[^\d.]/g, '')) || 0;

            // TODO: Move discount parsing to a shared util and validate range (0-100)
            const partialDiscountsPayload = Object.entries(pricingFormData.partialDiscounts)
                .map(([courseAmount, discount]) => ({
                    courseAmount: Number(courseAmount),
                    discountPercent: Number(String(discount).replace('%', '')),
                }))
                .filter(d => !Number.isNaN(d.courseAmount) && !Number.isNaN(d.discountPercent));

            // TODO: Support per-item icon upload progress in UI (AccordionBuilder)
            const accordionItemsPayload = packageDetailsFormData.accordionItems.map((item: AccordionBuilderItem, idx: number) => ({
                title: item.title,
                description: item.content,
                position: idx + 1,
                iconId: item.icon?.id ? Number(item.icon.id) : undefined,
            }));

            // TODO: Confirm whether BE will accept string IDs to remove Number casting
            const courseIdsPayload = selectedCourseIds
                .map((id) => Number(id))
                .filter((n) => !Number.isNaN(n));

            // TODO: Add featuredImageId, accordionTitle, showListItemNumbers when supported by backend contract
            const payload = {
                title: packageDetailsFormData.packageTitle,
                description: packageDetailsFormData.packageDescription,
                price,
                priceWithCoachings,
                partialDiscounts: partialDiscountsPayload,
                accordionItems: accordionItemsPayload,
                courseIds: courseIdsPayload,
            };

            const result = await createPackageMutation.mutateAsync(payload);
            
            if (result.success) {
                // Redirect to packages list after successful publish
                router.push(`/${locale}/platform/${platformSlug}/${platformLocale}/packages`);
            } else {
                throw new Error(result.data?.data?.message || 'Failed to create package');
            }
        } catch (error) {
            console.error('Failed to publish package:', error);
            setIsPublishing(false);
        }
    }, [
        packageDetailsFormData, selectedCourseIds, pricingFormData, 
        coachingIncluded, router, locale, platformSlug, platformLocale, createPackageMutation
    ]);

    // Get selected courses data
    const selectedCourses = allCourses.filter(course => selectedCourseIds.includes(course.id));

    // Pricing calculations
    const calculateIndividualCourseTotal = useCallback(() => {
        return selectedCourses.reduce((total, course) => {
            return total + (coachingIncluded ? course.pricing.fullPrice : course.pricing.partialPrice);
        }, 0);
    }, [selectedCourses, coachingIncluded]);

    const calculatePackagePrice = useCallback(() => {
        const basePrice = coachingIncluded 
            ? pricingFormData.completePackageWithCoaching 
            : pricingFormData.completePackageWithoutCoaching;
        
        // Extract numeric value from price string (e.g., "5400 CHF" -> 5400)
        const numericPrice = parseFloat(basePrice.replace(/[^\d.]/g, '')) || 0;
        return numericPrice;
    }, [pricingFormData, coachingIncluded]);

    const calculateSavings = useCallback(() => {
        const individualTotal = calculateIndividualCourseTotal();
        const packagePrice = calculatePackagePrice();
        return Math.max(0, individualTotal - packagePrice);
    }, [calculateIndividualCourseTotal, calculatePackagePrice]);

    // Breadcrumbs following the standard pattern
    const breadcrumbItems = [
        {
            label: breadcrumbsTranslations('platforms'),
            onClick: () => router.push('/'),
        },
        {
            label: platformSlug.charAt(0).toUpperCase() + platformSlug.slice(1),
            onClick: () => {
                // TODO: Implement navigation to platform
            },
        },
        {
            label: 'Packages',
            onClick: () => {
                router.push(`/${locale}/platform/${platformSlug}/${platformLocale}/packages`);
            },
        },
        {
            label: 'Create Package',
            onClick: () => {
                // Nothing should happen on clicking the current page
            },
        },
    ];

    // Authentication check
    if (!isLoggedIn) {
        router.push(`/${locale}/login`);
        return null;
    }

    const handleNext = () => {
        if (currentStep === 1) {
            setCurrentStep(2); // Move to Courses step
        } else if (currentStep === 2) {
            setCurrentStep(3); // Move to Pricing step
        } else if (currentStep === 3) {
            setCurrentStep(4); // Move to Preview step
        }
    };

    const handleBack = () => {
        if (currentStep === 2) {
            setCurrentStep(1); // Move back to Package Details step
        } else if (currentStep === 3) {
            setCurrentStep(2); // Move back to Courses step
        } else if (currentStep === 4) {
            setCurrentStep(3); // Move back to Pricing step
        }
    };

    const handleDiscard = () => {
        router.push(`/${locale}/platform/${platformSlug}/${platformLocale}/packages`);
    };

        return (
        <div className="flex flex-col space-y-4">
            {/* Breadcrumbs */}
            <Breadcrumbs items={breadcrumbItems} />

            <div className="flex flex-col space-y-2">
                <h1>Create Package</h1>
                <p className="text-text-secondary text-sm">
                    Platform: {platformSlug} | Content Language: {platformLocale.toUpperCase()}
                </p>
            </div>

            {/* Step Navigation */}
            <Stepper.Root 
                key={`stepper-${currentStep}`}
                defaultStep={currentStep} 
                totalSteps={4}
                onStepChange={(step) => setCurrentStep(step)}
            >
                <Stepper.List>
                    <Stepper.Item 
                        step={1} 
                        description="Pkg. Details" 
                    />
                    <Stepper.Item 
                        step={2} 
                        description="Courses" 
                    />
                    <Stepper.Item 
                        step={3} 
                        description="Pricing" 
                    />
                    <Stepper.Item 
                        step={4} 
                        description="Preview" 
                    />
                </Stepper.List>
            </Stepper.Root>

            {/* Step Content */}

            {/* Step 1: Package Details */}
            {currentStep === 1 && (
            <PackageDetailsStep
                formData={packageDetailsFormData}
                onFormDataChange={handlePackageDetailsChange}
                handlePackageImageUpload={handlePackageImageUpload}
                handleAccordionIconUpload={handleAccordionIconUpload}
                uploadProgress={packageImageProgress}
                errorMessage={packageImageError}
                onDeleteFeaturedImage={handleDeleteFeaturedImage}
                onDownloadFeaturedImage={handleDownloadFeaturedImage}
                iconUploadProgress={iconUploadProgress}
                onDownloadAccordionIcon={(id: string) => handleDownloadFeaturedImage(id)}
                locale={locale}
            />
            )}

            {/* Step 2: Course Selection */}
            {currentStep === 2 && (
            <PackageCoursesStep
                courses={allCourses}
                selectedCourseIds={selectedCourseIds}
                onToggleCourseSelection={toggleCourseSelection}
                locale={locale}
            />
            )}

            {/* Step 3: Pricing Configuration */}
            {currentStep === 3 && (
                <PackagePricingStep
                    formData={pricingFormData}
                    onFormDataChange={handlePricingChange}
                />
            )}

            {/* Step 4: Preview and Publish */}
            {currentStep === 4 && (
                <PackagePreviewStep
                    packageTitle={packageDetailsFormData.packageTitle || 'Package Title Here'}
                    packageDescription={packageDetailsFormData.packageDescription || 'Package Description Here'}
                    featuredImageUrl={packageDetailsFormData.featuredImage?.url}
                    durationInMinutes={163}
                    accordionTitle={packageDetailsFormData.accordionTitle}
                    showListItemNumbers={packageDetailsFormData.showListItemNumbers}
                    accordionItems={packageDetailsFormData.accordionItems}
                    selectedCourses={selectedCourses}
                    onExcludeCourse={(id: string) => toggleCourseSelection(id)}
                    coachingIncluded={coachingIncluded}
                    onToggleCoaching={() => setCoachingIncluded(!coachingIncluded)}
                    selectedCoursesTotal={calculateIndividualCourseTotal()}
                    selectedCoursesSavings={calculateSavings()}
                    onBack={handleBack}
                    onPublish={handlePublishPackage}
                    isPublishing={isPublishing}
                    locale={locale}
                    bottomBannerTitle="Buy complete package"
                    bottomBannerSubtitle="Here you get everything included. You can therefore gradually implement your overall appearance with a key visual, new branding, a website and corresponding video content."
                />
            )}

            

            {/* Footer Actions */}
            <div className="flex justify-between pt-2 pb-6">
                {currentStep === 1 ? (
                    <div className="flex gap-4 w-full">
                        <Button
                            variant="secondary"
                            size="medium"
                            text="Discard"
                            onClick={handleDiscard}
                            className="flex-1"
                        />
                        <Button
                            variant="primary"
                            size="medium"
                            text="Next: Choose courses"
                            onClick={handleNext}
                            className="flex-1"
                        />
                    </div>
                ) : currentStep === 2 ? (
                    <div className="flex gap-4 w-full">
                        <Button
                            variant="secondary"
                            size="medium"
                            text="Back"
                            onClick={handleBack}
                            className="flex-1"
                        />
                        <Button
                            variant="primary"
                            size="medium"
                            text="Next: Choose pricing"
                            onClick={handleNext}
                            className="flex-1"
                        />
                    </div>
                ) : currentStep === 3 ? (
                    <div className="flex gap-4 w-full">
                        <Button
                            variant="secondary"
                            size="medium"
                            text="Back"
                            onClick={handleBack}
                            className="flex-1"
                        />
                        <Button
                            variant="primary"
                            size="medium"
                            text="Next: Preview"
                            onClick={handleNext}
                            className="flex-1"
                        />
                    </div>
                ) : currentStep === 4 ? (
                    <>
                        <div className="flex flex-col gap-4 pt-1">
                            <div className="flex flex-col gap-2">
                                <h3 className="text-xl font-semibold text-text-primary">Publish package?</h3>
                                <p className="text-text-secondary">
                                    Does everything look good? If so, go ahead and publish the package. Keep in mind that once a package is published, its courses cannot be changed, so double-check everything before proceeding.
                                </p>
                            </div>
                            <div className="flex gap-4 w-full">
                                <Button
                                    variant="secondary"
                                    size="medium"
                                    text="No, go back"
                                    onClick={handleBack}
                                    className="flex-1"
                                />
                                <Button
                                    variant="primary"
                                    size="medium"
                                    text={isPublishing ? 'Publishing...' : 'Yes, publish package'}
                                    onClick={handlePublishPackage}
                                    disabled={isPublishing}
                                    className="flex-1"
                                />
                </div>
                </div>
                    </>
                ) : null}
            </div>
        </div>
    );
}
